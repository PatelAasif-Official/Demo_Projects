var Rollup = (function (exports) {
	'use strict';

	var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
	// MIT License. See license.txt

	/*

	Inheritence "Class"
	-------------------
	see: http://ejohn.org/blog/simple-javascript-inheritance/
	To subclass, use:

		var MyClass = Class.extend({
			init: function
		})

	*/
	// https://stackoverflow.com/a/15052240/5353542

	/* Simple JavaScript Inheritance for ES 5.1
	 * based on http://ejohn.org/blog/simple-javascript-inheritance/
	 *  (inspired by base2 and Prototype)
	 * MIT Licensed.
	 */
	(function(global) {
		var fnTest = /xyz/.test(function(){}) ? /\b_super\b/ : /.*/;

		// The base Class implementation (does nothing)
		function Class(){}

		// Create a new Class that inherits from this class
		Class.extend = function(props) {
		  var _super = this.prototype;

		  // Set up the prototype to inherit from the base class
		  // (but without running the init constructor)
		  var proto = Object.create(_super);

		  // Copy the properties over onto the new prototype
		  for (var name in props) {
			// Check if we're overwriting an existing function
			proto[name] = typeof props[name] === "function" &&
			  typeof _super[name] == "function" && fnTest.test(props[name])
			  ? (function(name, fn){
				  return function() {
					var tmp = this._super;

					// Add a new ._super() method that is the same method
					// but on the super-class
					this._super = _super[name];

					// The method only need to be bound temporarily, so we
					// remove it when we're done executing
					var ret = fn.apply(this, arguments);
					this._super = tmp;

					return ret;
				  };
				})(name, props[name])
			  : props[name];
		  }

		  // The new constructor
		  var newClass = typeof proto.init === "function"
			? proto.hasOwnProperty("init")
			  ? proto.init // All construction is actually done in the init method
			  : function SubClass(){ _super.init.apply(this, arguments); }
			: function EmptyClass(){};

		  // Populate our constructed prototype object
		  newClass.prototype = proto;

		  // Enforce the constructor to be what we expect
		  proto.constructor = newClass;

		  // And make this class extendable
		  newClass.extend = Class.extend;

		  return newClass;
		};

		// export
		global.Class = Class;
	  })(commonjsGlobal);

	var _class = {

	};

	// String.prototype.includes polyfill
	// https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/includes
	if (!String.prototype.includes) {
		String.prototype.includes = function(search, start) {
			if (typeof start !== 'number') {
				start = 0;
			}
			if (start + search.length > this.length) {
				return false;
			} else {
				return this.indexOf(search, start) !== -1;
			}
		};
	}
	// Array.prototype.includes polyfill
	// https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/includes
	if (!Array.prototype.includes) {
		Object.defineProperty(Array.prototype, 'includes', {
			value: function(searchElement, fromIndex) {
				if (this == null) {
					throw new TypeError('"this" is null or not defined');
				}
				var o = Object(this);
				var len = o.length >>> 0;
				if (len === 0) {
					return false;
				}
				var n = fromIndex | 0;
				var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);
				while (k < len) {
					if (o[k] === searchElement) {
						return true;
					}
					k++;
				}
				return false;
			}
		});
	}


	if (typeof String.prototype.trimLeft !== "function") {
		String.prototype.trimLeft = function() {
			return this.replace(/^\s+/, "");
		};
	}
	if (typeof String.prototype.trimRight !== "function") {
		String.prototype.trimRight = function() {
			return this.replace(/\s+$/, "");
		};
	}

	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
	if (typeof Object.assign != 'function') {
		// Must be writable: true, enumerable: false, configurable: true
		Object.defineProperty(Object, "assign", {
			value: function assign(target) { // .length of function is 2
				var arguments$1 = arguments;

				if (target == null) { // TypeError if undefined or null
					throw new TypeError('Cannot convert undefined or null to object');
				}

				var to = Object(target);

				for (var index = 1; index < arguments.length; index++) {
					var nextSource = arguments$1[index];

					if (nextSource != null) { // Skip over if undefined or null
						for (var nextKey in nextSource) {
							// Avoid bugs when hasOwnProperty is shadowed
							if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
								to[nextKey] = nextSource[nextKey];
							}
						}
					}
				}
				return to;
			},
			writable: true,
			configurable: true
		});
	}

	!function(a){function b(a,b){var c=(65535&a)+(65535&b),d=(a>>16)+(b>>16)+(c>>16);return d<<16|65535&c}function c(a,b){return a<<b|a>>>32-b}function d(a,d,e,f,g,h){return b(c(b(b(d,a),b(f,h)),g),e)}function e(a,b,c,e,f,g,h){return d(b&c|~b&e,a,b,f,g,h)}function f(a,b,c,e,f,g,h){return d(b&e|c&~e,a,b,f,g,h)}function g(a,b,c,e,f,g,h){return d(b^c^e,a,b,f,g,h)}function h(a,b,c,e,f,g,h){return d(c^(b|~e),a,b,f,g,h)}function i(a,c){a[c>>5]|=128<<c%32,a[(c+64>>>9<<4)+14]=c;var d,i,j,k,l,m=1732584193,n=-271733879,o=-1732584194,p=271733878;for(d=0;d<a.length;d+=16){ i=m,j=n,k=o,l=p,m=e(m,n,o,p,a[d],7,-680876936),p=e(p,m,n,o,a[d+1],12,-389564586),o=e(o,p,m,n,a[d+2],17,606105819),n=e(n,o,p,m,a[d+3],22,-1044525330),m=e(m,n,o,p,a[d+4],7,-176418897),p=e(p,m,n,o,a[d+5],12,1200080426),o=e(o,p,m,n,a[d+6],17,-1473231341),n=e(n,o,p,m,a[d+7],22,-45705983),m=e(m,n,o,p,a[d+8],7,1770035416),p=e(p,m,n,o,a[d+9],12,-1958414417),o=e(o,p,m,n,a[d+10],17,-42063),n=e(n,o,p,m,a[d+11],22,-1990404162),m=e(m,n,o,p,a[d+12],7,1804603682),p=e(p,m,n,o,a[d+13],12,-40341101),o=e(o,p,m,n,a[d+14],17,-1502002290),n=e(n,o,p,m,a[d+15],22,1236535329),m=f(m,n,o,p,a[d+1],5,-165796510),p=f(p,m,n,o,a[d+6],9,-1069501632),o=f(o,p,m,n,a[d+11],14,643717713),n=f(n,o,p,m,a[d],20,-373897302),m=f(m,n,o,p,a[d+5],5,-701558691),p=f(p,m,n,o,a[d+10],9,38016083),o=f(o,p,m,n,a[d+15],14,-660478335),n=f(n,o,p,m,a[d+4],20,-405537848),m=f(m,n,o,p,a[d+9],5,568446438),p=f(p,m,n,o,a[d+14],9,-1019803690),o=f(o,p,m,n,a[d+3],14,-187363961),n=f(n,o,p,m,a[d+8],20,1163531501),m=f(m,n,o,p,a[d+13],5,-1444681467),p=f(p,m,n,o,a[d+2],9,-51403784),o=f(o,p,m,n,a[d+7],14,1735328473),n=f(n,o,p,m,a[d+12],20,-1926607734),m=g(m,n,o,p,a[d+5],4,-378558),p=g(p,m,n,o,a[d+8],11,-2022574463),o=g(o,p,m,n,a[d+11],16,1839030562),n=g(n,o,p,m,a[d+14],23,-35309556),m=g(m,n,o,p,a[d+1],4,-1530992060),p=g(p,m,n,o,a[d+4],11,1272893353),o=g(o,p,m,n,a[d+7],16,-155497632),n=g(n,o,p,m,a[d+10],23,-1094730640),m=g(m,n,o,p,a[d+13],4,681279174),p=g(p,m,n,o,a[d],11,-358537222),o=g(o,p,m,n,a[d+3],16,-722521979),n=g(n,o,p,m,a[d+6],23,76029189),m=g(m,n,o,p,a[d+9],4,-640364487),p=g(p,m,n,o,a[d+12],11,-421815835),o=g(o,p,m,n,a[d+15],16,530742520),n=g(n,o,p,m,a[d+2],23,-995338651),m=h(m,n,o,p,a[d],6,-198630844),p=h(p,m,n,o,a[d+7],10,1126891415),o=h(o,p,m,n,a[d+14],15,-1416354905),n=h(n,o,p,m,a[d+5],21,-57434055),m=h(m,n,o,p,a[d+12],6,1700485571),p=h(p,m,n,o,a[d+3],10,-1894986606),o=h(o,p,m,n,a[d+10],15,-1051523),n=h(n,o,p,m,a[d+1],21,-2054922799),m=h(m,n,o,p,a[d+8],6,1873313359),p=h(p,m,n,o,a[d+15],10,-30611744),o=h(o,p,m,n,a[d+6],15,-1560198380),n=h(n,o,p,m,a[d+13],21,1309151649),m=h(m,n,o,p,a[d+4],6,-145523070),p=h(p,m,n,o,a[d+11],10,-1120210379),o=h(o,p,m,n,a[d+2],15,718787259),n=h(n,o,p,m,a[d+9],21,-343485551),m=b(m,i),n=b(n,j),o=b(o,k),p=b(p,l); }return [m,n,o,p]}function j(a){var b,c="";for(b=0;b<32*a.length;b+=8){ c+=String.fromCharCode(a[b>>5]>>>b%32&255); }return c}function k(a){var b,c=[];for(c[(a.length>>2)-1]=void 0,b=0;b<c.length;b+=1){ c[b]=0; }for(b=0;b<8*a.length;b+=8){ c[b>>5]|=(255&a.charCodeAt(b/8))<<b%32; }return c}function l(a){return j(i(k(a),8*a.length))}function m(a,b){var c,d,e=k(a),f=[],g=[];for(f[15]=g[15]=void 0,e.length>16&&(e=i(e,8*a.length)),c=0;16>c;c+=1){ f[c]=909522486^e[c],g[c]=1549556828^e[c]; }return d=i(f.concat(k(b)),512+8*b.length),j(i(g.concat(d),640))}function n(a){var b,c,d="0123456789abcdef",e="";for(c=0;c<a.length;c+=1){ b=a.charCodeAt(c),e+=d.charAt(b>>>4&15)+d.charAt(15&b); }return e}function o(a){return unescape(encodeURIComponent(a))}function p(a){return l(o(a))}function q(a){return n(p(a))}function r(a,b){return m(o(a),o(b))}function s(a,b){return n(r(a,b))}function t(a,b,c){return b?c?r(b,a):s(b,a):c?p(a):q(a)}"function"==typeof define&&define.amd?define(function(){return t}):a.md5=t;}(window);

	// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
	// MIT License. See license.txt

	// provide a namespace
	if(!window.frappe)
		{ window.frappe = {}; }

	frappe.provide = function(namespace) {
		// docs: create a namespace //
		var nsl = namespace.split('.');
		var parent = window;
		for(var i=0; i<nsl.length; i++) {
			var n = nsl[i];
			if(!parent[n]) {
				parent[n] = {};
			}
			parent = parent[n];
		}
		return parent;
	};

	frappe.provide("locals");
	frappe.provide("frappe.flags");
	frappe.provide("frappe.settings");
	frappe.provide("frappe.utils");
	frappe.provide("frappe.ui.form");
	frappe.provide("frappe.modules");
	frappe.provide("frappe.templates");
	frappe.provide("frappe.test_data");
	frappe.provide('frappe.utils');
	frappe.provide('frappe.model');
	frappe.provide('frappe.user');
	frappe.provide('frappe.session');
	frappe.provide('locals.DocType');

	// for listviews
	frappe.provide("frappe.listview_settings");
	frappe.provide("frappe.tour");
	frappe.provide("frappe.listview_parent_route");

	// constants
	window.NEWLINE = '\n';
	window.TAB = 9;
	window.UP_ARROW = 38;
	window.DOWN_ARROW = 40;

	// proxy for user globals defined in desk.js

	// API globals
	window.cur_frm=null;

	function format (str, args) {
		if(str==undefined) { return str; }

		this.unkeyed_index = 0;
		return str.replace(/\{(\w*)\}/g, function(match, key) {

			if (key === '') {
				key = this.unkeyed_index;
				this.unkeyed_index++;
			}
			if (key == +key) {
				return args[key] !== undefined
					? args[key]
					: match;
			}
		}.bind(this));
	}

	if (jQuery) {
		jQuery.format = format;
	}

	// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
	// MIT License. See license.txt

	window.cstr = function(s) {
		if(s==null){ return ''; }
		return s+'';
	};

	window.cint = function(v, def) {
		if (v === true)
			{ return 1; }
		if (v === false)
			{ return 0; }
		v = v + '';
		if (v !== "0") { v = lstrip(v, ['0']); }
		v = parseInt(v); // eslint-ignore-line
		if (isNaN(v)) { v = def === undefined ? 0 : def; }
		return v;
	};

	// to title case
	window.toTitle = function(str){
		var word_in = str.split(" ");
		var word_out = [];

		for(var w in word_in){
			word_out[w] = word_in[w].charAt(0).toUpperCase() + word_in[w].slice(1);
		}

		return word_out.join(" ");
	};

	window.is_null = function(v) {
		if(v===null || v===undefined || cstr(v).trim()==="") { return true; }
	};

	window.copy_dict = function(d) {
		var n = {};
		for(var k in d) { n[k] = d[k]; }
		return n;
	};

	window.validate_email = function(txt) {
		return frappe.utils.validate_type(txt, "email");
	};

	window.validate_phone = function(txt) {
		return frappe.utils.validate_type(txt, "phone");
	};

	window.validate_name = function(txt) {
		return frappe.utils.validate_type(txt, "name");
	};

	window.validate_url = function(txt) {
		return frappe.utils.validate_type(txt, "url");
	};

	window.nth = function(number) {
		number = cint(number);
		var s = 'th';
		if((number+'').substr(-1)=='1') { s = 'st'; }
		if((number+'').substr(-1)=='2') { s = 'nd'; }
		if((number+'').substr(-1)=='3') { s = 'rd'; }
		return number+s;
	};

	window.has_words = function(list, item) {
		if(!item) { return true; }
		if(!list) { return false; }
		for(var i=0, j=list.length; i<j; i++) {
			if(item.indexOf(list[i])!=-1)
				{ return true; }
		}
		return false;
	};

	window.has_common = function(list1, list2) {
		if(!list1 || !list2) { return false; }
		for(var i=0, j=list1.length; i<j; i++) {
			if(in_list(list2, list1[i])){ return true; }
		}
		return false;
	};

	// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors

	if (!window.frappe) { window.frappe = {}; }

	function flt$1(v, decimals, number_format) {
		if (v == null || v == '') { return 0; }

		if (!(typeof v === "number" || String(parseFloat(v)) == v)) {
			// cases in which this block should not run
			// 1. 'v' is already a number
			// 2. v is already parsed but in string form
			// if (typeof v !== "number") {

			v = v + "";

			// strip currency symbol if exists
			if (v.indexOf(" ") != -1) {
				// using slice(1).join(" ") because space could also be a group separator
				var parts = v.split(" ");
				v = isNaN(parseFloat(parts[0])) ? parts.slice(parts.length - 1).join(" ") : v;
			}

			v = strip_number_groups(v, number_format);

			v = parseFloat(v);
			if (isNaN(v))
				{ v = 0; }
		}

		v = parseFloat(v);
		if (decimals != null)
			{ return _round(v, decimals); }
		return v;
	}

	function strip_number_groups(v, number_format) {
		if (!number_format) { number_format = get_number_format$1(); }
		var info = get_number_format_info$1(number_format);

		// strip groups (,)
		var group_regex = new RegExp(info.group_sep === "." ? "\\." : info.group_sep, "g");
		v = v.replace(group_regex, "");

		// replace decimal separator with (.)
		if (info.decimal_str !== "." && info.decimal_str !== "") {
			var decimal_regex = new RegExp(info.decimal_str, "g");
			v = v.replace(decimal_regex, ".");
		}

		return v;
	}


	frappe.number_format_info = {
		"#,###.##": { decimal_str: ".", group_sep: "," },
		"#.###,##": { decimal_str: ",", group_sep: "." },
		"# ###.##": { decimal_str: ".", group_sep: " " },
		"# ###,##": { decimal_str: ",", group_sep: " " },
		"#'###.##": { decimal_str: ".", group_sep: "'" },
		"#, ###.##": { decimal_str: ".", group_sep: ", " },
		"#,##,###.##": { decimal_str: ".", group_sep: "," },
		"#,###.###": { decimal_str: ".", group_sep: "," },
		"#.###": { decimal_str: "", group_sep: "." },
		"#,###": { decimal_str: "", group_sep: "," },
	};

	window.format_number = function (v, format, decimals) {
		if (!format) {
			format = get_number_format$1();
			if (decimals == null) { decimals = cint(frappe.defaults.get_default("float_precision")) || 3; }
		}

		var info = get_number_format_info$1(format);

		// Fix the decimal first, toFixed will auto fill trailing zero.
		if (decimals == null) { decimals = info.precision; }

		v = flt$1(v, decimals, format);

		var is_negative = false;
		if (v < 0) { is_negative = true; }
		v = Math.abs(v);

		v = v.toFixed(decimals);

		var part = v.split('.');

		// get group position and parts
		var group_position = info.group_sep ? 3 : 0;

		if (group_position) {
			var integer = part[0];
			var str = '';
			var offset = integer.length % group_position;
			for (var i = integer.length; i >= 0; i--) {
				var l = replace_all(str, info.group_sep, "").length;
				if (format == "#,##,###.##" && str.indexOf(",") != -1) { // INR
					group_position = 2;
					l += 1;
				}

				str += integer.charAt(i);

				if (l && !((l + 1) % group_position) && i != 0) {
					str += info.group_sep;
				}
			}
			part[0] = str.split("").reverse().join("");
		}
		if (part[0] + "" == "") {
			part[0] = "0";
		}

		// join decimal
		part[1] = (part[1] && info.decimal_str) ? (info.decimal_str + part[1]) : "";

		// join
		return (is_negative ? "-" : "") + part[0] + part[1];
	};

	function format_currency(v, currency, decimals) {
		var format = get_number_format$1(currency);
		var symbol = get_currency_symbol(currency);
		if(decimals === undefined) {
			decimals = frappe.boot.sysdefaults.currency_precision || null;
		}

		if (symbol)
			{ return symbol + " " + format_number(v, format, decimals); }
		else
			{ return format_number(v, format, decimals); }
	}

	function get_currency_symbol(currency) {
		if (frappe.boot) {
			if (frappe.boot.sysdefaults && frappe.boot.sysdefaults.hide_currency_symbol == "Yes")
				{ return null; }

			if (!currency)
				{ currency = frappe.boot.sysdefaults.currency; }

			return frappe.model.get_value(":Currency", currency, "symbol") || currency;
		} else {
			// load in template
			return frappe.currency_symbols[currency];
		}
	}

	function get_number_format$1(currency) {
		return (frappe.boot && frappe.boot.sysdefaults && frappe.boot.sysdefaults.number_format) || "#,###.##";
	}

	function get_number_format_info$1(format) {
		var info = frappe.number_format_info[format];

		if (!info) {
			info = { decimal_str: ".", group_sep: "," };
		}

		// get the precision from the number format
		info.precision = format.split(info.decimal_str).slice(1)[0].length;

		return info;
	}

	function _round(num, precision) {
		var is_negative = num < 0 ? true : false;
		var d = cint(precision);
		var m = Math.pow(10, d);
		var n = +(d ? Math.abs(num) * m : Math.abs(num)).toFixed(8); // Avoid rounding errors
		var i = Math.floor(n), f = n - i;
		var r = ((!precision && f == 0.5) ? ((i % 2 == 0) ? i : i + 1) : Math.round(n));
		r = d ? r / m : r;
		return is_negative ? -r : r;

	}

	function roundNumber(num, precision) {
		// backward compatibility
		return _round(num, precision);
	}

	function precision$1(fieldname, doc) {
		if (cur_frm) {
			if (!doc) { doc = cur_frm.doc; }
			var df = frappe.meta.get_docfield(doc.doctype, fieldname, doc.parent || doc.name);
			if (!df) { console.log(fieldname + ": could not find docfield in method precision()"); }
			return frappe.meta.get_field_precision(df, doc);
		} else {
			return frappe.boot.sysdefaults.float_precision
		}
	}

	function in_list$1(list, item) {
		return list.includes(item);
	}

	function remainder(numerator, denominator, precision) {
		precision = cint(precision);
		var multiplier = Math.pow(10, precision);
		if (precision) {
			var _remainder = ((numerator * multiplier) % (denominator * multiplier)) / multiplier;
		} else {
			var _remainder = numerator % denominator;
		}

		return flt$1(_remainder, precision);
	}

	function round_based_on_smallest_currency_fraction(value, currency, precision) {
		var smallest_currency_fraction_value = flt$1(frappe.model.get_value(":Currency",
			currency, "smallest_currency_fraction_value"));

		if (smallest_currency_fraction_value) {
			var remainder_val = remainder(value, smallest_currency_fraction_value, precision);
			if (remainder_val > (smallest_currency_fraction_value / 2)) {
				value += (smallest_currency_fraction_value - remainder_val);
			} else {
				value -= remainder_val;
			}
		} else {
			value = _round(value);
		}
		return value;
	}

	function fmt_money(v, format){
		// deprecated!
		// for backward compatibility
		return format_currency(v, format);
	}


	Object.assign(window, {
		flt: flt$1,
		cint: cint,
		strip_number_groups: strip_number_groups,
		format_currency: format_currency,
		fmt_money: fmt_money,
		get_currency_symbol: get_currency_symbol,
		get_number_format: get_number_format$1,
		get_number_format_info: get_number_format_info$1,
		_round: _round,
		roundNumber: roundNumber,
		precision: precision$1,
		remainder: remainder,
		round_based_on_smallest_currency_fraction: round_based_on_smallest_currency_fraction,
		in_list: in_list$1
	});

	var isArray = Array.isArray;
	var keyList = Object.keys;
	var hasProp = Object.prototype.hasOwnProperty;

	var fastDeepEqual = function equal(a, b) {
	  if (a === b) { return true; }

	  if (a && b && typeof a == 'object' && typeof b == 'object') {
	    var arrA = isArray(a)
	      , arrB = isArray(b)
	      , i
	      , length
	      , key;

	    if (arrA && arrB) {
	      length = a.length;
	      if (length != b.length) { return false; }
	      for (i = length; i-- !== 0;)
	        { if (!equal(a[i], b[i])) { return false; } }
	      return true;
	    }

	    if (arrA != arrB) { return false; }

	    var dateA = a instanceof Date
	      , dateB = b instanceof Date;
	    if (dateA != dateB) { return false; }
	    if (dateA && dateB) { return a.getTime() == b.getTime(); }

	    var regexpA = a instanceof RegExp
	      , regexpB = b instanceof RegExp;
	    if (regexpA != regexpB) { return false; }
	    if (regexpA && regexpB) { return a.toString() == b.toString(); }

	    var keys = keyList(a);
	    length = keys.length;

	    if (length !== keyList(b).length)
	      { return false; }

	    for (i = length; i-- !== 0;)
	      { if (!hasProp.call(b, keys[i])) { return false; } }

	    for (i = length; i-- !== 0;) {
	      key = keys[i];
	      if (!equal(a[key], b[key])) { return false; }
	    }

	    return true;
	  }

	  return a!==a && b!==b;
	};

	// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors

	frappe.provide("frappe.utils");

	// Array de duplicate
	if (!Array.prototype.uniqBy) {
		Object.defineProperty(Array.prototype, 'uniqBy', {
			value: function (key) {
				var seen = {};
				return this.filter(function (item) {
					var k = key(item);
					return k in seen ? false : (seen[k] = true);
				});
			}
		});
		Object.defineProperty(Array.prototype, 'move', {
			value: function(from, to) {
				this.splice(to, 0, this.splice(from, 1)[0]);
			}
		});
	}

	// Pluralize
	String.prototype.plural = function(revert) {
		var plural = {
			"(quiz)$": "$1zes",
			"^(ox)$": "$1en",
			"([m|l])ouse$": "$1ice",
			"(matr|vert|ind)ix|ex$": "$1ices",
			"(x|ch|ss|sh)$": "$1es",
			"([^aeiouy]|qu)y$": "$1ies",
			"(hive)$": "$1s",
			"(?:([^f])fe|([lr])f)$": "$1$2ves",
			"(shea|lea|loa|thie)f$": "$1ves",
			sis$: "ses",
			"([ti])um$": "$1a",
			"(tomat|potat|ech|her|vet)o$": "$1oes",
			"(bu)s$": "$1ses",
			"(alias)$": "$1es",
			"(octop)us$": "$1i",
			"(ax|test)is$": "$1es",
			"(us)$": "$1es",
			"([^s]+)$": "$1s",
		};

		var singular = {
			"(quiz)zes$": "$1",
			"(matr)ices$": "$1ix",
			"(vert|ind)ices$": "$1ex",
			"^(ox)en$": "$1",
			"(alias)es$": "$1",
			"(octop|vir)i$": "$1us",
			"(cris|ax|test)es$": "$1is",
			"(shoe)s$": "$1",
			"(o)es$": "$1",
			"(bus)es$": "$1",
			"([m|l])ice$": "$1ouse",
			"(x|ch|ss|sh)es$": "$1",
			"(m)ovies$": "$1ovie",
			"(s)eries$": "$1eries",
			"([^aeiouy]|qu)ies$": "$1y",
			"([lr])ves$": "$1f",
			"(tive)s$": "$1",
			"(hive)s$": "$1",
			"(li|wi|kni)ves$": "$1fe",
			"(shea|loa|lea|thie)ves$": "$1f",
			"(^analy)ses$": "$1sis",
			"((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$":
				"$1$2sis",
			"([ti])a$": "$1um",
			"(n)ews$": "$1ews",
			"(h|bl)ouses$": "$1ouse",
			"(corpse)s$": "$1",
			"(us)es$": "$1",
			s$: "",
		};

		var irregular = {
			move: "moves",
			foot: "feet",
			goose: "geese",
			sex: "sexes",
			child: "children",
			man: "men",
			tooth: "teeth",
			person: "people",
		};

		var uncountable = [
			"sheep",
			"fish",
			"deer",
			"moose",
			"series",
			"species",
			"money",
			"rice",
			"information",
			"equipment" ];

		// save some time in the case that singular and plural are the same
		if (uncountable.indexOf(this.toLowerCase()) >= 0) { return this; }

		// check for irregular forms
		var word;
		var pattern;
		var replace;
		for (word in irregular) {
			if (revert) {
				pattern = new RegExp(irregular[word] + "$", "i");
				replace = word;
			} else {
				pattern = new RegExp(word + "$", "i");
				replace = irregular[word];
			}
			if (pattern.test(this)) { return this.replace(pattern, replace); }
		}

		var array;
		if (revert) { array = singular; }
		else { array = plural; }

		// check for matches using regular expressions
		var reg;
		for (reg in array) {
			pattern = new RegExp(reg, "i");

			if (pattern.test(this)) { return this.replace(pattern, array[reg]); }
		}

		return this;
	};

	Object.assign(frappe.utils, {
		get_random: function(len) {
			var text = "";
			var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";

			for ( var i=0; i < len; i++ )
				{ text += possible.charAt(Math.floor(Math.random() * possible.length)); }

			return text;
		},
		get_file_link: function(filename) {
			filename = cstr(filename);
			if (frappe.utils.is_url(filename)) {
				return filename;
			} else if (filename.indexOf("/")===-1) {
				return "files/" + filename;
			} else {
				return filename;
			}
		},
		replace_newlines: function replace_newlines(t) {
			return t?t.replace(/\n/g, '<br>'):'';
		},
		is_html: function(txt) {
			if (!txt) { return false; }

			if (txt.indexOf("<br>")==-1 && txt.indexOf("<p")==-1
				&& txt.indexOf("<img")==-1 && txt.indexOf("<div")==-1 && !txt.includes('<span')) {
				return false;
			}
			return true;
		},
		is_mac: function() {
			return window.navigator.platform === 'MacIntel';
		},
		is_xs: function() {
			return $(document).width() < 768;
		},
		is_sm: function() {
			return $(document).width() < 991 && $(document).width() >= 768;
		},
		is_md: function() {
			return $(document).width() < 1199 && $(document).width() >= 991;
		},
		is_json: function(str) {
			try {
				JSON.parse(str);
			} catch (e) {
				return false;
			}
			return true;
		},
		strip_whitespace: function(html) {
			return (html || "").replace(/<p>\s*<\/p>/g, "").replace(/<br>(\s*<br>\s*)+/g, "<br><br>");
		},
		encode_tags: function(html) {
			var tagsToReplace = {
				'&': '&amp;',
				'<': '&lt;',
				'>': '&gt;'
			};

			function replaceTag(tag) {
				return tagsToReplace[tag] || tag;
			}

			return html.replace(/[&<>]/g, replaceTag);
		},
		strip_original_content: function(txt) {
			var out = [],
				part = [],
				newline = txt.indexOf("<br>")===-1 ? "\n" : "<br>";

			$.each(txt.split(newline), function(i, t) {
				var tt = strip(t);
				if (tt && (tt.substr(0, 1)===">" || tt.substr(0, 4)==="&gt;")) {
					part.push(t);
				} else {
					out.push(t);
					part = [];
				}
			});
			return out.join(newline);
		},


		escape_html: function(txt) {
			var escape_html_mapping = {
				'&': '&amp;',
				'<': '&lt;',
				'>': '&gt;',
				'"': '&quot;',
				"'": '&#39;',
				'/': '&#x2F;',
				'`': '&#x60;',
				'=': '&#x3D;'
			};

			return String(txt).replace(/[&<>"'`=/]/g, function(char) {
				return escape_html_mapping[char];
			});
		},

		html2text: function(html) {
			var d = document.createElement('div');
			d.innerHTML = html;
			return d.textContent;
		},

		is_url: function(txt) {
			return txt.toLowerCase().substr(0, 7)=='http://'
				|| txt.toLowerCase().substr(0, 8)=='https://';
		},
		to_title_case: function(string, with_space) {
			if ( with_space === void 0 ) with_space=false;

			var titlecased_string = string.toLowerCase().replace(/(?:^|[\s-/])\w/g, function(match) {
				return match.toUpperCase();
			});

			var replace_with = with_space ? ' ' : '';

			return titlecased_string.replace(/-|_/g, replace_with);
		},
		toggle_blockquote: function(txt) {
			if (!txt) { return txt; }

			var content = $("<div></div>").html(txt);
			content.find("blockquote").parent("blockquote").addClass("hidden")
				.before('<p><a class="text-muted btn btn-default toggle-blockquote" style="padding: 2px 7px 0px; line-height: 1;"> \
					• • • \
				</a></p>');
			return content.html();
		},
		scroll_to: function(element, animate, additional_offset, element_to_be_scrolled) {
			if ( animate === void 0 ) animate=true;

			element_to_be_scrolled = element_to_be_scrolled || $("html, body");
			var scroll_top = 0;
			if (element) {
				// If a number is passed, just subtract the offset,
				// otherwise calculate scroll position from element
				scroll_top = typeof element == "number"
					? element - cint(additional_offset)
					: this.get_scroll_position(element, additional_offset);
			}

			if (scroll_top < 0) {
				scroll_top = 0;
			}

			// already there
			if (scroll_top == element_to_be_scrolled.scrollTop()) {
				return;
			}

			if (animate) {
				element_to_be_scrolled.animate({ scrollTop: scroll_top });
			} else {
				element_to_be_scrolled.scrollTop(scroll_top);
			}

		},
		get_scroll_position: function(element, additional_offset) {
			var header_offset = $(".navbar").height() + $(".page-head:visible").height();
			var scroll_top = $(element).offset().top - header_offset - cint(additional_offset);
			return scroll_top;
		},
		filter_dict: function(dict, filters) {
			var ret = [];
			if (typeof filters=='string') {
				return [dict[filters]];
			}
			$.each(dict, function(i, d) {
				for (var key in filters) {
					if ($.isArray(filters[key])) {
						if (filters[key][0]=="in") {
							if (filters[key][1].indexOf(d[key])==-1)
								{ return; }
						} else if (filters[key][0]=="not in") {
							if (filters[key][1].indexOf(d[key])!=-1)
								{ return; }
						} else if (filters[key][0]=="<") {
							if (!(d[key] < filters[key])) { return; }
						} else if (filters[key][0]=="<=") {
							if (!(d[key] <= filters[key])) { return; }
						} else if (filters[key][0]==">") {
							if (!(d[key] > filters[key])) { return; }
						} else if (filters[key][0]==">=") {
							if (!(d[key] >= filters[key])) { return; }
						}
					} else {
						if (d[key]!=filters[key]) { return; }
					}
				}
				ret.push(d);
			});
			return ret;
		},
		comma_or: function(list) {
			return frappe.utils.comma_sep(list, " " + __("or") + " ");
		},
		comma_and: function(list) {
			return frappe.utils.comma_sep(list, " " + __("and") + " ");
		},
		comma_sep: function(list, sep) {
			if (list instanceof Array) {
				if (list.length==0) {
					return "";
				} else if (list.length==1) {
					return list[0];
				} else {
					return list.slice(0, list.length-1).join(", ") + sep + list.slice(-1)[0];
				}
			} else {
				return list;
			}
		},
		set_footnote: function(footnote_area, wrapper, txt) {
			if (!footnote_area) {
				footnote_area = $('<div class="text-muted footnote-area level">')
					.appendTo(wrapper);
			}

			if (txt) {
				footnote_area.html(txt);
			} else {
				footnote_area.remove();
				footnote_area = null;
			}
			return footnote_area;
		},
		get_args_dict_from_url: function(txt) {
			var args = {};
			$.each(decodeURIComponent(txt).split("&"), function(i, arg) {
				arg = arg.split("=");
				args[arg[0]] = arg[1];
			});
			return args;
		},
		get_url_from_dict: function(args) {
			return $.map(args, function(val, key) {
				if (val!==null)
					{ return encodeURIComponent(key)+"="+encodeURIComponent(val); }
				else
					{ return null; }
			}).join("&") || "";
		},
		validate_type: function ( val, type ) {
			// from https://github.com/guillaumepotier/Parsley.js/blob/master/parsley.js#L81
			var regExp;

			switch ( type ) {
				case "phone":
					regExp = /^([0-9 +_\-,.*#()]){1,20}$/;
					break;
				case "name":
					regExp = /^[\w][\w'-]*([ \w][\w'-]+)*$/;
					break;
				case "number":
					regExp = /^-?(?:\d+|\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/;
					break;
				case "digits":
					regExp = /^\d+$/;
					break;
				case "alphanum":
					regExp = /^\w+$/;
					break;
				case "email":
					// from https://emailregex.com/
					regExp = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
					break;
				case "url":
					regExp = /^((([A-Za-z0-9.+-]+:(?:\/\/)?)(?:[-;:&=\+\,\w]@)?[A-Za-z0-9.-]+(:[0-9]+)?|(?:www.|[-;:&=\+\$,\w]+@)[A-Za-z0-9.-]+)((?:\/[\+~%\/.\w-_]*)?\??(?:[-\+=&;%@.\w_]*)#?(?:[\w]*))?)$/i;
					break;
				case "dateIso":
					regExp = /^(\d{4})\D?(0[1-9]|1[0-2])\D?([12]\d|0[1-9]|3[01])$/;
					break;
				default:
					return false;
			}

			// test regExp if not null
			return '' !== val ? regExp.test( val ) : false;
		},
		guess_style: function(text, default_style, _colour) {
			var style = default_style || "default";
			var colour = "gray";
			if (text) {
				if (has_words(["Pending", "Review", "Medium", "Not Approved"], text)) {
					style = "warning";
					colour = "orange";
				} else if (has_words(["Open", "Urgent", "High", "Failed", "Rejected", "Error"], text)) {
					style = "danger";
					colour = "red";
				} else if (has_words(["Closed", "Finished", "Converted", "Completed", "Complete", "Confirmed",
					"Approved", "Yes", "Active", "Available", "Paid", "Success"], text)) {
					style = "success";
					colour = "green";
				} else if (has_words(["Submitted"], text)) {
					style = "info";
					colour = "blue";
				}
			}
			return _colour ? colour : style;
		},

		guess_colour: function(text) {
			return frappe.utils.guess_style(text, null, true);
		},

		get_indicator_color: function(state) {
			return frappe.db.get_list('Workflow State', {filters: {name: state}, fields: ['name', 'style']}).then(function (res) {
				var state = res[0];
				if (!state.style) {
					return frappe.utils.guess_colour(state.name);
				}
				var style = state.style;
				var colour_map = {
					"Success": "green",
					"Warning": "orange",
					"Danger": "red",
					"Primary": "blue",
				};

				return colour_map[style];
			});

		},

		sort: function(list, key, compare_type, reverse) {
			if (!list || list.length < 2)
				{ return list || []; }

			var sort_fn = {
				"string": function(a, b) {
					return cstr(a[key]).localeCompare(cstr(b[key]));
				},
				"number": function(a, b) {
					return flt(a[key]) - flt(b[key]);
				}
			};

			if (!compare_type)
				{ compare_type = typeof list[0][key]==="string" ? "string" : "number"; }

			list.sort(sort_fn[compare_type]);

			if (reverse) {
				list.reverse();
			}

			return list;
		},

		unique: function(list) {
			var dict = {},
				arr = [];
			for (var i=0, l=list.length; i < l; i++) {
				if (!(list[i] in dict)) {
					dict[list[i]] = null;
					arr.push(list[i]);
				}
			}
			return arr;
		},

		remove_nulls: function(list) {
			var new_list = [];
			for (var i=0, l=list.length; i < l; i++) {
				if (!is_null(list[i])) {
					new_list.push(list[i]);
				}
			}
			return new_list;
		},

		all: function(lst) {
			for (var i=0, l=lst.length; i<l; i++) {
				if (!lst[i]) {
					return false;
				}
			}
			return true;
		},

		dict: function(keys, values) {
			// make dictionaries from keys and values
			var out = [];
			$.each(values, function(row_idx, row) {
				var new_row = {};
				$.each(keys, function(key_idx, key) {
					new_row[key] = row[key_idx];
				});
				out.push(new_row);
			});
			return out;
		},

		sum: function(list) {
			return list.reduce(function(previous_value, current_value) {
				return flt(previous_value) + flt(current_value);
			}, 0.0);
		},

		arrays_equal: function(arr1, arr2) {
			if (!arr1 || !arr2) {
				return false;
			}
			if (arr1.length != arr2.length) {
				return false;
			}
			for (var i = 0; i < arr1.length; i++) {
				if ($.isArray(arr1[i])) {
					if (!frappe.utils.arrays_equal(arr1[i], arr2[i])) {
						return false;
					}
				} else if (arr1[i] !== arr2[i]) {
					return false;
				}
			}
			return true;
		},

		intersection: function(a, b) {
			// from stackoverflow: http://stackoverflow.com/questions/1885557/simplest-code-for-array-intersection-in-javascript
			/* finds the intersection of
			 * two arrays in a simple fashion.
			 *
			 * PARAMS
			 *  a - first array, must already be sorted
			 *  b - second array, must already be sorted
			 *
			 * NOTES
			 *
			 *  Should have O(n) operations, where n is
			 *    n = MIN(a.length(), b.length())
			 */
			var ai=0, bi=0;
			var result = new Array();

			// sorted copies
			a = ([].concat(a)).sort();
			b = ([].concat(b)).sort();

			while ( ai < a.length && bi < b.length ) {
				if (a[ai] < b[bi] ) {
					ai++;
				} else if (a[ai] > b[bi] ) {
					bi++;
				} else {
					/* they're equal */
					result.push(a[ai]);
					ai++;
					bi++;
				}
			}

			return result;
		},

		resize_image: function(reader, callback, max_width, max_height) {
			var tempImg = new Image();
			if (!max_width) { max_width = 600; }
			if (!max_height) { max_height = 400; }
			tempImg.src = reader.result;

			tempImg.onload = function() {
				var tempW = tempImg.width;
				var tempH = tempImg.height;
				if (tempW > tempH) {
					if (tempW > max_width) {
						tempH *= max_width / tempW;
						tempW = max_width;
					}
				} else {
					if (tempH > max_height) {
						tempW *= max_height / tempH;
						tempH = max_height;
					}
				}

				var canvas = document.createElement('canvas');
				canvas.width = tempW;
				canvas.height = tempH;
				var ctx = canvas.getContext("2d");
				ctx.drawImage(this, 0, 0, tempW, tempH);
				var dataURL = canvas.toDataURL("image/jpeg");
				setTimeout(function() {
					callback(dataURL);
				}, 10 );
			};
		},

		csv_to_array: function (strData, strDelimiter) {
			// Check to see if the delimiter is defined. If not,
			// then default to comma.
			strDelimiter = (strDelimiter || ",");

			// Create a regular expression to parse the CSV values.
			var objPattern = new RegExp(
				(
					// Delimiters.
					"(\\" + strDelimiter + "|\\r?\\n|\\r|^)" +

					// Quoted fields.
					"(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|" +

					// Standard fields.
					"([^\"\\" + strDelimiter + "\\r\\n]*))"
				),
				"gi"
			);


			// Create an array to hold our data. Give the array
			// a default empty first row.
			var arrData = [[]];

			// Create an array to hold our individual pattern
			// matching groups.
			var arrMatches = null;


			// Keep looping over the regular expression matches
			// until we can no longer find a match.
			while ((arrMatches = objPattern.exec( strData ))) {

				// Get the delimiter that was found.
				var strMatchedDelimiter = arrMatches[ 1 ];

				// Check to see if the given delimiter has a length
				// (is not the start of string) and if it matches
				// field delimiter. If id does not, then we know
				// that this delimiter is a row delimiter.
				if (
					strMatchedDelimiter.length &&
					strMatchedDelimiter !== strDelimiter
				) {

					// Since we have reached a new row of data,
					// add an empty row to our data array.
					arrData.push( [] );

				}

				var strMatchedValue;

				// Now that we have our delimiter out of the way,
				// let's check to see which kind of value we
				// captured (quoted or unquoted).
				if (arrMatches[ 2 ]) {

					// We found a quoted value. When we capture
					// this value, unescape any double quotes.
					strMatchedValue = arrMatches[ 2 ].replace(
						new RegExp( "\"\"", "g" ),
						"\""
					);

				} else {

					// We found a non-quoted value.
					strMatchedValue = arrMatches[ 3 ];

				}


				// Now that we have our value string, let's add
				// it to the data array.
				arrData[ arrData.length - 1 ].push( strMatchedValue );
			}

			// Return the parsed data.
			return ( arrData );
		},

		warn_page_name_change: function() {
			frappe.msgprint(__("Note: Changing the Page Name will break previous URL to this page."));
		},

		notify: function(subject, body, route, onclick) {
			console.log('push notifications are evil and deprecated');
		},

		set_title: function(title) {
			frappe._original_title = title;
			if (frappe._title_prefix) {
				title = frappe._title_prefix + " " + title.replace(/<[^>]*>/g, "");
			}
			document.title = title;

			// save for re-routing
			var sub_path = frappe.router.get_sub_path();
			frappe.route_titles[sub_path] = title;
		},

		set_title_prefix: function(prefix) {
			frappe._title_prefix = prefix;

			// reset the original title
			frappe.utils.set_title(frappe._original_title);
		},

		is_image_file: function(filename) {
			if (!filename) { return false; }
			// url can have query params
			filename = filename.split('?')[0];
			return (/\.(gif|jpg|jpeg|tiff|png|svg)$/i).test(filename);
		},

		play_sound: function(name) {
			try {
				if (frappe.boot.user.mute_sounds) {
					return;
				}

				var audio = $("#sound-" + name)[0];
				audio.volume = audio.getAttribute("volume");
				audio.play();

			} catch (e) {
				console.log("Cannot play sound", name, e);
				// pass
			}

		},
		split_emails: function(txt) {
			var email_list = [];

			if (!txt) {
				return email_list;
			}

			// emails can be separated by comma or newline
			txt.split(/[,\n](?=(?:[^"]|"[^"]*")*$)/g).forEach(function(email) {
				email = email.trim();
				if (email) {
					email_list.push(email);
				}
			});

			return email_list;
		},
		supportsES6: function() {
			try {
				new Function("(a = 0) => a");
				return true;
			} catch (err) {
				return false;
			}
		}(),
		throttle: function (func, wait, options) {
			var context, args, result;
			var timeout = null;
			var previous = 0;
			if (!options) { options = {}; }

			var later = function () {
				previous = options.leading === false ? 0 : Date.now();
				timeout = null;
				result = func.apply(context, args);
				if (!timeout) { context = args = null; }
			};

			return function () {
				var now = Date.now();
				if (!previous && options.leading === false) { previous = now; }
				var remaining = wait - (now - previous);
				context = this;
				args = arguments;
				if (remaining <= 0 || remaining > wait) {
					if (timeout) {
						clearTimeout(timeout);
						timeout = null;
					}
					previous = now;
					result = func.apply(context, args);
					if (!timeout) { context = args = null; }
				} else if (!timeout && options.trailing !== false) {
					timeout = setTimeout(later, remaining);
				}
				return result;
			};
		},
		debounce: function(func, wait, immediate) {
			var timeout;
			return function() {
				var context = this, args = arguments;
				var later = function() {
					timeout = null;
					if (!immediate) { func.apply(context, args); }
				};
				var callNow = immediate && !timeout;
				clearTimeout(timeout);
				timeout = setTimeout(later, wait);
				if (callNow) { func.apply(context, args); }
			};
		},
		get_form_link: function(doctype, name, html, display_text, query_params_obj) {
			if ( html === void 0 ) html=false;
			if ( display_text === void 0 ) display_text=null;
			if ( query_params_obj === void 0 ) query_params_obj=null;

			display_text = display_text || name;
			name = encodeURIComponent(name);
			var route = "/app/" + (encodeURIComponent(doctype.toLowerCase().replace(/ /g, '-'))) + "/" + name;
			if (query_params_obj) {
				route += frappe.utils.make_query_string(query_params_obj);
			}
			if (html) {
				return ("<a href=\"" + route + "\">" + display_text + "</a>");
			}
			return route;
		},
		get_route_label: function get_route_label(route_str) {
			var route = route_str.split('/');

			if (route[2] === 'Report' || route[0] === 'query-report') {
				return __('{0} Report', [route[3] || route[1]]);
			}
			if (route[0] === 'List') {
				return __('{0} List', [route[1]]);
			}
			if (route[0] === 'modules') {
				return __('{0} Modules', [route[1]]);
			}
			if (route[0] === 'dashboard') {
				return __('{0} Dashboard', [route[1]]);
			}
			return __(frappe.utils.to_title_case(route[0], true));
		},
		report_column_total: function(values, column, type) {
			if (column.column.disable_total) {
				return '';
			} else if (values.length > 0) {
				if (column.column.fieldtype == "Percent" || type === "mean") {
					return values.reduce(function (a, b) { return a + flt(b); }) / values.length;
				} else if (column.column.fieldtype == "Int") {
					return values.reduce(function (a, b) { return a + cint(b); });
				} else if (frappe.model.is_numeric_field(column.column.fieldtype)) {
					return values.reduce(function (a, b) { return a + flt(b); });
				} else {
					return null;
				}
			} else {
				return null;
			}
		},
		setup_search: function setup_search($wrapper, el_class, text_class, data_attr) {
			var $search_input = $wrapper.find('[data-element="search"]').show();
			$search_input.focus().val('');
			var $elements = $wrapper.find(el_class).show();

			$search_input.off('keyup').on('keyup', function () {
				var text_filter = $search_input.val().toLowerCase();
				// Replace trailing and leading spaces
				text_filter = text_filter.replace(/^\s+|\s+$/g, '');
				for (var i = 0; i < $elements.length; i++) {
					var text_element = $elements.eq(i).find(text_class);
					var text = text_element.text().toLowerCase();

					var name = '';
					if (data_attr && text_element.attr(data_attr)) {
						name = text_element.attr(data_attr).toLowerCase();
					}

					if (text.includes(text_filter) || name.includes(text_filter)) {
						$elements.eq(i).css('display', '');
					} else {
						$elements.eq(i).css('display', 'none');
					}
				}
			});
		},
		deep_equal: function deep_equal$1(a, b) {
			return fastDeepEqual(a, b);
		},

		file_name_ellipsis: function file_name_ellipsis(filename, length) {
			var first_part_length = length * 2 / 3;
			var last_part_length = length - first_part_length;
			var parts = filename.split('.');
			var extn = parts.pop();
			var name = parts.join('');
			var first_part = name.slice(0, first_part_length);
			var last_part = name.slice(-last_part_length);
			if (name.length > length) {
				return (first_part + "..." + last_part + "." + extn);
			} else {
				return filename;
			}
		},
		get_decoded_string: function get_decoded_string(dataURI) {
			// decodes base64 to string
			var parts = dataURI.split(',');
			var encoded_data = parts[1];
			var decoded = atob(encoded_data);
			try {
				var escaped = escape(decoded);
				decoded = decodeURIComponent(escaped);

			} catch (e) {
				// pass decodeURIComponent failure
				// just return atob response
			}
			return decoded;
		},
		copy_to_clipboard: function copy_to_clipboard(string) {
			var input = $("<input>");
			$("body").append(input);
			input.val(string).select();

			document.execCommand("copy");
			input.remove();

			frappe.show_alert({
				indicator: 'green',
				message: __('Copied to clipboard.')
			});
		},
		is_rtl: function is_rtl(lang) {
			if ( lang === void 0 ) lang=null;

			return ["ar", "he", "fa", "ps"].includes(lang || frappe.boot.lang);
		},
		bind_actions_with_object: function bind_actions_with_object($el, object) {
			// remove previously bound event
			$($el).off('click.class_actions');
			// attach new event
			$($el).on('click.class_actions', '[data-action]', function (e) {
				var $target = $(e.currentTarget);
				var action = $target.data('action');
				var method = object[action];
				method ? object[action](e, $target) : null;
			});

			return $el;
		},
		
		eval: function eval$1(code, context) {
			if ( context === void 0 ) context={};

			var variable_names = Object.keys(context);
			var variables = Object.values(context);
			code = "let out = " + code + "; return out";
			try {
				var expression_function = new (Function.prototype.bind.apply( Function, [ null ].concat( variable_names, [code]) ));
				return expression_function.apply(void 0, variables);
			} catch (error) {
				console.log('Error evaluating the following expression:'); // eslint-disable-line no-console
				console.error(code); // eslint-disable-line no-console
				throw error;
			}
		},

		get_browser: function get_browser() {
			var ua = navigator.userAgent;
			var tem;
			var M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];

			if (/trident/i.test(M[1])) {
				tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
				return { name: "IE", version: tem[1] || "" };
			}
			if (M[1] === "Chrome") {
				tem = ua.match(/\bOPR|Edge\/(\d+)/);
				if (tem != null) {
					return { name: "Opera", version: tem[1] };
				}
			}
			M = M[2]
				? [M[1], M[2]]
				: [navigator.appName, navigator.appVersion, "-?"];
			if ((tem = ua.match(/version\/(\d+)/i)) != null) {
				M.splice(1, 1, tem[1]);
			}
			return {
				name: M[0],
				version: M[1],
			};
		},

		get_formatted_duration: function get_formatted_duration(value, duration_options) {
			if ( duration_options === void 0 ) duration_options=null;

			var duration = '';
			if (!duration_options) {
				duration_options = {
					hide_days: 0,
					hide_seconds: 0
				};
			}
			if (value) {
				var total_duration = frappe.utils.seconds_to_duration(value, duration_options);

				if (total_duration.days) {
					duration += total_duration.days + __('d', null, 'Days (Field: Duration)');
				}
				if (total_duration.hours) {
					duration += (duration.length ? " " : "");
					duration += total_duration.hours + __('h', null, 'Hours (Field: Duration)');
				}
				if (total_duration.minutes) {
					duration += (duration.length ? " " : "");
					duration += total_duration.minutes + __('m', null, 'Minutes (Field: Duration)');
				}
				if (total_duration.seconds) {
					duration += (duration.length ? " " : "");
					duration += total_duration.seconds + __('s', null, 'Seconds (Field: Duration)');
				}
			}
			return duration;
		},

		seconds_to_duration: function seconds_to_duration(value, duration_options) {
			var secs = value;
			var total_duration = {
				days: Math.floor(secs / (3600 * 24)),
				hours: Math.floor(secs % (3600 * 24) / 3600),
				minutes: Math.floor(secs % 3600 / 60),
				seconds: Math.floor(secs % 60)
			};
			if (duration_options.hide_days) {
				total_duration.hours = Math.floor(secs / 3600);
				total_duration.days = 0;
			}
			return total_duration;
		},

		duration_to_seconds: function duration_to_seconds(days, hours, minutes, seconds) {
			if ( days === void 0 ) days=0;
			if ( hours === void 0 ) hours=0;
			if ( minutes === void 0 ) minutes=0;
			if ( seconds === void 0 ) seconds=0;

			var value = 0;
			if (days) {
				value += days * 24 * 60 * 60;
			}
			if (hours) {
				value += hours * 60 * 60;
			}
			if (minutes) {
				value += minutes * 60;
			}
			if (seconds) {
				value += seconds;
			}
			return value;
		},

		get_duration_options: function(docfield) {
			var duration_options = {
				hide_days: docfield.hide_days,
				hide_seconds: docfield.hide_seconds
			};
			return duration_options;
		},

		get_number_system: function (country) {
			var number_system_map = {
				'India':
					[{
						divisor: 1.0e+7,
						symbol: 'Cr'
					},
					{
						divisor: 1.0e+5,
						symbol: 'Lakh'
					}],
				'':
					[{
						divisor: 1.0e+12,
						symbol: 'T'
					},
					{
						divisor: 1.0e+9,
						symbol: 'B'
					},
					{
						divisor: 1.0e+6,
						symbol: 'M'
					},
					{
						divisor: 1.0e+3,
						symbol: 'K',
					}]
			};

			if (!Object.keys(number_system_map).includes(country)) { country = ''; }

			return number_system_map[country];
		},

		map_defaults: {
			center: [19.0800, 72.8961],
			zoom: 13,
			tiles: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
			options: {
				attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
			}
		},

		icon: function icon(icon_name, size, icon_class) {
			if ( size === void 0 ) size="sm";
			if ( icon_class === void 0 ) icon_class="";

			var size_class = "";
			var icon_style = "";
			if (typeof size == "object") {
				icon_style = "width: " + (size.width) + "; height: " + (size.height);
			} else {
				size_class = "icon-" + size;
			}
			return ("<svg class=\"icon " + size_class + "\" style=\"" + icon_style + "\">\n\t\t\t<use class=\"" + icon_class + "\" href=\"#icon-" + icon_name + "\"></use>\n\t\t</svg>");
		},

		make_chart: function make_chart(wrapper, custom_options) {
			if ( custom_options === void 0 ) custom_options={};

			var chart_args = {
				type: 'bar',
				colors: ['light-blue'],
				axisOptions: {
					xIsSeries: 1,
					shortenYAxisNumbers: 1,
					xAxisMode: 'tick'
				}
			};

			for (var key in custom_options) {
				if (typeof chart_args[key] === 'object' && typeof custom_options[key] === 'object') {
					chart_args[key] = Object.assign(chart_args[key], custom_options[key]);
				} else {
					chart_args[key] = custom_options[key];
				}
			}

			return new frappe.Chart(wrapper, chart_args);
		},

		generate_route: function generate_route(item) {
			var type = item.type.toLowerCase();
			if (type === "doctype") {
				item.doctype = item.name;
			}
			var route = "";
			if (!item.route) {
				if (item.link) {
					route = strip(item.link, "#");
				} else if (type === "doctype") {
					var doctype_slug = frappe.router.slug(item.doctype);

					if (frappe.model.is_single(item.doctype)) {
						route = doctype_slug;
					} else {
						if (!item.doc_view) {
							if (frappe.model.is_tree(item.doctype)) {
								item.doc_view = "Tree";
							} else {
								item.doc_view = "List";
							}
						}

						switch (item.doc_view) {
							case "List":
								if (item.filters) {
									frappe.route_options = item.filters;
								}
								route = doctype_slug;
								break;
							case "Tree":
								route = doctype_slug + "/view/tree";
								break;
							case "Report Builder":
								route = doctype_slug + "/view/report";
								break;
							case "Dashboard":
								route = doctype_slug + "/view/dashboard";
								break;
							case "New":
								route = doctype_slug + "/new";
								break;
							case "Calendar":
								route = doctype_slug + "/view/calendar/default";
								break;
							default:
								frappe.throw({ message: __("Not a valid view:") + item.doc_view, title: __("Unknown View") });
								route = "";
						}
					}
				} else if (type === "report") {
					if (item.is_query_report) {
						route = "query-report/" + item.name;
					} else if (!item.doctype) {
						route = "/report/" + item.name;
					} else {
						route = frappe.router.slug(item.doctype) + "/view/report/" + item.name;
					}
				} else if (type === "page") {
					route = item.name;
				} else if (type === "dashboard") {
					route = "dashboard-view/" + (item.name);
				}

			} else {
				route = item.route;
			}

			if (item.route_options) {
				route +=
					"?" +
					$.map(item.route_options, function (value, key) {
						return (
							encodeURIComponent(key) + "=" + encodeURIComponent(value)
						);
					}).join("&");
			}

			// if(type==="page" || type==="help" || type==="report" ||
			// (item.doctype && frappe.model.can_read(item.doctype))) {
			//     item.shown = true;
			// }
			return ("/app/" + route);
		},

		shorten_number: function (number, country, min_length, max_no_of_decimals) {
			if ( min_length === void 0 ) min_length=4;
			if ( max_no_of_decimals === void 0 ) max_no_of_decimals=2;

			/* returns the number as an abbreviated string
			 * PARAMS
			 *  number - number to be shortened
			 *  country - country that determines the numnber system to be used
			 *  min_length - length below which the number will not be shortened
			 *	max_no_of_decimals - max number of decimals of the shortened number
			*/

			// return number if total digits is lesser than min_length
			var len = String(number).match(/\d/g).length;
			if (len < min_length) { return number.toString(); }

			var number_system = this.get_number_system(country);
			var x = Math.abs(Math.round(number));
			for (var i = 0, list = number_system; i < list.length; i += 1) {
				var map = list[i];

				if (x >= map.divisor) {
					var result = number/map.divisor;
					var no_of_decimals = this.get_number_of_decimals(result);
					/*
						If no_of_decimals is greater than max_no_of_decimals,
						round the number to max_no_of_decimals
					*/
					result = no_of_decimals > max_no_of_decimals
						? result.toFixed(max_no_of_decimals)
						: result;
					return result + ' ' + map.symbol;
				}
			}

			return number.toFixed(max_no_of_decimals);
		},

		get_number_of_decimals: function (number) {
			if (Math.floor(number) === number) { return 0; }
			return number.toString().split(".")[1].length || 0;
		},

		build_summary_item: function build_summary_item(summary) {
			if (summary.type == "separator") {
				return $(("<div class=\"summary-separator\">\n\t\t\t\t<div class=\"summary-value " + (summary.color ? summary.color.toLowerCase() : 'text-muted') + "\">" + (summary.value) + "</div>\n\t\t\t</div>"));
			}
			var df = { fieldtype: summary.datatype };
			var doc = null;
			if (summary.datatype == "Currency") {
				df.options = "currency";
				doc = { currency: summary.currency };
			}

			var value = frappe.format(summary.value, df, { only_value: true }, doc);
			var color = summary.indicator ? summary.indicator.toLowerCase()
				: summary.color ? summary.color.toLowerCase() : '';

			return $(("<div class=\"summary-item\">\n\t\t\t<span class=\"summary-label\">" + (summary.label) + "</span>\n\t\t\t<div class=\"summary-value " + color + "\">" + value + "</div>\n\t\t</div>"));
		},

		print: function print(doctype, docname, print_format, letterhead, lang_code) {
			var w = window.open(
				frappe.urllib.get_full_url(
					'/printview?doctype=' +
					encodeURIComponent(doctype) +
					'&name=' +
					encodeURIComponent(docname) +
					'&trigger_print=1' +
					'&format=' +
					encodeURIComponent(print_format) +
					'&no_letterhead=' +
					(letterhead ? '0' : '1') +
					'&letterhead=' +
					encodeURIComponent(letterhead) +
					(lang_code ? '&_lang=' + lang_code : '')
				)
			);

			if (!w) {
				frappe.msgprint(__('Please enable pop-ups'));
				return;
			}
		},

		get_clipboard_data: function get_clipboard_data(clipboard_paste_event) {
			var e = clipboard_paste_event;
			var clipboard_data = e.clipboardData || window.clipboardData || e.originalEvent.clipboardData;
			return clipboard_data.getData('Text');
		}
	});

	// common file between desk and website

	frappe.avatar = function (user, css_class, title, image_url, remove_color, filterable) {
		if ( image_url === void 0 ) image_url=null;
		if ( remove_color === void 0 ) remove_color=false;
		if ( filterable === void 0 ) filterable=false;

		var user_info;
		if (user) {
			// desk
			user_info = frappe.user_info(user);
		} else {
			// website
			var full_name = title || frappe.get_cookie("full_name");
			user_info = {
				image: image_url === null ? frappe.get_cookie("user_image") : image_url,
				fullname: full_name,
				abbr: frappe.get_abbr(full_name),
				color: frappe.get_palette(full_name)
			};
		}

		if (!title) {
			title = user_info.fullname;
		}

		var data_attr = '';
		if (filterable) {
			css_class += " filterable";
			data_attr = "data-filter=\"_assign,like,%" + user + "%\"";
		}

		return frappe.get_avatar(
			css_class, title, image_url || user_info.image, remove_color, data_attr
		);
	};

	frappe.get_avatar = function(css_class, title, image_url, remove_color, data_attributes) {
		if ( image_url === void 0 ) image_url=null;

		if (!css_class) {
			css_class = "avatar-small";
		}

		if (image_url) {
			var image = (window.cordova && image_url.indexOf('http') === -1) ? frappe.base_url + image_url : image_url;
			return ("<span class=\"avatar " + css_class + "\" title=\"" + title + "\" " + data_attributes + ">\n\t\t\t\t<span class=\"avatar-frame\" style='background-image: url(\"" + image + "\")'\n\t\t\t\t\ttitle=\"" + title + "\"></span>\n\t\t\t</span>");
		} else {
			var abbr =  frappe.get_abbr(title);
			var style = '';
			if (!remove_color) {
				var color = frappe.get_palette(title);
				style = "background-color: var(" + (color[0]) + "); color: var(" + (color[1]) + ")";
			}

			if (css_class === 'avatar-small' || css_class == 'avatar-xs') {
				abbr = abbr.substr(0, 1);
			}

			return ("<span class=\"avatar " + css_class + "\" title=\"" + title + "\" " + data_attributes + ">\n\t\t\t<div class=\"avatar-frame standard-image\"\n\t\t\t\tstyle=\"" + style + "\">\n\t\t\t\t\t" + abbr + "\n\t\t\t</div>\n\t\t</span>");
		}
	};

	frappe.avatar_group = function (users, limit, options) {
		if ( limit === void 0 ) limit=4;
		if ( options === void 0 ) options = {};

		var avatar_action_html = '';
		var display_users = users.slice(0, limit);
		var extra_users = users.slice(limit);
		var css_class = options.css_class || '';

		var html = display_users.map(function (user) { return frappe.avatar(user, 'avatar-small ' + css_class, null, null, false, options.filterable); }
		).join('');
		if (extra_users.length === 1) {
			html += frappe.avatar(extra_users[0], 'avatar-small ' + css_class, null, null, false, options.filterable);
		} else if (extra_users.length > 1) {
			html = "\n\t\t\t" + html + "\n\t\t\t<span class=\"avatar avatar-small " + css_class + "\">\n\t\t\t\t<div class=\"avatar-frame standard-image avatar-extra-count\"\n\t\t\t\t\ttitle=\"" + (extra_users.map(function (u) { return frappe.user_info(u).fullname; }).join(', ')) + "\">\n\t\t\t\t\t+" + (extra_users.length) + "\n\t\t\t\t</div>\n\t\t\t</span>\n\t\t";
		}

		if (options.action_icon) {
			avatar_action_html = "\n\t\t\t<span class=\"avatar avatar-small\">\n\t\t\t\t<div class=\"avatar-frame avatar-action\">\n\t\t\t\t\t" + (frappe.utils.icon(options.action_icon, 'sm')) + "\n\t\t\t\t</div>\n\t\t\t</span>\n\t\t";
		}

		var $avatar_group =
			$(("<div class=\"avatar-group " + (options.align || 'right') + " " + (options.overlap != false ? 'overlap' : '') + "\">\n\t\t\t" + html + "\n\t\t\t" + avatar_action_html + "\n\t\t</div>"));

		$avatar_group.find('.avatar-action').on('click', options.action);
		return $avatar_group;
	};

	frappe.ui.scroll = function (element, animate, additional_offset) {
		var header_offset = $(".navbar").height() + $(".page-head").height();
		var top = $(element).offset().top - header_offset - cint(additional_offset);
		if (animate) {
			$("html, body").animate({ scrollTop: top });
		} else {
			$(window).scrollTop(top);
		}
	};

	frappe.palette = [
		['--orange-avatar-bg', '--orange-avatar-color'],
		['--pink-avatar-bg', '--pink-avatar-color'],
		['--blue-avatar-bg', '--blue-avatar-color'],
		['--green-avatar-bg', '--green-avatar-color'],
		['--dark-green-avatar-bg', '--dark-green-avatar-color'],
		['--red-avatar-bg', '--red-avatar-color'],
		['--yellow-avatar-bg', '--yellow-avatar-color'],
		['--purple-avatar-bg', '--purple-avatar-color'],
		['--gray-avatar-bg', '--gray-avatar-color0']
	];

	frappe.get_palette = function (txt) {
		var idx = cint((parseInt(md5(txt).substr(4, 2), 16) + 1) / 5.33);
		return frappe.palette[idx % 8];
	};

	frappe.get_abbr = function (txt, max_length) {
		if (!txt) { return ""; }
		var abbr = "";
		$.each(txt.split(" "), function (i, w) {
			if (abbr.length >= (max_length || 2)) {
				// break
				return false;

			} else if (!w.trim().length) {
				// continue
				return true;
			}
			abbr += w.trim()[0];
		});

		return abbr || "?";
	};

	frappe.gravatars = {};
	frappe.get_gravatar = function (email_id, size) {
		if ( size === void 0 ) size = 0;

		var param = size ? ('s=' + size) : 'd=retro';
		if (!frappe.gravatars[email_id]) {
			// TODO: check if gravatar exists
			frappe.gravatars[email_id] = "https://secure.gravatar.com/avatar/" + md5(email_id) + "?" + param;
		}
		return frappe.gravatars[email_id];
	};

	// string commons

	window.repl = function repl(s, dict) {
		if (s == null) { return ''; }
		for (var key in dict) {
			s = s.split("%(" + key + ")s").join(dict[key]);
		}
		return s;
	};

	window.replace_all = function (s, t1, t2) {
		return s.split(t1).join(t2);
	};

	window.strip_html = function(txt) {
		return cstr(txt).replace(/<[^>]*>/g, "");
	};

	window.strip = function (s, chars) {
		if (s) {
			s = lstrip(s, chars);
			s = rstrip(s, chars);
			return s;
		}
	};

	window.lstrip = function lstrip(s, chars) {
		if (!chars) { chars = ['\n', '\t', ' ']; }
		// strip left
		var first_char = s.substr(0, 1);
		while (in_list(chars, first_char)) {
			s = s.substr(1);
			first_char = s.substr(0, 1);
		}
		return s;
	};

	window.rstrip = function (s, chars) {
		if (!chars) { chars = ['\n', '\t', ' ']; }
		var last_char = s.substr(s.length - 1);
		while (in_list(chars, last_char)) {
			s = s.substr(0, s.length - 1);
			last_char = s.substr(s.length - 1);
		}
		return s;
	};

	frappe.get_cookie = function getCookie(name) {
		return frappe.get_cookies()[name];
	};

	frappe.get_cookies = function getCookies() {
		var c = document.cookie, v = 0, cookies = {};
		if (document.cookie.match(/^\s*\$Version=(?:"1"|1);\s*(.*)/)) {
			c = RegExp.$1;
			v = 1;
		}
		if (v === 0) {
			c.split(/[,;]/).map(function (cookie) {
				var parts = cookie.split(/=/, 2),
					name = decodeURIComponent(parts[0].trimLeft()),
					value = parts.length > 1 ? decodeURIComponent(parts[1].trimRight()) : null;
				if (value && value.charAt(0) === '"') {
					value = value.substr(1, value.length - 2);
				}
				cookies[name] = value;
			});
		} else {
			c.match(/(?:^|\s+)([!#$%&'*+\-.0-9A-Z^`a-z|~]+)=([!#$%&'*+\-.0-9A-Z^`a-z|~]*|"(?:[\x20-\x7E\x80\xFF]|\\[\x00-\x7F])*")(?=\s*[,;]|$)/g).map(function ($0, $1) {
				var name = $0,
					value = $1.charAt(0) === '"'
						? $1.substr(1, -1).replace(/\\(.)/g, "$1")
						: $1;
				cookies[name] = value;
			});
		}
		return cookies;
	};

	frappe.is_mobile = function () {
		return $(document).width() < 768;
	};

	frappe.utils.xss_sanitise = function (string, options) {
		// Reference - https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
		var sanitised = string; // un-sanitised string.
		var DEFAULT_OPTIONS = {
			strategies: ['html', 'js'] // use all strategies.
		};
		var HTML_ESCAPE_MAP = {
			'<': '&lt;',
			'>': '&gt;',
			'"': '&quot;',
			"'": '&#x27;',
			'/': '&#x2F;'
		};
		var REGEX_SCRIPT = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi; // used in jQuery 1.7.2 src/ajax.js Line 14
		options = Object.assign({}, DEFAULT_OPTIONS, options); // don't deep copy, immutable beauty.

		// Rule 1
		if (options.strategies.includes('html')) {
			for (var char in HTML_ESCAPE_MAP) {
				var escape = HTML_ESCAPE_MAP[char];
				var regex = new RegExp(char, "g");
				sanitised = sanitised.replace(regex, escape);
			}
		}

		// Rule 3 - TODO: Check event handlers?
		if (options.strategies.includes('js')) {
			sanitised = sanitised.replace(REGEX_SCRIPT, "");
		}

		return sanitised;
	};

	frappe.utils.sanitise_redirect = function (url) {
		var is_external = (function () {
			return function (url) {
				function domain(url) {
					var base_domain = /^(?:https?:\/\/)?(?:[^@\n]+@)?(?:www\.)?([^:/\n?]+)/img.exec(url);
					return base_domain == null ? "" : base_domain[1];
				}

				function is_absolute(url) {
					// returns true for url that have a defined scheme
					// anything else, eg. internal urls return false
					return /^(?:[a-z]+:)?\/\//i.test(url);
				}

				// check for base domain only if the url is absolute
				// return true for relative url (except protocol-relative urls)
				return is_absolute(url) ? domain(location.href) !== domain(url) : false;
			}
		})();

		var sanitise_javascript = (function (url) {
			// please do not ask how or why
			var REGEX_SCRIPT = /j[\s]*(&#x.{1,7})?a[\s]*(&#x.{1,7})?v[\s]*(&#x.{1,7})?a[\s]*(&#x.{1,7})?s[\s]*(&#x.{1,7})?c[\s]*(&#x.{1,7})?r[\s]*(&#x.{1,7})?i[\s]*(&#x.{1,7})?p[\s]*(&#x.{1,7})?t/gi;

			return url.replace(REGEX_SCRIPT, "");
		});

		url = frappe.utils.strip_url(url);

		return is_external(url) ? "" : sanitise_javascript(frappe.utils.xss_sanitise(url, { strategies: ["js"] }));
	};

	frappe.utils.strip_url = function (url) {
		// strips invalid characters from the beginning of the URL
		// in our case, the url can start with either a protocol, //, or even #
		// so anything except those characters can be considered invalid
		return url.replace(/^[^A-Za-z0-9(//)#]+/g, '');
	};

	frappe.utils.new_auto_repeat_prompt = function (frm) {
		var fields = [
			{
				'fieldname': 'frequency',
				'fieldtype': 'Select',
				'label': __('Frequency'),
				'reqd': 1,
				'options': [
					{ 'label': __('Daily'), 'value': 'Daily' },
					{ 'label': __('Weekly'), 'value': 'Weekly' },
					{ 'label': __('Monthly'), 'value': 'Monthly' },
					{ 'label': __('Quarterly'), 'value': 'Quarterly' },
					{ 'label': __('Half-yearly'), 'value': 'Half-yearly' },
					{ 'label': __('Yearly'), 'value': 'Yearly' }
				]
			},
			{
				'fieldname': 'start_date',
				'fieldtype': 'Date',
				'label': __('Start Date'),
				'reqd': 1,
				'default': frappe.datetime.nowdate()
			},
			{
				'fieldname': 'end_date',
				'fieldtype': 'Date',
				'label': __('End Date')
			}
		];
		frappe.prompt(fields, function (values) {
			frappe.call({
				method: "frappe.automation.doctype.auto_repeat.auto_repeat.make_auto_repeat",
				args: {
					'doctype': frm.doc.doctype,
					'docname': frm.doc.name,
					'frequency': values['frequency'],
					'start_date': values['start_date'],
					'end_date': values['end_date']
				},
				callback: function (r) {
					if (r.message) {
						frappe.show_alert({
							'message': __("Auto Repeat created for this document"),
							'indicator': 'green'
						});
						frm.reload_doc();
					}
				}
			});
		},
		__('Auto Repeat'),
		__('Save')
		);
	};

	frappe.utils.get_page_view_count = function (route) {
		return frappe.call("frappe.website.doctype.web_page_view.web_page_view.get_page_view_count", {
			path: route
		});
	};

	frappe.ui.form.Layout = Class.extend({
		init: function (opts) {
			this.views = {};
			this.pages = [];
			this.sections = [];
			this.fields_list = [];
			this.fields_dict = {};

			$.extend(this, opts);
		},
		make: function() {
			if (!this.parent && this.body) {
				this.parent = this.body;
			}
			this.wrapper = $('<div class="form-layout">').appendTo(this.parent);
			this.message = $('<div class="form-message hidden"></div>').appendTo(this.wrapper);
			if (!this.fields) {
				this.fields = this.get_doctype_fields();
			}
			this.setup_tabbing();
			this.render();
		},
		show_empty_form_message: function() {
			if (!(this.wrapper.find(".frappe-control:visible").length || this.wrapper.find(".section-head.collapsed").length)) {
				this.show_message(__("This form does not have any input"));
			}
		},

		get_doctype_fields: function() {
			var fields = [
				this.get_new_name_field()
			];
			if (this.doctype_layout) {
				fields = fields.concat(this.get_fields_from_layout());
			} else {
				fields = fields.concat(frappe.meta.sort_docfields(frappe.meta.docfield_map[this.doctype]));
			}

			return fields;
		},

		get_new_name_field: function get_new_name_field() {
			return {
				parent: this.frm.doctype,
				fieldtype: 'Data',
				fieldname: '__newname',
				reqd: 1,
				hidden: 1,
				label: __('Name'),
				get_status: function(field) {
					if (field.frm && field.frm.is_new()
						&& field.frm.meta.autoname
						&& ['prompt', 'name'].includes(field.frm.meta.autoname.toLowerCase())) {
						return 'Write';
					}
					return 'None';
				}
			};
		},

		get_fields_from_layout: function get_fields_from_layout() {
			var fields = [];
			for (var i = 0, list = this.doctype_layout.fields; i < list.length; i += 1) {
				var f = list[i];

				var docfield = copy_dict(frappe.meta.docfield_map[this.doctype][f.fieldname]);
				docfield.label = f.label;
				fields.push(docfield);
			}
			return fields;
		},

		show_message: function(html, color) {
			if (this.message_color) {
				// remove previous color
				this.message.removeClass(this.message_color);
			}
			this.message_color = (color && ['yellow', 'blue'].includes(color)) ? color : 'blue';
			if (html) {
				if (html.substr(0, 1)!=='<') {
					// wrap in a block
					html = '<div>' + html + '</div>';
				}
				this.message.removeClass('hidden').addClass(this.message_color);
				$(html).appendTo(this.message);
			} else {
				this.message.empty().addClass('hidden');
			}
		},
		render: function (new_fields) {
			var me = this;
			var fields = new_fields || this.fields;

			this.section = null;
			this.column = null;

			if (this.with_dashboard) {
				this.setup_dashboard_section();
			}

			if (this.no_opening_section()) {
				this.make_section();
			}
			$.each(fields, function (i, df) {
				switch (df.fieldtype) {
					case "Fold":
						me.make_page(df);
						break;
					case "Section Break":
						me.make_section(df);
						break;
					case "Column Break":
						me.make_column(df);
						break;
					default:
						me.make_field(df);
				}
			});

		},

		no_opening_section: function () {
			return (this.fields[0] && this.fields[0].fieldtype != "Section Break") || !this.fields.length;
		},

		setup_dashboard_section: function () {
			if (this.no_opening_section()) {
				this.fields.unshift({fieldtype: 'Section Break'});
			}
		},

		replace_field: function (fieldname, df, render) {
			df.fieldname = fieldname; // change of fieldname is avoided
			if (this.fields_dict[fieldname] && this.fields_dict[fieldname].df) {
				var fieldobj = this.init_field(df, render);
				this.fields_dict[fieldname].$wrapper.remove();
				this.fields_list.splice(this.fields_dict[fieldname], 1, fieldobj);
				this.fields_dict[fieldname] = fieldobj;
				if (this.frm) {
					fieldobj.perm = this.frm.perm;
				}
				this.section.fields_list.splice(this.section.fields_dict[fieldname], 1, fieldobj);
				this.section.fields_dict[fieldname] = fieldobj;
				this.refresh_fields([df]);
			}
		},

		make_field: function (df, colspan, render) {
			!this.section && this.make_section();
			!this.column && this.make_column();

			var fieldobj = this.init_field(df, render);
			this.fields_list.push(fieldobj);
			this.fields_dict[df.fieldname] = fieldobj;
			if (this.frm) {
				fieldobj.perm = this.frm.perm;
			}

			this.section.fields_list.push(fieldobj);
			this.section.fields_dict[df.fieldname] = fieldobj;
			fieldobj.section = this.section;
		},

		init_field: function (df, render) {
			if ( render === void 0 ) render = false;

			var fieldobj = frappe.ui.form.make_control({
				df: df,
				doctype: this.doctype,
				parent: this.column.wrapper.get(0),
				frm: this.frm,
				render_input: render,
				doc: this.doc,
				layout: this
			});

			fieldobj.layout = this;
			return fieldobj;
		},

		make_page: function (df) { // eslint-disable-line no-unused-vars
			var me = this,
				head = $('<div class="form-clickable-section text-center">\
				<a class="btn-fold h6 text-muted">' + __("Show more details") + '</a>\
			</div>').appendTo(this.wrapper);

			this.page = $('<div class="form-page second-page hide"></div>').appendTo(this.wrapper);

			this.fold_btn = head.find(".btn-fold").on("click", function () {
				var page = $(this).parent().next();
				if (page.hasClass("hide")) {
					$(this).removeClass("btn-fold").html(__("Hide details"));
					page.removeClass("hide");
					frappe.utils.scroll_to($(this), true, 30);
					me.folded = false;
				} else {
					$(this).addClass("btn-fold").html(__("Show more details"));
					page.addClass("hide");
					me.folded = true;
				}
			});

			this.section = null;
			this.folded = true;
		},

		unfold: function () {
			this.fold_btn.trigger('click');
		},

		make_section: function (df) {
			this.section = new frappe.ui.form.Section(this, df);

			// append to layout fields
			if (df) {
				this.fields_dict[df.fieldname] = this.section;
				this.fields_list.push(this.section);
			}

			this.column = null;
		},

		make_column: function (df) {
			this.column = new frappe.ui.form.Column(this.section, df);
			if (df && df.fieldname) {
				this.fields_list.push(this.column);
			}
		},

		refresh: function (doc) {
			var me = this;
			if (doc) { this.doc = doc; }

			if (this.frm) {
				this.wrapper.find(".empty-form-alert").remove();
			}

			// NOTE this might seem redundant at first, but it needs to be executed when frm.refresh_fields is called
			me.attach_doc_and_docfields(true);

			if (this.frm && this.frm.wrapper) {
				$(this.frm.wrapper).trigger("refresh-fields");
			}

			// dependent fields
			this.refresh_dependency();

			// refresh sections
			this.refresh_sections();

			if (this.frm) {
				// collapse sections
				this.refresh_section_collapse();
			}

			if (document.activeElement) {
				if (document.activeElement.tagName == 'INPUT' && this.is_numeric_field_active()) {
					document.activeElement.select();
				}
			}
		},
		
		is_numeric_field_active: function is_numeric_field_active() {
			var control = $(document.activeElement).closest(".frappe-control");
			var fieldtype = (control.data() || {}).fieldtype;
			return frappe.model.numeric_fieldtypes.includes(fieldtype);
		},

		refresh_sections: function() {
			// hide invisible sections
			this.wrapper.find(".form-section:not(.hide-control)").each(function() {
				var section = $(this).removeClass("empty-section visible-section");
				if (section.find(".frappe-control:not(.hide-control)").length) {
					section.addClass("visible-section");
				} else {
					// nothing visible, hide the section
					section.addClass("empty-section");
				}
			});
		},

		refresh_fields: function (fields) {
			var fieldnames = fields.map(function (field) {
				if (field.fieldname) { return field.fieldname; }
			});

			this.fields_list.map(function (fieldobj) {
				if (fieldnames.includes(fieldobj.df.fieldname)) {
					fieldobj.refresh();
					if (fieldobj.df["default"]) {
						fieldobj.set_input(fieldobj.df["default"]);
					}
				}
			});
		},

		add_fields: function (fields) {
			this.render(fields);
			this.refresh_fields(fields);
		},

		refresh_section_collapse: function () {
			if (!(this.sections && this.sections.length)) { return; }

			for (var i = 0; i < this.sections.length; i++) {
				var section = this.sections[i];
				var df = section.df;
				if (df && df.collapsible) {
					var collapse = true;

					if (df.collapsible_depends_on) {
						collapse = !this.evaluate_depends_on_value(df.collapsible_depends_on);
					}

					if (collapse && section.has_missing_mandatory()) {
						collapse = false;
					}

					section.collapse(collapse);
				}
			}
		},

		attach_doc_and_docfields: function (refresh) {
			var me = this;
			for (var i = 0, l = this.fields_list.length; i < l; i++) {
				var fieldobj = this.fields_list[i];
				if (me.doc) {
					fieldobj.doc = me.doc;
					fieldobj.doctype = me.doc.doctype;
					fieldobj.docname = me.doc.name;
					fieldobj.df = frappe.meta.get_docfield(me.doc.doctype,
						fieldobj.df.fieldname, me.doc.name) || fieldobj.df;

					// on form change, permissions can change
					if (me.frm) {
						fieldobj.perm = me.frm.perm;
					}
				}
				refresh && fieldobj.df && fieldobj.refresh && fieldobj.refresh();
			}
		},

		refresh_section_count: function () {
			this.wrapper.find(".section-count-label:visible").each(function (i) {
				$(this).html(i + 1);
			});
		},
		setup_tabbing: function () {
			var me = this;
			this.wrapper.on("keydown", function (ev) {
				if (ev.which == 9) {
					var current = $(ev.target),
						doctype = current.attr("data-doctype"),
						fieldname = current.attr("data-fieldname");
					if (doctype)
						{ return me.handle_tab(doctype, fieldname, ev.shiftKey); }
				}
			});
		},
		handle_tab: function (doctype, fieldname, shift) {
			var me = this,
				grid_row = null,
				prev = null,
				fields = me.fields_list,
				focused = false;

			// in grid
			if (doctype != me.doctype) {
				grid_row = me.get_open_grid_row();
				if (!grid_row || !grid_row.layout) {
					return;
				}
				fields = grid_row.layout.fields_list;
			}

			for (var i = 0, len = fields.length; i < len; i++) {
				if (fields[i].df.fieldname == fieldname) {
					if (shift) {
						if (prev) {
							this.set_focus(prev);
						} else {
							$(this.primary_button).focus();
						}
						break;
					}
					if (i < len - 1) {
						focused = me.focus_on_next_field(i, fields);
					}

					if (focused) {
						break;
					}
				}
				if (this.is_visible(fields[i]))
					{ prev = fields[i]; }
			}

			if (!focused) {
				// last field in this group
				if (grid_row) {
					// in grid
					if (grid_row.doc.idx == grid_row.grid.grid_rows.length) {
						// last row, close it and find next field
						grid_row.toggle_view(false, function () {
							grid_row.grid.frm.layout.handle_tab(grid_row.grid.df.parent, grid_row.grid.df.fieldname);
						});
					} else {
						// next row
						grid_row.grid.grid_rows[grid_row.doc.idx].toggle_view(true);
					}
				} else if (!shift) {
					// End of tab navigation
					$(this.primary_button).focus();
				}
			}

			return false;
		},
		focus_on_next_field: function (start_idx, fields) {
			// loop to find next eligible fields
			for (var i = start_idx + 1, len = fields.length; i < len; i++) {
				var field = fields[i];
				if (this.is_visible(field)) {
					if (field.df.fieldtype === "Table") {
						// open table grid
						if (!(field.grid.grid_rows && field.grid.grid_rows.length)) {
							// empty grid, add a new row
							field.grid.add_new_row();
						}
						// show grid row (if exists)
						field.grid.grid_rows[0].show_form();
						return true;

					} else if (!in_list(frappe.model.no_value_type, field.df.fieldtype)) {
						this.set_focus(field);
						return true;
					}
				}
			}
		},
		is_visible: function (field) {
			return field.disp_status === "Write" && (field.$wrapper && field.$wrapper.is(":visible"));
		},
		set_focus: function (field) {
			// next is table, show the table
			if (field.df.fieldtype=="Table") {
				if (!field.grid.grid_rows.length) {
					field.grid.add_new_row(1);
				} else {
					field.grid.grid_rows[0].toggle_view(true);
				}
			} else if (field.editor) {
				field.editor.set_focus();
			} else if (field.$input) {
				field.$input.focus();
			}
		},
		get_open_grid_row: function () {
			return $(".grid-row-open").data("grid_row");
		},
		refresh_dependency: function () {
			// Resolve "depends_on" and show / hide accordingly
			var me = this;

			// build dependants' dictionary
			var has_dep = false;

			for (var fkey in this.fields_list) {
				var f = this.fields_list[fkey];
				f.dependencies_clear = true;
				if (f.df.depends_on || f.df.mandatory_depends_on || f.df.read_only_depends_on) {
					has_dep = true;
				}
			}

			if (!has_dep) { return; }

			// show / hide based on values
			for (var i = me.fields_list.length - 1; i >= 0; i--) {
				var f = me.fields_list[i];
				f.guardian_has_value = true;
				if (f.df.depends_on) {
					// evaluate guardian

					f.guardian_has_value = this.evaluate_depends_on_value(f.df.depends_on);

					// show / hide
					if (f.guardian_has_value) {
						if (f.df.hidden_due_to_dependency) {
							f.df.hidden_due_to_dependency = false;
							f.refresh();
						}
					} else {
						if (!f.df.hidden_due_to_dependency) {
							f.df.hidden_due_to_dependency = true;
							f.refresh();
						}
					}
				}

				if (f.df.mandatory_depends_on) {
					this.set_dependant_property(f.df.mandatory_depends_on, f.df.fieldname, 'reqd');
				}

				if (f.df.read_only_depends_on) {
					this.set_dependant_property(f.df.read_only_depends_on, f.df.fieldname, 'read_only');
				}
			}

			this.refresh_section_count();
		},
		set_dependant_property: function (condition, fieldname, property) {
			var set_property = this.evaluate_depends_on_value(condition);
			var value = set_property ? 1 : 0;
			var form_obj;

			if (this.frm) {
				form_obj = this.frm;
			} else if (this.is_dialog || this.doctype === 'Web Form') {
				form_obj = this;
			}
			if (form_obj) {
				if (this.doc && this.doc.parent && this.doc.parentfield) {
					form_obj.setting_dependency = true;
					form_obj.set_df_property(this.doc.parentfield, property, value, this.doc.parent, fieldname, this.doc.name);
					form_obj.setting_dependency = false;
					// refresh child fields
					this.fields_dict[fieldname] && this.fields_dict[fieldname].refresh();
				} else {
					form_obj.set_df_property(fieldname, property, value);
				}
			}
		},
		evaluate_depends_on_value: function (expression) {
			var out = null;
			var doc = this.doc;

			if (!doc && this.get_values) {
				var doc = this.get_values(true);
			}

			if (!doc) {
				return;
			}

			var parent = this.frm ? this.frm.doc : this.doc || null;

			if (typeof (expression) === 'boolean') {
				out = expression;

			} else if (typeof (expression) === 'function') {
				out = expression(doc);

			} else if (expression.substr(0, 5)=='eval:') {
				try {
					out = frappe.utils.eval(expression.substr(5), { doc: doc, parent: parent });
					if (parent && parent.istable && expression.includes('is_submittable')) {
						out = true;
					}
				} catch (e) {
					frappe.throw(__('Invalid "depends_on" expression'));
				}

			} else if (expression.substr(0, 3)=='fn:' && this.frm) {
				out = this.frm.script_manager.trigger(expression.substr(3), this.doctype, this.docname);
			} else {
				var value = doc[expression];
				if ($.isArray(value)) {
					out = !!value.length;
				} else {
					out = !!value;
				}
			}

			return out;
		}
	});

	frappe.ui.form.Section = Class.extend({
		init: function(layout, df) {
			this.layout = layout;
			this.df = df || {};
			this.fields_list = [];
			this.fields_dict = {};

			this.make();
			// if (this.frm)
			// 	this.section.body.css({"padding":"0px 3%"})
			this.row = {
				wrapper: this.wrapper
			};

			this.refresh();
		},
		make: function() {
			if (!this.layout.page) {
				this.layout.page = $('<div class="form-page"></div>').appendTo(this.layout.wrapper);
			}
			var make_card = this.layout.card_layout;
			this.wrapper = $(("<div class=\"row form-section " + (make_card ? "card-section" : "") + "\">"))
				.appendTo(this.layout.page);
			this.layout.sections.push(this);

			if (this.df) {
				if (this.df.label) {
					this.make_head();
				}
				if (this.df.description) {
					$('<div class="col-sm-12 small text-muted form-section-description">' + __(this.df.description) + '</div>')
						.appendTo(this.wrapper);
				}
				if (this.df.cssClass) {
					this.wrapper.addClass(this.df.cssClass);
				}
				if (this.df.hide_border) {
					this.wrapper.toggleClass("hide-border", true);
				}
			}

			// for bc
			this.body = $('<div class="section-body">').appendTo(this.wrapper);
		},

		make_head: function () {
			var this$1 = this;

			this.head = $(("<div class=\"section-head\">\n\t\t\t" + (__(this.df.label)) + "\n\t\t\t<span class=\"ml-2 collapse-indicator mb-1\">\n\t\t\t</span>\n\t\t</div>"));
			this.head.appendTo(this.wrapper);
			this.indicator = this.head.find('.collapse-indicator');
			this.indicator.hide();
			if (this.df.collapsible) {
				// show / hide based on status
				this.collapse_link = this.head.on("click", function () {
					this$1.collapse();
				});

				this.indicator.show();
			}
		},
		refresh: function() {
			if (!this.df)
				{ return; }

			// hide if explictly hidden
			var hide = this.df.hidden || this.df.hidden_due_to_dependency;

			// hide if no perm
			if (!hide && this.layout && this.layout.frm && !this.layout.frm.get_perm(this.df.permlevel || 0, "read")) {
				hide = true;
			}

			this.wrapper.toggleClass("hide-control", !!hide);
		},
		collapse: function (hide) {
			// unknown edge case
			if (!(this.head && this.body)) {
				return;
			}

			if (hide===undefined) {
				hide = !this.body.hasClass("hide");
			}

			this.body.toggleClass("hide", hide);
			this.head.toggleClass("collapsed", hide);

			var indicator_icon = hide ? 'down' : 'up-line';

			this.indicator & this.indicator.html(frappe.utils.icon(indicator_icon, 'sm', 'mb-1'));

			// refresh signature fields
			this.fields_list.forEach(function (f) {
				if (f.df.fieldtype == 'Signature') {
					f.refresh();
				}
			});
		},

		is_collapsed: function is_collapsed() {
			return this.body.hasClass('hide');
		},

		has_missing_mandatory: function () {
			var missing_mandatory = false;
			for (var j = 0, l = this.fields_list.length; j < l; j++) {
				var section_df = this.fields_list[j].df;
				if (section_df.reqd && this.layout.doc[section_df.fieldname] == null) {
					missing_mandatory = true;
					break;
				}
			}
			return missing_mandatory;
		}
	});

	frappe.ui.form.Column = Class.extend({
		init: function(section, df) {
			if (!df) { df = {}; }

			this.df = df;
			this.section = section;
			this.make();
			this.resize_all_columns();
		},
		make: function () {
			this.wrapper = $('<div class="form-column">\
			<form>\
			</form>\
		</div>').appendTo(this.section.body)
				.find("form")
				.on("submit", function () {
					return false;
				});

			if (this.df.label) {
				$('<label class="control-label">' + __(this.df.label)
					+ '</label>').appendTo(this.wrapper);
			}
		},
		resize_all_columns: function () {
			// distribute all columns equally
			var colspan = cint(12 / this.section.wrapper.find(".form-column").length);

			this.section.wrapper.find(".form-column").removeClass()
				.addClass("form-column")
				.addClass("col-sm-" + colspan);

		},
		refresh: function () {
			this.section.refresh();
		}
	});

	frappe.provide('frappe.ui');

	frappe.ui.FieldGroup = frappe.ui.form.Layout.extend({
		init: function(opts) {
			$.extend(this, opts);
			this.dirty = false;
			this._super();
			$.each(this.fields || [], function(i, f) {
				if(!f.fieldname && f.label) {
					f.fieldname = f.label.replace(/ /g, "_").toLowerCase();
				}
			});
			if(this.values) {
				this.set_values(this.values);
			}
		},
		make: function() {
			var this$1 = this;

			var me = this;
			if(this.fields) {
				this._super();
				this.refresh();
				// set default
				$.each(this.fields_list, function(i, field) {
					if (field.df["default"]) {
						var def_value = field.df["default"];

						if (def_value == 'Today' && field.df["fieldtype"] == 'Date') {
							def_value = frappe.datetime.get_today();
						}

						field.set_input(def_value);
						// if default and has depends_on, render its fields.
						me.refresh_dependency();
					}
				});

				if(!this.no_submit_on_enter) {
					this.catch_enter_as_submit();
				}

				$(this.wrapper).find('input, select').on(
					'change awesomplete-selectcomplete',
					function () {
						this$1.dirty = true;
						frappe.run_serially([
							function () { return frappe.timeout(0.1); },
							function () { return me.refresh_dependency(); }
						]);
					}
				);

			}
		},
		first_button: false,
		focus_on_first_input: function() {
			if(this.no_focus) { return; }
			$.each(this.fields_list, function(i, f) {
				if(!in_list(['Date', 'Datetime', 'Time', 'Check'], f.df.fieldtype) && f.set_focus) {
					f.set_focus();
					return false;
				}
			});
		},
		catch_enter_as_submit: function() {
			var me = this;
			$(this.body).find('input[type="text"], input[type="password"], select').keypress(function(e) {
				if(e.which==13) {
					if(me.has_primary_action) {
						e.preventDefault();
						me.get_primary_btn().trigger("click");
					}
				}
			});
		},
		get_input: function(fieldname) {
			var field = this.fields_dict[fieldname];
			return $(field.txt ? field.txt : field.input);
		},
		get_field: function(fieldname) {
			return this.fields_dict[fieldname];
		},
		get_values: function(ignore_errors) {
			var ret = {};
			var errors = [];
			for (var key in this.fields_dict) {
				var f = this.fields_dict[key];
				if (f.get_value) {
					var v = f.get_value();
					if (
						f.df.reqd &&
						is_null(typeof v === 'string' ? strip_html(v) : v)
					)
						{ errors.push(__(f.df.label)); }

					if (f.df.reqd
						&& f.df.fieldtype === 'Text Editor'
						&& is_null(strip_html(cstr(v))))
						{ errors.push(__(f.df.label)); }

					if (!is_null(v)) { ret[f.df.fieldname] = v; }
				}
			}
			if (errors.length && !ignore_errors) {
				frappe.msgprint({
					title: __('Missing Values Required'),
					message: __('Following fields have missing values:') +
						'<br><br><ul><li>' + errors.join('<li>') + '</ul>',
					indicator: 'orange'
				});
				return null;
			}
			return ret;
		},
		get_value: function(key) {
			var f = this.fields_dict[key];
			return f && (f.get_value ? f.get_value() : null);
		},
		set_value: function(key, val){
			var this$1 = this;

			return new Promise(function (resolve) {
				var f = this$1.fields_dict[key];
				if(f) {
					f.set_value(val).then(function () {
						f.set_input(val);
						this$1.refresh_dependency();
						resolve();
					});
				} else {
					resolve();
				}
			});
		},
		set_input: function(key, val) {
			return this.set_value(key, val);
		},
		set_values: function(dict) {
			var promises = [];
			for(var key in dict) {
				if(this.fields_dict[key]) {
					promises.push(this.set_value(key, dict[key]));
				}
			}

			return Promise.all(promises);
		},
		clear: function() {
			for(var key in this.fields_dict) {
				var f = this.fields_dict[key];
				if(f && f.set_input) {
					f.set_input(f.df['default'] || '');
				}
			}
		},
		set_df_property: function (fieldname, prop, value) {
			var field    = this.get_field(fieldname);
			field.df[prop] = value;
			field.refresh();
		}
	});

	// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
	// MIT License. See license.txt

	// add a new dom element
	frappe.provide('frappe.dom');

	frappe.dom = {
		id_count: 0,
		freeze_count: 0,
		by_id: function(id) {
			return document.getElementById(id);
		},
		get_unique_id: function() {
			var id = 'unique-' + frappe.dom.id_count;
			frappe.dom.id_count++;
			return id;
		},
		set_unique_id: function(ele) {
			var $ele = $(ele);
			if($ele.attr('id')) {
				return $ele.attr('id');
			}
			var id = 'unique-' + frappe.dom.id_count;
			$ele.attr('id', id);
			frappe.dom.id_count++;
			return id;
		},
		eval: function(txt) {
			if(!txt) { return; }
			var el = document.createElement('script');
			el.appendChild(document.createTextNode(txt));
			// execute the script globally
			document.getElementsByTagName('head')[0].appendChild(el);
		},
		remove_script_and_style: function(txt) {
			var evil_tags = ["script", "style", "noscript", "title", "meta", "base", "head"];
			var regex = new RegExp(evil_tags.map(function (tag) { return ("<" + tag + ">.*<\\/" + tag + ">"); }).join('|'), 's');
			if (!regex.test(txt)) {
				// no evil tags found, skip the DOM method entirely!
				return txt;
			}

			var div = document.createElement('div');
			div.innerHTML = txt;
			var found = false;
			evil_tags.forEach(function(e) {
				var elements = div.getElementsByTagName(e);
				i = elements.length;
				while (i--) {
					found = true;
					elements[i].parentNode.removeChild(elements[i]);
				}
			});

			// remove links with rel="stylesheet"
			var elements = div.getElementsByTagName('link');
			var i = elements.length;
			while (i--) {
				if (elements[i].getAttribute("rel")=="stylesheet"){
					found = true;
					elements[i].parentNode.removeChild(elements[i]);
				}
			}
			if(found) {
				return div.innerHTML;
			} else {
				// don't disturb
				return txt;
			}
		},
		is_element_in_viewport: function (el, tolerance) {
			if ( tolerance === void 0 ) tolerance=0;


			//special bonus for those using jQuery
			if (typeof jQuery === "function" && el instanceof jQuery) {
				el = el[0];
			}

			var rect = el.getBoundingClientRect();

			return (
				rect.top + tolerance >= 0
				&& rect.left + tolerance >= 0
				&& rect.bottom - tolerance <= $(window).height()
				&& rect.right - tolerance <= $(window).width()
			);
		},

		is_element_in_modal: function is_element_in_modal(element) {
			return Boolean($(element).parents('.modal').length);
		},

		set_style: function(txt, id) {
			if(!txt) { return; }

			var se = document.createElement('style');
			se.type = "text/css";

			if (id) {
				var element = document.getElementById(id);
				if (element) {
					element.parentNode.removeChild(element);
				}
				se.id = id;
			}

			if (se.styleSheet) {
				se.styleSheet.cssText = txt;
			} else {
				se.appendChild(document.createTextNode(txt));
			}
			document.getElementsByTagName('head')[0].appendChild(se);
			return se;
		},
		add: function(parent, newtag, className, cs, innerHTML, onclick) {
			if(parent && parent.substr){ parent = frappe.dom.by_id(parent); }
			var c = document.createElement(newtag);
			if(parent)
				{ parent.appendChild(c); }

			// if image, 3rd parameter is source
			if(className) {
				if(newtag.toLowerCase()=='img')
					{ c.src = className; }
				else
					{ c.className = className; }
			}
			if(cs) { frappe.dom.css(c,cs); }
			if(innerHTML) { c.innerHTML = innerHTML; }
			if(onclick) { c.onclick = onclick; }
			return c;
		},
		css: function(ele, s) {
			if(ele && s) {
				$.extend(ele.style, s);
			}
			return ele;
		},
		activate: function($parent, $child, common_class, active_class) {
			if ( active_class === void 0 ) active_class='active';

			$parent.find(("." + common_class + "." + active_class))
				.removeClass(active_class);
			$child.addClass(active_class);
		},
		freeze: function(msg, css_class) {
			// blur
			if (!$('#freeze').length) {
				var freeze = $('<div id="freeze" class="modal-backdrop fade"></div>')
					.on("click", function() {
						if (cur_frm && cur_frm.cur_grid) {
							cur_frm.cur_grid.toggle_view();
							return false;
						}
					})
					.appendTo("#body");

				freeze.html(repl('<div class="freeze-message-container"><div class="freeze-message"><p class="lead">%(msg)s</p></div></div>',
					{msg: msg || ""}));

				setTimeout(function() { freeze.addClass("in"); }, 1);

			} else {
				$("#freeze").addClass("in");
			}

			if (css_class) {
				$("#freeze").addClass(css_class);
			}

			frappe.dom.freeze_count++;
		},
		unfreeze: function() {
			if(!frappe.dom.freeze_count) { return; } // anything open?
			frappe.dom.freeze_count--;
			if(!frappe.dom.freeze_count) {
				var freeze = $('#freeze').removeClass("in").remove();
			}
		},
		save_selection: function() {
			// via http://stackoverflow.com/questions/5605401/insert-link-in-contenteditable-element
			if (window.getSelection) {
				var sel = window.getSelection();
				if (sel.getRangeAt && sel.rangeCount) {
					var ranges = [];
					for (var i = 0, len = sel.rangeCount; i < len; ++i) {
						ranges.push(sel.getRangeAt(i));
					}
					return ranges;
				}
			} else if (document.selection && document.selection.createRange) {
				return document.selection.createRange();
			}
			return null;
		},
		restore_selection: function(savedSel) {
			if (savedSel) {
				if (window.getSelection) {
					var sel = window.getSelection();
					sel.removeAllRanges();
					for (var i = 0, len = savedSel.length; i < len; ++i) {
						sel.addRange(savedSel[i]);
					}
				} else if (document.selection && savedSel.select) {
					savedSel.select();
				}
			}
		},
		is_touchscreen: function() {
			return ('ontouchstart' in window)
		},
		handle_broken_images: function handle_broken_images(container) {
			$(container).find('img').on('error', function (e) {
				var $img = $(e.currentTarget);
				$img.addClass('no-image');
			});
		},
		scroll_to_bottom: function scroll_to_bottom(container) {
			var $container = $(container);
			$container.scrollTop($container[0].scrollHeight);
		},
		file_to_base64: function file_to_base64(file_obj) {
			return new Promise(function (resolve) {
				var reader = new FileReader();
				reader.onload = function() {
					resolve(reader.result);
				};
				reader.readAsDataURL(file_obj);
			});
		},
		scroll_to_section: function scroll_to_section(section_name) {
			setTimeout(function () {
				var section = $(("a:contains(\"" + section_name + "\")"));
				if (section.length) {
					if(section.parent().hasClass('collapsed')) {
						// opens the section
						section.click();
					}
					frappe.ui.scroll(section.parent().parent());
				}
			}, 200);
		},
		pixel_to_inches: function pixel_to_inches(pixels) {
			var div = $('<div id="dpi" style="height: 1in; width: 1in; left: 100%; position: fixed; top: 100%;"></div>');
			div.appendTo(document.body);

			var dpi_x = document.getElementById('dpi').offsetWidth;
			var inches = pixels / dpi_x;
			div.remove();

			return inches;
		}
	};

	frappe.ellipsis = function(text, max) {
		if(!max) { max = 20; }
		text = cstr(text);
		if(text.length > max) {
			text = text.substr(0, max) + '...';
		}
		return text;
	};

	frappe.run_serially = function(tasks) {
		var result = Promise.resolve();
		tasks.forEach(function (task) {
			if(task) {
				result = result.then ? result.then(task) : Promise.resolve();
			}
		});
		return result;
	};

	frappe.load_image = function (src, onload, onerror, preprocess) {
		if ( preprocess === void 0 ) preprocess = function () {};

		var tester = new Image();
		tester.onload = function() {
			onload(this);
		};
		tester.onerror = onerror;

		preprocess(tester);
		tester.src = src;
	};

	frappe.timeout = function (seconds) {
		return new Promise(function (resolve) {
			setTimeout(function () { return resolve(); }, seconds * 1000);
		});
	};

	frappe.scrub = function(text, spacer) {
		if ( spacer === void 0 ) spacer='_';

		return text.replace(/ /g, spacer).toLowerCase();
	};

	frappe.unscrub = function(txt) {
		return frappe.model.unscrub(txt);
	};

	frappe.get_data_pill = function (label, target_id, remove_action, image) {
		if ( target_id === void 0 ) target_id=null;
		if ( remove_action === void 0 ) remove_action=null;
		if ( image === void 0 ) image=null;

		var data_pill_wrapper = $(("\n\t\t<button class=\"data-pill btn\">\n\t\t\t<div class=\"flex align-center ellipsis\">\n\t\t\t\t" + (image ? image : '') + "\n\t\t\t\t<span class=\"pill-label " + (image ? "ml-2" : "") + "\">" + label + "</span>\n\t\t\t</div>\n\t\t</button>\n\t"));

		if (remove_action) {
			var remove_btn = $(("\n\t\t\t<span class=\"remove-btn cursor-pointer\">\n\t\t\t\t" + (frappe.utils.icon('close', 'sm')) + "\n\t\t\t</span>\n\t\t")).click(function () {
				remove_action(target_id || label, data_pill_wrapper);
			});
			data_pill_wrapper.append(remove_btn);
		}

		return data_pill_wrapper;
	};

	frappe.get_modal = function(title, content) {
		return $(("<div class=\"modal fade\" style=\"overflow: auto;\" tabindex=\"-1\">\n\t\t<div class=\"modal-dialog\">\n\t\t\t<div class=\"modal-content\">\n\t\t\t\t<div class=\"modal-header\">\n\t\t\t\t\t<div class=\"fill-width flex title-section\">\n\t\t\t\t\t\t<span class=\"indicator hidden\"></span>\n\t\t\t\t\t\t<h4 class=\"modal-title\">" + title + "</h4>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"modal-actions\">\n\t\t\t\t\t\t<button class=\"btn btn-modal-minimize btn-link hide\">\n\t\t\t\t\t\t\t" + (frappe.utils.icon('collapse')) + "\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button class=\"btn btn-modal-close btn-link\" data-dismiss=\"modal\">\n\t\t\t\t\t\t\t" + (frappe.utils.icon('close-alt', 'sm', 'close-alt')) + "\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"modal-body ui-front\">" + content + "</div>\n\t\t\t\t<div class=\"modal-footer hide\">\n\t\t\t\t\t<div class=\"custom-actions\"></div>\n\t\t\t\t\t<div class=\"standard-actions\">\n\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-secondary btn-sm hide btn-modal-secondary\">\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-primary btn-sm hide btn-modal-primary\">\n\t\t\t\t\t\t\t" + (__("Confirm")) + "\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>"));
	};

	frappe.is_online = function() {
		if (frappe.boot.developer_mode == 1) {
			// always online in developer_mode
			return true;
		}
		if ('onLine' in navigator) {
			return navigator.onLine;
		}
		return true;
	};

	// bind online/offline events
	$(window).on('online', function() {
		frappe.show_alert({
			indicator: 'green',
			message: __('You are connected to internet.')
		});
	});

	$(window).on('offline', function() {
		frappe.show_alert({
			indicator: 'orange',
			message: __('Connection lost. Some features might not work.')
		});
	});

	frappe.provide('frappe.ui');

	window.cur_dialog = null;

	frappe.ui.open_dialogs = [];

	frappe.ui.Dialog = class Dialog extends frappe.ui.FieldGroup {
		constructor(opts) {
			super();
			this.display = false;
			this.is_dialog = true;

			$.extend(this, { animate: true, size: null }, opts);
			this.make();
		}

		make() {
			var this$1 = this;

			this.$wrapper = frappe.get_modal("", "");

			if(this.static) {
				this.$wrapper.modal({
					backdrop: 'static',
					keyboard: false
				});
				this.get_close_btn().hide();
			}

			this.wrapper = this.$wrapper.find('.modal-dialog')
				.get(0);
			if (this.size == "small" )
				{ $(this.wrapper).addClass("modal-sm"); }
			else if (this.size == "large" )
				{ $(this.wrapper).addClass("modal-lg"); }
			else if (this.size == "extra-large" )
				{ $(this.wrapper).addClass("modal-xl"); }

			this.make_head();
			this.modal_body = this.$wrapper.find(".modal-body");
			this.$body = $('<div></div>').appendTo(this.modal_body);
			this.body = this.$body.get(0);
			this.$message = $('<div class="hide modal-message"></div>').appendTo(this.modal_body);
			this.header = this.$wrapper.find(".modal-header");
			this.footer = this.$wrapper.find(".modal-footer");
			this.standard_actions = this.footer.find('.standard-actions');
			this.custom_actions = this.footer.find('.custom-actions');
			this.set_indicator();

			// make fields (if any)
			super.make();

			this.refresh_section_collapse();

			// show footer
			this.action = this.action || { primary: { }, secondary: { } };
			if (this.primary_action || (this.action.primary && this.action.primary.onsubmit)) {
				this.set_primary_action(this.primary_action_label || this.action.primary.label || __("Submit"),
					this.primary_action || this.action.primary.onsubmit);
			}

			if (this.secondary_action) {
				this.set_secondary_action(this.secondary_action);
			}

			if (this.secondary_action_label || (this.action.secondary && this.action.secondary.label)) {
				this.set_secondary_action_label(this.secondary_action_label || this.action.secondary.label);
			}

			if (this.minimizable) {
				this.header.find('.title-section').click(function () { return this$1.is_minimized && this$1.toggle_minimize(); });
				this.get_minimize_btn().removeClass('hide').on('click', function () { return this$1.toggle_minimize(); });
			}

			var me = this;
			this.$wrapper
				.on("hide.bs.modal", function() {
					me.display = false;

					if(frappe.ui.open_dialogs[frappe.ui.open_dialogs.length-1]===me) {
						frappe.ui.open_dialogs.pop();
						if(frappe.ui.open_dialogs.length) {
							window.cur_dialog = frappe.ui.open_dialogs[frappe.ui.open_dialogs.length-1];
						} else {
							window.cur_dialog = null;
						}
					}
					me.onhide && me.onhide();
					me.on_hide && me.on_hide();
				})
				.on("shown.bs.modal", function() {
					// focus on first input
					me.display = true;
					window.cur_dialog = me;
					frappe.ui.open_dialogs.push(me);
					me.focus_on_first_input();
					me.on_page_show && me.on_page_show();
					$(document).trigger('frappe.ui.Dialog:shown');
				})
				.on('scroll', function() {
					var $input = $('input:focus');
					if ($input.length && ['Date', 'Datetime', 'Time'].includes($input.attr('data-fieldtype'))) {
						$input.blur();
					}
				});

		}

		get_primary_btn() {
			return this.standard_actions.find(".btn-primary");
		}

		get_minimize_btn() {
			return this.$wrapper.find(".modal-header .btn-modal-minimize");
		}

		set_message(text) {
			this.$message.removeClass('hide');
			this.$body.addClass('hide');
			this.$message.text(text);
		}

		clear_message() {
			this.$message.addClass('hide');
			this.$body.removeClass('hide');
		}

		clear() {
			super.clear();
			this.clear_message();
		}

		set_primary_action(label, click) {
			this.footer.removeClass('hide');
			this.has_primary_action = true;
			var me = this;
			return this.get_primary_btn()
				.removeClass("hide")
				.html(label)
				.click(function() {
					me.primary_action_fulfilled = true;
					// get values and send it
					// as first parameter to click callback
					// if no values then return
					var values = me.get_values();
					if(!values) { return; }
					click && click.apply(me, [values]);
				});
		}

		set_secondary_action(click) {
			this.footer.removeClass('hide');
			this.get_secondary_btn().removeClass('hide').off('click').on('click', click);
		}

		set_secondary_action_label(label) {
			this.get_secondary_btn()
				.removeClass("hide")
				.html(label);
		}

		disable_primary_action() {
			this.get_primary_btn().addClass('disabled');
		}

		enable_primary_action() {
			this.get_primary_btn().removeClass('disabled');
		}

		make_head() {
			this.set_title(this.title);
		}

		set_title(t) {
			this.$wrapper.find(".modal-title").html(t);
		}

		set_indicator() {
			if (this.indicator) {
				this.header.find('.indicator').removeClass().addClass('indicator ' + this.indicator);
			}
		}

		show() {
			// show it
			if (this.animate) {
				this.$wrapper.addClass('fade');
			} else {
				this.$wrapper.removeClass('fade');
			}
			this.$wrapper.modal("show");

			this.$wrapper.removeClass('modal-minimize');

			// clear any message
			this.clear_message();

			this.primary_action_fulfilled = false;
			this.is_visible = true;
			return this;
		}

		hide() {
			this.$wrapper.modal("hide");
			this.is_visible = false;
		}

		get_close_btn() {
			return this.$wrapper.find(".btn-modal-close");
		}

		get_secondary_btn() {
			return this.standard_actions.find(".btn-modal-secondary");
		}

		no_cancel() {
			this.get_close_btn().toggle(false);
		}

		cancel() {
			this.get_close_btn().trigger("click");
		}

		toggle_minimize() {
			$('.modal-backdrop').toggle();
			var modal = this.$wrapper.closest('.modal').toggleClass('modal-minimize');
			modal.attr('tabindex') ? modal.removeAttr('tabindex') : modal.attr('tabindex', -1);
			this.is_minimized = !this.is_minimized;
			var icon = this.is_minimized ? 'expand' : 'collapse';
			this.get_minimize_btn().html(frappe.utils.icon(icon));
			this.on_minimize_toggle && this.on_minimize_toggle(this.is_minimized);
			this.header.find('.modal-title').toggleClass('cursor-pointer');
		}

		add_custom_action(label, action, css_class) {
			if ( css_class === void 0 ) css_class=null;

			this.footer.removeClass('hide');
			var action_button = $(("\n\t\t\t<button class=\"btn btn-secondary btn-sm " + (css_class || '') + "\">\n\t\t\t\t" + label + "\n\t\t\t</button>\n\t\t"));
			this.custom_actions.append(action_button);

			action && action_button.click(action);
		}
	};

	frappe.ui.hide_open_dialog = function () {
		// hide open dialog
		if (window.cur_dialog) {
			if (!cur_dialog.minimizable) {
				cur_dialog.hide();
			} else if (!cur_dialog.is_minimized) {
				cur_dialog.toggle_minimize();
			}
		}
	};

	// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
	// MIT License. See license.txt

	frappe.provide("frappe.messages");

	frappe.messages.waiting = function(parent, msg) {
		return $(frappe.messages.get_waiting_message(msg))
			.appendTo(parent);
	};

	frappe.messages.get_waiting_message = function(msg) {
		return repl('<div class="msg-box" style="width: 63%; margin: 30px auto;">\
		<p class="text-center">%(msg)s</p></div>', { msg: msg });
	};

	frappe.throw = function(msg) {
		if(typeof msg==='string') {
			msg = {message: msg, title: __('Error')};
		}
		if(!msg.indicator) { msg.indicator = 'red'; }
		frappe.msgprint(msg);
		throw new Error(msg.message);
	};

	frappe.confirm = function(message, confirm_action, reject_action) {
		var d = new frappe.ui.Dialog({
			title: __("Confirm"),
			primary_action_label: __("Yes"),
			primary_action: function () {
				confirm_action && confirm_action();
				d.hide();
			},
			secondary_action_label: __("No"),
			secondary_action: function () { return d.hide(); },
		});

		d.$body.append(("<p class=\"frappe-confirm-message\">" + message + "</p>"));
		d.show();

		// flag, used to bind "okay" on enter
		d.confirm_dialog = true;

		// no if closed without primary action
		if (reject_action) {
			d.onhide = function () {
				if (!d.primary_action_fulfilled) {
					reject_action();
				}
			};
		}

		return d;
	};

	frappe.warn = function(title, message_html, proceed_action, primary_label, is_minimizable) {
		var d = new frappe.ui.Dialog({
			title: title,
			indicator: 'red',
			primary_action_label: primary_label,
			primary_action: function () {
				if (proceed_action) { proceed_action(); }
				d.hide();
			},
			secondary_action_label: __("Cancel"),
			secondary_action: function () { return d.hide(); },
			minimizable: is_minimizable
		});

		d.$body.append(("<div class=\"frappe-confirm-message\">" + message_html + "</div>"));
		d.standard_actions.find('.btn-primary').removeClass('btn-primary').addClass('btn-danger');
		d.standard_actions.find('.btn-primary').removeClass('btn-primary').addClass('btn-danger');

		d.show();
		return d;
	};

	frappe.prompt = function(fields, callback, title, primary_label) {
		if (typeof fields === "string") {
			fields = [{
				label: fields,
				fieldname: "value",
				fieldtype: "Data",
				reqd: 1
			}];
		}
		if(!$.isArray(fields)) { fields = [fields]; }
		var d = new frappe.ui.Dialog({
			fields: fields,
			title: title || __("Enter Value"),
		});
		d.set_primary_action(primary_label || __("Submit"), function() {
			var values = d.get_values();
			if(!values) {
				return;
			}
			d.hide();
			callback(values);
		});
		d.show();
		return d;
	};

	frappe.msgprint = function(msg, title, is_minimizable) {
		if(!msg) { return; }

		if($.isPlainObject(msg)) {
			var data = msg;
		} else {
			// passed as JSON
			if(typeof msg==='string' && msg.substr(0,1)==='{') {
				var data = JSON.parse(msg);
			} else {
				var data = {'message': msg, 'title': title};
			}
		}

		if(!data.indicator) {
			data.indicator = 'blue';
		}

		if (data.as_list) {
			var list_rows = data.message.map(function (m) { return ("<li>" + m + "</li>"); }).join('');
			data.message = "<ul style=\"padding-left: 20px\">" + list_rows + "</ul>";
		}

		if (data.as_table) {
			var rows = data.message.map(function (row) {
				var cols = row.map(function (col) { return ("<td>" + col + "</td>"); }).join('');
				return ("<tr>" + cols + "</tr>");
			}).join('');
			data.message = "<table class=\"table table-bordered\" style=\"margin: 0;\">" + rows + "</table>";
		}

		if(data.message instanceof Array) {
			data.message.forEach(function(m) {
				frappe.msgprint(m);
			});
			return;
		}

		if(data.alert) {
			frappe.show_alert(data);
			return;
		}

		if(!frappe.msg_dialog) {
			frappe.msg_dialog = new frappe.ui.Dialog({
				title: __("Message"),
				onhide: function() {
					if(frappe.msg_dialog.custom_onhide) {
						frappe.msg_dialog.custom_onhide();
					}
					frappe.msg_dialog.msg_area.empty();
				},
				minimizable: data.is_minimizable || is_minimizable
			});

			// class "msgprint" is used in tests
			frappe.msg_dialog.msg_area = $('<div class="msgprint">')
				.appendTo(frappe.msg_dialog.body);

			frappe.msg_dialog.clear = function() {
				frappe.msg_dialog.msg_area.empty();
			};

			frappe.msg_dialog.indicator = frappe.msg_dialog.header.find('.indicator');
		}

		// setup and bind an action to the primary button
		if (data.primary_action) {
			if (data.primary_action.server_action && typeof data.primary_action.server_action === 'string') {
				data.primary_action.action = function () {
					frappe.call({
						method: data.primary_action.server_action,
						args: {
							args: data.primary_action.args
						},
						callback: function callback() {
							if (data.primary_action.hide_on_success) {
								frappe.hide_msgprint();
							}
						}
					});
				};
			}

			if (data.primary_action.client_action && typeof data.primary_action.client_action === 'string') {
				var parts = data.primary_action.client_action.split('.');
				var obj = window;
				for (var i = 0, list = parts; i < list.length; i += 1) {
					var part = list[i];

					obj = obj[part];
				}
				data.primary_action.action = function () {
					if (typeof obj === 'function') {
						obj(data.primary_action.args);
					}
				};
			}

			frappe.msg_dialog.set_primary_action(
				__(data.primary_action.label || data.primary_action_label || "Done"),
				data.primary_action.action
			);
		} else {
			if (frappe.msg_dialog.has_primary_action) {
				frappe.msg_dialog.get_primary_btn().addClass('hide');
				frappe.msg_dialog.has_primary_action = false;
			}
		}

		if (data.secondary_action) {
			frappe.msg_dialog.set_secondary_action(data.secondary_action.action);
			frappe.msg_dialog.set_secondary_action_label(__(data.secondary_action.label || "Close"));
		}

		if(data.message==null) {
			data.message = '';
		}

		if(data.message.search(/<br>|<p>|<li>/)==-1) {
			msg = frappe.utils.replace_newlines(data.message);
		}

		var msg_exists = false;
		if(data.clear) {
			frappe.msg_dialog.msg_area.empty();
		} else {
			msg_exists = frappe.msg_dialog.msg_area.html();
		}

		if(data.title || !msg_exists) {
			// set title only if it is explicitly given
			// and no existing title exists
			frappe.msg_dialog.set_title(data.title || __('Message'));
		}

		// show / hide indicator
		if(data.indicator) {
			frappe.msg_dialog.indicator.removeClass().addClass('indicator ' + data.indicator);
		} else {
			frappe.msg_dialog.indicator.removeClass().addClass('hidden');
		}

		// width
		if (data.wide) {
			// msgprint should be narrower than the usual dialog
			if (frappe.msg_dialog.wrapper.classList.contains('msgprint-dialog')) {
				frappe.msg_dialog.wrapper.classList.remove('msgprint-dialog');
			}
		} else {
			// msgprint should be narrower than the usual dialog
			frappe.msg_dialog.wrapper.classList.add('msgprint-dialog');
		}

		if(msg_exists) {
			frappe.msg_dialog.msg_area.append("<hr>");
		// append a <hr> if another msg already exists
		}

		frappe.msg_dialog.msg_area.append(data.message);

		// make msgprint always appear on top
		frappe.msg_dialog.$wrapper.css("z-index", 2000);
		frappe.msg_dialog.show();

		return frappe.msg_dialog;
	};

	window.msgprint = frappe.msgprint;

	frappe.hide_msgprint = function(instant) {
		// clear msgprint
		if(frappe.msg_dialog && frappe.msg_dialog.msg_area) {
			frappe.msg_dialog.msg_area.empty();
		}
		if(frappe.msg_dialog && frappe.msg_dialog.$wrapper.is(":visible")) {
			if(instant) {
				frappe.msg_dialog.$wrapper.removeClass("fade");
			}
			frappe.msg_dialog.hide();
			if(instant) {
				frappe.msg_dialog.$wrapper.addClass("fade");
			}
		}
	};

	// update html in existing msgprint
	frappe.update_msgprint = function(html) {
		if(!frappe.msg_dialog || (frappe.msg_dialog && !frappe.msg_dialog.$wrapper.is(":visible"))) {
			frappe.msgprint(html);
		} else {
			frappe.msg_dialog.msg_area.html(html);
		}
	};

	frappe.verify_password = function(callback) {
		frappe.prompt({
			fieldname: "password",
			label: __("Enter your password"),
			fieldtype: "Password",
			reqd: 1
		}, function(data) {
			frappe.call({
				method: "frappe.core.doctype.user.user.verify_password",
				args: {
					password: data.password
				},
				callback: function(r) {
					if(!r.exc) {
						callback();
					}
				}
			});
		}, __("Verify Password"), __("Verify"));
	};

	frappe.show_progress = function (title, count, total, description, hide_on_completion) {
		if ( total === void 0 ) total = 100;
		if ( hide_on_completion === void 0 ) hide_on_completion = false;

		var dialog;
		if (
			frappe.cur_progress &&
			frappe.cur_progress.title === title &&
			frappe.cur_progress.is_visible
		) {
			dialog = frappe.cur_progress;
		} else {
			dialog = new frappe.ui.Dialog({
				title: title
			});
			dialog.progress = $("<div>\n\t\t\t<div class=\"progress\">\n\t\t\t\t<div class=\"progress-bar\"></div>\n\t\t\t</div>\n\t\t\t<p class=\"description text-muted small\"></p>\n\t\t</div").appendTo(dialog.body);
			dialog.progress_bar = dialog.progress
				.css({ 'margin-top': '10px' })
				.find('.progress-bar');
			dialog.$wrapper.removeClass('fade');
			dialog.show();
			frappe.cur_progress = dialog;
		}
		if (description) {
			dialog.progress.find('.description').text(description);
		}
		dialog.percent = cint((flt(count) * 100) / total);
		dialog.progress_bar.css({ width: dialog.percent + '%' });
		if (hide_on_completion && dialog.percent === 100) {
			// timeout to avoid abrupt hide
			setTimeout(frappe.hide_progress, 500);
		}
		return dialog;
	};

	frappe.hide_progress = function() {
		if(frappe.cur_progress) {
			frappe.cur_progress.hide();
			frappe.cur_progress = null;
		}
	};

	// Floating Message
	frappe.show_alert = function(message, seconds, actions) {
		if ( seconds === void 0 ) seconds=7;
		if ( actions === void 0 ) actions={};

		var indicator_icon_map = {
			'orange': "solid-warning",
			'yellow': "solid-warning",
			'blue': "solid-success",
			'green': "solid-success",
			'red': "solid-error"
		};

		if (typeof message==='string') {
			message = {
				message: message
			};
		}

		if (!$('#dialog-container').length) {
			$('<div id="dialog-container"><div id="alert-container"></div></div>').appendTo('body');
		}

		var icon;
		if (message.indicator) {
			icon = indicator_icon_map[message.indicator.toLowerCase()] || 'solid-' + message.indicator;
		} else {
			icon = 'solid-info';
		}

		var div = $(("\n\t\t<div class=\"alert desk-alert\">\n\t\t\t<div class=\"alert-message-container\">\n\t\t\t\t<div class=\"alert-title-container\">\n\t\t\t\t\t<div>" + (frappe.utils.icon(icon, 'lg')) + "</div>\n\t\t\t\t\t<div class=\"alert-message\">" + (message.message) + "</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"alert-subtitle\">" + (message.subtitle || '') + "</div>\n\t\t\t</div>\n\t\t\t<div class=\"alert-body\" style=\"display: none\"></div>\n\t\t\t<a class=\"close\">" + (frappe.utils.icon('close-alt')) + "</a>\n\t\t</div>"));

		div.hide().appendTo("#alert-container").show();

		if (message.body) {
			div.find('.alert-body').show().html(message.body);
		}

		div.find('.close, button').click(function() {
			div.addClass('out');
			setTimeout(function () { return div.remove(); }, 800);
			return false;
		});

		Object.keys(actions).map(function (key) {
			div.find(("[data-action=" + key + "]")).on('click', actions[key]);
		});

		if (seconds > 2) {
			// Delay for animation
			seconds = seconds - 0.8;
		}

		setTimeout(function () {
			div.addClass('out');
			setTimeout(function () { return div.remove(); }, 800);
			return false;
		}, seconds * 1000);

		return div;
	};

	// Proxy for frappe.show_alert
	Object.defineProperty(window, 'show_alert', {
		get: function() {
			console.warn('Please use `frappe.show_alert` instead of `show_alert`. It will be deprecated soon.');
			return frappe.show_alert;
		}
	});

	// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
	// MIT License. See license.txt

	// for translation
	frappe._messages = {};
	frappe._ = function(txt, replace, context) {
		if ( context === void 0 ) context = null;

		if ($.isEmptyObject(frappe._messages) && frappe.boot) {
			$.extend(frappe._messages, frappe.boot.__messages);
		}
		if (!txt) { return txt; }
		if (typeof txt != "string") { return txt; }

		var translated_text = '';

		var key = txt;    // txt.replace(/\n/g, "");
		if (context) {
			translated_text = frappe._messages[(key + ":" + context)];
		}

		if (!translated_text) {
			translated_text = frappe._messages[key] || txt;
		}

		if (replace && typeof replace === "object") {
			translated_text = $.format(translated_text, replace);
		}
		return translated_text;
	};

	window.__ = frappe._;

	frappe.get_languages = function() {
		if (!frappe.languages) {
			frappe.languages = [];
			$.each(frappe.boot.lang_dict, function(lang, value) {
				frappe.languages.push({ label: lang, value: value });
			});
			frappe.languages = frappe.languages.sort(function(a, b) {
				return a.value < b.value ? -1 : 1;
			});
		}
		return frappe.languages;
	};

	function prettyDate(date, mini) {
		if (!date) { return ''; }

		if (typeof (date) == "string") {
			date = frappe.datetime.convert_to_user_tz(date);
			date = new Date((date || "").replace(/-/g, "/").replace(/[TZ]/g, " ").replace(/\.[0-9]*/, ""));
		}

		var diff = (((new Date()).getTime() - date.getTime()) / 1000);
		var day_diff = Math.floor(diff / 86400);

		if (isNaN(day_diff) || day_diff < 0) { return ''; }

		if (mini) {
			// Return short format of time difference
			if (day_diff == 0) {
				if (diff < 60) {
					return __("now");
				} else if (diff < 3600) {
					return __("{0} m", [Math.floor(diff / 60)]);
				} else if (diff < 86400) {
					return __("{0} h", [Math.floor(diff / 3600)]);
				}
			} else {
				if (day_diff < 7) {
					return __("{0} d", [day_diff]);
				} else if (day_diff < 31) {
					return __("{0} w", [Math.ceil(day_diff / 7)]);
				} else if (day_diff < 365) {
					return __("{0} M", [Math.ceil(day_diff / 30)]);
				} else {
					return __("{0} y", [Math.ceil(day_diff / 365)]);
				}
			}
		} else {
			// Return long format of time difference
			if (day_diff == 0) {
				if (diff < 60) {
					return __("just now");
				} else if (diff < 120) {
					return __("1 minute ago");
				} else if (diff < 3600) {
					return __("{0} minutes ago", [Math.floor(diff / 60)]);
				} else if (diff < 7200) {
					return __("1 hour ago");
				} else if (diff < 86400) {
					return __("{0} hours ago", [Math.floor(diff / 3600)]);
				}
			} else {
				if (day_diff == 1) {
					return __("yesterday");
				} else if (day_diff < 7) {
					return __("{0} days ago", [day_diff]);
				} else if (day_diff < 14) {
					return __("1 week ago");
				} else if (day_diff < 31) {
					return __("{0} weeks ago", [Math.ceil(day_diff / 7)]);
				} else if (day_diff < 62) {
					return __("1 month ago");
				} else if (day_diff < 365) {
					return __("{0} months ago", [Math.ceil(day_diff / 30)]);
				} else if (day_diff < 730) {
					return __("1 year ago");
				} else {
					return __("{0} years ago", [Math.ceil(day_diff / 365)]);
				}
			}
		}
	}

	frappe.provide("frappe.datetime");
	window.comment_when = function(datetime, mini) {
		var timestamp = frappe.datetime.str_to_user ?
			frappe.datetime.str_to_user(datetime) : datetime;
		return '<span class="frappe-timestamp '
			+ (mini ? " mini" : "") + '" data-timestamp="' + datetime
			+ '" title="' + timestamp + '">'
			+ prettyDate(datetime, mini) + '</span>';
	};
	frappe.datetime.comment_when = comment_when;
	frappe.datetime.prettyDate = prettyDate;

	frappe.datetime.refresh_when = function() {
		if (jQuery) {
			$(".frappe-timestamp").each(function() {
				$(this).html(prettyDate($(this).attr("data-timestamp"), $(this).hasClass("mini")));
			});
		}
	};

	setInterval(function() {
		frappe.datetime.refresh_when();
	}, 60000); // refresh every minute

	// Simple JavaScript Templating
	// Adapted from John Resig - http://ejohn.org/ - MIT Licensed

	frappe.template = {compiled: {}, debug:{}};
	frappe.template.compile = function(str, name) {
		var key = name || str;

		if(!frappe.template.compiled[key]) {
			if(str.indexOf("'")!==-1) {
				str.replace(/'/g, "\\'");
				//console.warn("Warning: Single quotes (') may not work in templates");
			}

			// replace jinja style tags
			str = str.replace(/{{/g, "{%=").replace(/}}/g, "%}");

			// {% if not test %} --> {% if (!test) { %}
			str = str.replace(/{%\s?if\s?\s?not\s?([^\(][^%{]+)\s?%}/g, "{% if (! $1) { %}");

			// {% if test %} --> {% if (test) { %}
			str = str.replace(/{%\s?if\s?([^\(][^%{]+)\s?%}/g, "{% if ($1) { %}");

			// {% for item in list %}
			//       --> {% for (var i=0, len=list.length; i<len; i++) {  var item = list[i]; %}
			function replacer(match, p1, p2, offset, string) {
				var i = frappe.utils.get_random(3);
				var len = frappe.utils.get_random(3);
				return "{% for (var "+i+"=0, "+len+"="+p2+".length; "+i+"<"+len+"; "+i+"++) { var "
					+p1+" = "+p2+"["+i+"]; "+p1+"._index = "+i+"; %}";
			}
			str = str.replace(/{%\s?for\s([a-z._]+)\sin\s([a-z._]+)\s?%}/g, replacer);

			// {% endfor %} --> {% } %}
			str = str.replace(/{%\s?endif\s?%}/g, "{% }; %}");

			// {% else %} --> {% } else { %}
			str = str.replace(/{%\s?else\s?%}/g, "{% } else { %}");

			// {% endif %} --> {% } %}
			str = str.replace(/{%\s?endfor\s?%}/g, "{% }; %}");

			var fn_str = "var _p=[],print=function(){_p.push.apply(_p,arguments)};" +

		        // Introduce the data as local variables using with(){}
		        "with(obj){\n_p.push('" +

		        // Convert the template into pure JavaScript
		        str
		          .replace(/[\r\t\n]/g, " ")
		          .split("{%").join("\t")
		          .replace(/((^|%})[^\t]*)'/g, "$1\r")
		          .replace(/\t=(.*?)%}/g, "',$1,'")
		          .split("\t").join("');\n")
		          .split("%}").join("\n_p.push('")
		          .split("\r").join("\\'")
		      + "');}return _p.join('');";

			  frappe.template.debug[name] = fn_str;
			try {
				frappe.template.compiled[key] = new Function("obj", fn_str);
			} catch (e) {
				console.log("Error in Template:");
				console.log(fn_str);
				if(e.lineNumber) {
					console.log("Error in Line "+e.lineNumber+", Col "+e.columnNumber+":");
					console.log(fn_str.split("\n")[e.lineNumber - 1]);
				}
			}
	    }

		return frappe.template.compiled[key];
	};
	frappe.render = function(str, data, name) {
		return frappe.template.compile(str, name)(data);
	};
	frappe.render_template = function(name, data) {
		if(name.indexOf(' ')!==-1) {
			var template = name;
		} else {
			var template = frappe.templates[name];
		}
		if(data===undefined) {
			data = {};
		}
		if (!template) {
			frappe.throw(("Template <b>" + name + "</b> not found."));
		}
		return frappe.render(template, data, name);
	};
	frappe.render_grid = function(opts) {
		// build context
		if (opts.grid) {
			opts.columns = opts.grid.getColumns();
			opts.data = opts.grid.getData().getItems();
		}

		if (
			opts.print_settings &&
			opts.print_settings.orientation &&
			opts.print_settings.orientation.toLowerCase() === "landscape"
		) {
			opts.landscape = true;
		}

		// show landscape view if columns more than 10
		if (opts.landscape == null) {
			if(opts.columns && opts.columns.length > 10) {
				opts.landscape = true;
			} else {
				opts.landscape = false;
			}
		}

		// render content
		if(!opts.content) {
			opts.content = frappe.render_template(opts.template || "print_grid", opts);
		}

		// render HTML wrapper page
		opts.base_url = frappe.urllib.get_base_url();
		opts.print_css = frappe.boot.print_css;

		opts.lang = opts.lang || frappe.boot.lang,
		opts.layout_direction = opts.layout_direction || frappe.utils.is_rtl() ? "rtl" : "ltr";

		var html = frappe.render_template("print_template", opts);

		var w = window.open();

		if(!w) {
			frappe.msgprint(__("Please enable pop-ups in your browser"));
		}

		w.document.write(html);
		w.document.close();
	},
	frappe.render_tree = function(opts) {
		opts.base_url = frappe.urllib.get_base_url();
		opts.landscape = false;
		opts.print_css = frappe.boot.print_css;
		var tree = frappe.render_template("print_tree", opts);
		var w = window.open();

		if(!w) {
			frappe.msgprint(__("Please enable pop-ups in your browser"));
		}

		w.document.write(tree);
		w.document.close();
	};
	frappe.render_pdf = function(html, opts) {
		if ( opts === void 0 ) opts = {};

		//Create a form to place the HTML content
		var formData = new FormData();

		//Push the HTML content into an element
		formData.append("html", html);
		if (opts.orientation) {
			formData.append("orientation", opts.orientation);
		}
		var blob = new Blob([], { type: "text/xml"});
		formData.append("blob", blob);

		var xhr = new XMLHttpRequest();
		xhr.open("POST", '/api/method/frappe.utils.print_format.report_to_pdf');
		xhr.setRequestHeader("X-Frappe-CSRF-Token", frappe.csrf_token);
		xhr.responseType = "arraybuffer";

		xhr.onload = function(success) {
			if (this.status === 200) {
				var blob = new Blob([success.currentTarget.response], {type: "application/pdf"});
				var objectUrl = URL.createObjectURL(blob);

				//Open report in a new window
				window.open(objectUrl);
			}
		};
		xhr.send(formData);
	};

	frappe.provide('frappe.utils');

	function get_url_arg(name) {
		return get_query_params()[name] || "";
	}

	function get_query_string(url) {
		if(url.includes("?")) {
			return url.slice(url.indexOf("?")+1);
		}else {
			return "";
		}
	}

	function get_query_params(query_string) {
		var query_params = {};
		if (!query_string) {
			query_string = location.search.substring(1);
		}

		var query_list = query_string.split("&");
		for (var i=0, l=query_list.length; i < l; i++ ){
			var pair = query_list[i].split(/=(.+)/);
			var key = pair[0];
			if (!key) {
				continue;
			}

			var value = pair[1];
			if (typeof value === "string") {
				value = value.replace(/\+/g, "%20");
				try {
					value = decodeURIComponent(value);
				} catch(e) {
					// if value contains %, it fails
				}
			}

			if (key in query_params) {
				if (typeof query_params[key] === "undefined") {
					query_params[key] = [];
				} else if (typeof query_params[key] === "string") {
					query_params[key] = [query_params[key]];
				}
				query_params[key].push(value);
			} else {
				query_params[key] = value;
			}
		}
		return query_params;
	}

	function make_query_string(obj, encode) {
		if ( encode === void 0 ) encode=true;

		var query_params = [];
		for (var key in obj) {
			var value = obj[key];
			if (value === undefined || value === '' || value === null) {
				continue;
			}
			if (typeof value === 'object') {
				value = JSON.stringify(value);
			}

			if (encode) {
				key = encodeURIComponent(key);
				value = encodeURIComponent(value);
			}

			query_params.push((key + "=" + value));
		}
		return '?' + query_params.join('&');
	}

	Object.assign(frappe.utils, {
		get_url_arg: get_url_arg,
		get_query_string: get_query_string,
		get_query_params: get_query_params,
		make_query_string: make_query_string
	});

	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//

	var script = {
		name: "ProgressRing",
		props: {
			primary: String,
			secondary: String,
			radius: Number,
			progress: Number,
			stroke: Number
		},
		data: function data() {
			var normalizedRadius = this.radius - this.stroke * 2;
			var circumference = normalizedRadius * 2 * Math.PI;

			return {
				normalizedRadius: normalizedRadius,
				circumference: circumference
			};
		},
		computed: {
			strokeDashoffset: function strokeDashoffset() {
				return (
					this.circumference - (this.progress / 100) * this.circumference
				);
			}
		}
	};

	/* script */
	            var __vue_script__ = script;
	            
	/* template */
	var __vue_render__ = function() {
	  var _vm = this;
	  var _h = _vm.$createElement;
	  var _c = _vm._self._c || _h;
	  return _c(
	    "svg",
	    { attrs: { height: _vm.radius * 2, width: _vm.radius * 2 } },
	    [
	      _c("circle", {
	        style: {
	          stroke: _vm.secondary,
	          strokeDashoffset: 0
	        },
	        attrs: {
	          "stroke-dasharray": _vm.circumference + " " + _vm.circumference,
	          "stroke-width": _vm.stroke,
	          fill: "transparent",
	          r: _vm.normalizedRadius,
	          cx: _vm.radius,
	          cy: _vm.radius
	        }
	      }),
	      _vm._v(" "),
	      _c("circle", {
	        style: {
	          stroke: _vm.primary,
	          strokeDashoffset: _vm.strokeDashoffset
	        },
	        attrs: {
	          "stroke-dasharray": _vm.circumference + " " + _vm.circumference,
	          "stroke-width": _vm.stroke,
	          fill: "transparent",
	          r: _vm.normalizedRadius,
	          cx: _vm.radius,
	          cy: _vm.radius
	        }
	      }),
	      _vm._v(" "),
	      _c(
	        "text",
	        {
	          style: {
	            color: "var(--text-color)",
	            fontSize: "var(--text-xs)",
	            fontWeight: "var(--text-bold)"
	          },
	          attrs: {
	            "dominant-baseline": "middle",
	            "text-anchor": "middle",
	            x: _vm.radius,
	            y: _vm.radius
	          }
	        },
	        [_vm._v("\n\t\t" + _vm._s(_vm.progress) + "%\n\t")]
	      )
	    ]
	  )
	};
	var __vue_staticRenderFns__ = [];
	__vue_render__._withStripped = true;

	  /* style */
	  var __vue_inject_styles__ = function (inject) {
	    if (!inject) { return }
	    inject("data-v-2680a937_0", { source: "\ncircle[data-v-2680a937] {\n\ttransition: stroke-dashoffset 0.35s;\n\ttransform: rotate(-90deg);\n\ttransform-origin: 50% 50%;\n}\n", map: {"version":3,"sources":["/home/user/erpnext-pro/erp-next/apps/frappe/frappe/public/js/frappe/file_uploader/ProgressRing.vue"],"names":[],"mappings":";AAsEA;CACA,mCAAA;CACA,yBAAA;CACA,yBAAA;AACA","file":"ProgressRing.vue","sourcesContent":["<template>\n\t<svg :height=\"radius * 2\" :width=\"radius * 2\">\n\t\t<circle\n\t\t\t:stroke-dasharray=\"circumference + ' ' + circumference\"\n\t\t\t:style=\"{\n\t\t\t\tstroke: secondary,\n\t\t\t\tstrokeDashoffset: 0\n\t\t\t}\"\n\t\t\t:stroke-width=\"stroke\"\n\t\t\tfill=\"transparent\"\n\t\t\t:r=\"normalizedRadius\"\n\t\t\t:cx=\"radius\"\n\t\t\t:cy=\"radius\"\n\t\t/>\n\t\t<circle\n\t\t\t:stroke-dasharray=\"circumference + ' ' + circumference\"\n\t\t\t:style=\"{\n\t\t\t\tstroke: primary,\n\t\t\t\tstrokeDashoffset: strokeDashoffset\n\t\t\t}\"\n\t\t\t:stroke-width=\"stroke\"\n\t\t\tfill=\"transparent\"\n\t\t\t:r=\"normalizedRadius\"\n\t\t\t:cx=\"radius\"\n\t\t\t:cy=\"radius\"\n\t\t/>\n\t\t<text\n\t\t\tdominant-baseline=\"middle\"\n\t\t\ttext-anchor=\"middle\"\n\t\t\t:x=\"radius\"\n\t\t\t:y=\"radius\"\n\t\t\t:style=\"{\n\t\t\t\tcolor: 'var(--text-color)',\n\t\t\t\tfontSize: 'var(--text-xs)',\n\t\t\t\tfontWeight: 'var(--text-bold)'\n\t\t\t}\"\n\t\t>\n\t\t\t{{ progress }}%\n\t\t</text>\n\t</svg>\n</template>\n<script>\nexport default {\n\tname: \"ProgressRing\",\n\tprops: {\n\t\tprimary: String,\n\t\tsecondary: String,\n\t\tradius: Number,\n\t\tprogress: Number,\n\t\tstroke: Number\n\t},\n\tdata() {\n\t\tconst normalizedRadius = this.radius - this.stroke * 2;\n\t\tconst circumference = normalizedRadius * 2 * Math.PI;\n\n\t\treturn {\n\t\t\tnormalizedRadius,\n\t\t\tcircumference\n\t\t};\n\t},\n\tcomputed: {\n\t\tstrokeDashoffset() {\n\t\t\treturn (\n\t\t\t\tthis.circumference - (this.progress / 100) * this.circumference\n\t\t\t);\n\t\t}\n\t}\n};\n</script>\n<style scoped>\ncircle {\n\ttransition: stroke-dashoffset 0.35s;\n\ttransform: rotate(-90deg);\n\ttransform-origin: 50% 50%;\n}\n</style>\n"]}, media: undefined });

	  };
	  /* scoped */
	  var __vue_scope_id__ = "data-v-2680a937";
	  /* module identifier */
	  var __vue_module_identifier__ = undefined;
	  /* functional template */
	  var __vue_is_functional_template__ = false;
	  /* component normalizer */
	  function __vue_normalize__(
	    template, style, script,
	    scope, functional, moduleIdentifier,
	    createInjector, createInjectorSSR
	  ) {
	    var component = (typeof script === 'function' ? script.options : script) || {};

	    // For security concerns, we use only base name in production mode.
	    component.__file = "/home/user/erpnext-pro/erp-next/apps/frappe/frappe/public/js/frappe/file_uploader/ProgressRing.vue";

	    if (!component.render) {
	      component.render = template.render;
	      component.staticRenderFns = template.staticRenderFns;
	      component._compiled = true;

	      if (functional) { component.functional = true; }
	    }

	    component._scopeId = scope;

	    {
	      var hook;
	      if (style) {
	        hook = function(context) {
	          style.call(this, createInjector(context));
	        };
	      }

	      if (hook !== undefined) {
	        if (component.functional) {
	          // register for functional component in vue file
	          var originalRender = component.render;
	          component.render = function renderWithStyleInjection(h, context) {
	            hook.call(context);
	            return originalRender(h, context)
	          };
	        } else {
	          // inject component registration as beforeCreate hook
	          var existing = component.beforeCreate;
	          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
	        }
	      }
	    }

	    return component
	  }
	  /* style inject */
	  function __vue_create_injector__() {
	    var head = document.head || document.getElementsByTagName('head')[0];
	    var styles = __vue_create_injector__.styles || (__vue_create_injector__.styles = {});
	    var isOldIE =
	      typeof navigator !== 'undefined' &&
	      /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

	    return function addStyle(id, css) {
	      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) { return } // SSR styles are present.

	      var group = isOldIE ? css.media || 'default' : id;
	      var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });

	      if (!style.ids.includes(id)) {
	        var code = css.source;
	        var index = style.ids.length;

	        style.ids.push(id);

	        if (isOldIE) {
	          style.element = style.element || document.querySelector('style[data-group=' + group + ']');
	        }

	        if (!style.element) {
	          var el = style.element = document.createElement('style');
	          el.type = 'text/css';

	          if (css.media) { el.setAttribute('media', css.media); }
	          if (isOldIE) {
	            el.setAttribute('data-group', group);
	            el.setAttribute('data-next-index', '0');
	          }

	          head.appendChild(el);
	        }

	        if (isOldIE) {
	          index = parseInt(style.element.getAttribute('data-next-index'));
	          style.element.setAttribute('data-next-index', index + 1);
	        }

	        if (style.element.styleSheet) {
	          style.parts.push(code);
	          style.element.styleSheet.cssText = style.parts
	            .filter(Boolean)
	            .join('\n');
	        } else {
	          var textNode = document.createTextNode(code);
	          var nodes = style.element.childNodes;
	          if (nodes[index]) { style.element.removeChild(nodes[index]); }
	          if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }
	          else { style.element.appendChild(textNode); }
	        }
	      }
	    }
	  }
	  /* style inject SSR */
	  

	  
	  var ProgressRing = __vue_normalize__(
	    { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
	    __vue_inject_styles__,
	    __vue_script__,
	    __vue_scope_id__,
	    __vue_is_functional_template__,
	    __vue_module_identifier__,
	    __vue_create_injector__,
	    undefined
	  );

	//
	var script$1 = {
		name: 'FilePreview',
		props: ['file'],
		components: {
			ProgressRing: ProgressRing
		},
		data: function data() {
			return {
				src: null
			}
		},
		mounted: function mounted() {
			var this$1 = this;

			if (this.is_image) {
				if (window.FileReader) {
					var fr = new FileReader();
					fr.onload = function () { return this$1.src = fr.result; };
					fr.readAsDataURL(this.file.file_obj);
				}
			}
		},
		filters: {
			file_size: function file_size(value) {
				return frappe.form.formatters.FileSize(value);
			},
			file_name: function file_name(value) {
				return value;
				// return frappe.utils.file_name_ellipsis(value, 9);
			}
		},
		computed: {
			private_icon: function private_icon() {
				return frappe.utils.icon(this.is_private ? 'lock' : 'unlock');
			},
			is_private: function is_private() {
				return this.file.doc ? this.file.doc.is_private : this.file.private;
			},
			uploaded: function uploaded() {
				return this.file.total && this.file.total === this.file.progress && !this.file.failed;
			},
			is_image: function is_image() {
				return this.file.file_obj.type.startsWith('image');
			},
			progress: function progress() {
				var value = Math.round((this.file.progress * 100) / this.file.total);
				if (isNaN(value)) {
					value = 0;
				}
				return value;
			}
		}
	};

	/* script */
	            var __vue_script__$1 = script$1;
	            
	/* template */
	var __vue_render__$1 = function() {
	  var _vm = this;
	  var _h = _vm.$createElement;
	  var _c = _vm._self._c || _h;
	  return _c("div", { staticClass: "file-preview" }, [
	    _c("div", { staticClass: "file-icon" }, [
	      _vm.is_image
	        ? _c("img", { attrs: { src: _vm.src, alt: _vm.file.name } })
	        : _c("div", {
	            staticClass: "fallback",
	            domProps: { innerHTML: _vm._s(_vm.frappe.utils.icon("file", "md")) }
	          })
	    ]),
	    _vm._v(" "),
	    _c("div", [
	      _c("div", [
	        _vm.file.doc
	          ? _c(
	              "a",
	              {
	                staticClass: "flex",
	                attrs: { href: _vm.file.doc.file_url, target: "_blank" }
	              },
	              [
	                _c("span", { staticClass: "file-name" }, [
	                  _vm._v(_vm._s(_vm._f("file_name")(_vm.file.name)))
	                ]),
	                _vm._v(" "),
	                _c("div", {
	                  staticClass: "ml-2",
	                  domProps: { innerHTML: _vm._s(_vm.private_icon) }
	                })
	              ]
	            )
	          : _c("span", { staticClass: "flex" }, [
	              _c("span", { staticClass: "file-name" }, [
	                _vm._v(_vm._s(_vm._f("file_name")(_vm.file.name)))
	              ]),
	              _vm._v(" "),
	              _c(
	                "button",
	                {
	                  staticClass: "ml-2 btn-reset",
	                  attrs: { title: _vm.__("Toggle Public/Private") },
	                  on: {
	                    click: function($event) {
	                      return _vm.$emit("toggle_private")
	                    }
	                  }
	                },
	                [
	                  _c("div", {
	                    domProps: { innerHTML: _vm._s(_vm.private_icon) }
	                  })
	                ]
	              )
	            ])
	      ]),
	      _vm._v(" "),
	      _c("div", [
	        _c("span", { staticClass: "file-size" }, [
	          _vm._v(
	            "\n\t\t\t\t" +
	              _vm._s(_vm._f("file_size")(_vm.file.file_obj.size)) +
	              "\n\t\t\t"
	          )
	        ])
	      ])
	    ]),
	    _vm._v(" "),
	    _c(
	      "div",
	      { staticClass: "file-actions" },
	      [
	        _c("ProgressRing", {
	          directives: [
	            {
	              name: "show",
	              rawName: "v-show",
	              value: _vm.file.uploading && !_vm.uploaded,
	              expression: "file.uploading && !uploaded"
	            }
	          ],
	          attrs: {
	            primary: "var(--primary-color)",
	            secondary: "var(--gray-200)",
	            radius: "24",
	            progress: _vm.progress,
	            stroke: "3"
	          }
	        }),
	        _vm._v(" "),
	        _vm.uploaded
	          ? _c("div", {
	              domProps: {
	                innerHTML: _vm._s(_vm.frappe.utils.icon("solid-success", "lg"))
	              }
	            })
	          : _vm._e(),
	        _vm._v(" "),
	        _vm.file.failed
	          ? _c("div", {
	              domProps: {
	                innerHTML: _vm._s(_vm.frappe.utils.icon("solid-red", "lg"))
	              }
	            })
	          : _vm._e(),
	        _vm._v(" "),
	        !_vm.uploaded && !_vm.file.uploading
	          ? _c("button", {
	              staticClass: "btn",
	              domProps: {
	                innerHTML: _vm._s(_vm.frappe.utils.icon("delete", "md"))
	              },
	              on: {
	                click: function($event) {
	                  return _vm.$emit("remove")
	                }
	              }
	            })
	          : _vm._e()
	      ],
	      1
	    )
	  ])
	};
	var __vue_staticRenderFns__$1 = [];
	__vue_render__$1._withStripped = true;

	  /* style */
	  var __vue_inject_styles__$1 = function (inject) {
	    if (!inject) { return }
	    inject("data-v-11d5dd1a_0", { source: "\n.file-preview {\n\tdisplay: flex;\n\talign-items: center;\n\tpadding: 0.75rem;\n\tborder: 1px solid transparent;\n}\n.file-preview + .file-preview {\n\tborder-top-color: var(--border-color);\n}\n.file-preview:hover {\n\tbackground-color: var(--bg-color);\n\tborder-color: var(--dark-border-color);\n\tborder-radius: var(--border-radius);\n}\n.file-preview:hover + .file-preview {\n\tborder-top-color: transparent;\n}\n.file-icon {\n\tborder-radius: var(--border-radius);\n\twidth: 2.625rem;\n\theight: 2.625rem;\n\toverflow: hidden;\n\tmargin-right: var(--margin-md);\n\tflex-shrink: 0;\n}\n.file-icon img {\n\twidth: 100%;\n\theight: 100%;\n\tobject-fit: cover;\n}\n.file-icon .fallback {\n\twidth: 100%;\n\theight: 100%;\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tborder: 1px solid var(--border-color);\n\tborder-radius: var(--border-radius);\n}\n.file-name {\n\tfont-size: var(--text-base);\n\tfont-weight: var(--text-bold);\n\tcolor: var(--text-color);\n\tdisplay: -webkit-box;\n\t-webkit-line-clamp: 1;\n\t-webkit-box-orient: vertical;\n\toverflow: hidden;\n}\n.file-size {\n\tfont-size: var(--text-sm);\n\tcolor: var(--text-light);\n}\n.file-actions {\n\twidth: 3rem;\n\tflex-shrink: 0;\n\tmargin-left: auto;\n\ttext-align: center;\n}\n.file-actions .btn {\n\tpadding: var(--padding-xs);\n\tbox-shadow: none;\n}\n", map: {"version":3,"sources":["/home/user/erpnext-pro/erp-next/apps/frappe/frappe/public/js/frappe/file_uploader/FilePreview.vue"],"names":[],"mappings":";AAuGA;CACA,aAAA;CACA,mBAAA;CACA,gBAAA;CACA,6BAAA;AACA;AAEA;CACA,qCAAA;AACA;AAEA;CACA,iCAAA;CACA,sCAAA;CACA,mCAAA;AACA;AAEA;CACA,6BAAA;AACA;AAEA;CACA,mCAAA;CACA,eAAA;CACA,gBAAA;CACA,gBAAA;CACA,8BAAA;CACA,cAAA;AACA;AAEA;CACA,WAAA;CACA,YAAA;CACA,iBAAA;AACA;AAEA;CACA,WAAA;CACA,YAAA;CACA,aAAA;CACA,mBAAA;CACA,uBAAA;CACA,qCAAA;CACA,mCAAA;AACA;AAEA;CACA,2BAAA;CACA,6BAAA;CACA,wBAAA;CACA,oBAAA;CACA,qBAAA;CACA,4BAAA;CACA,gBAAA;AACA;AAEA;CACA,yBAAA;CACA,wBAAA;AACA;AAEA;CACA,WAAA;CACA,cAAA;CACA,iBAAA;CACA,kBAAA;AACA;AAEA;CACA,0BAAA;CACA,gBAAA;AACA","file":"FilePreview.vue","sourcesContent":["<template>\n\t<div class=\"file-preview\">\n\t\t<div class=\"file-icon\">\n\t\t\t<img\n\t\t\t\tv-if=\"is_image\"\n\t\t\t\t:src=\"src\"\n\t\t\t\t:alt=\"file.name\"\n\t\t\t>\n\t\t\t<div class=\"fallback\" v-else v-html=\"frappe.utils.icon('file', 'md')\">\n\t\t\t</div>\n\t\t</div>\n\t\t<div>\n\t\t\t<div>\n\t\t\t\t<a class=\"flex\" :href=\"file.doc.file_url\" v-if=\"file.doc\" target=\"_blank\">\n\t\t\t\t\t<span class=\"file-name\">{{ file.name | file_name }}</span>\n\t\t\t\t\t<div class=\"ml-2\" v-html=\"private_icon\"></div>\n\t\t\t\t</a>\n\t\t\t\t<span class=\"flex\" v-else>\n\t\t\t\t\t<span class=\"file-name\">{{ file.name | file_name }}</span>\n\t\t\t\t\t<button class=\"ml-2 btn-reset\" @click=\"$emit('toggle_private')\" :title=\"__('Toggle Public/Private')\">\n\t\t\t\t\t\t<div v-html=\"private_icon\"></div>\n\t\t\t\t\t</button>\n\t\t\t\t</span>\n\t\t\t</div>\n\n\t\t\t<div>\n\t\t\t\t<span class=\"file-size\">\n\t\t\t\t\t{{ file.file_obj.size | file_size }}\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"file-actions\">\n\t\t\t<ProgressRing\n\t\t\t\tv-show=\"file.uploading && !uploaded\"\n\t\t\t\tprimary=\"var(--primary-color)\"\n\t\t\t\tsecondary=\"var(--gray-200)\"\n\t\t\t\tradius=\"24\"\n\t\t\t\t:progress=\"progress\"\n\t\t\t\tstroke=\"3\"\n\t\t\t/>\n\t\t\t<div v-if=\"uploaded\" v-html=\"frappe.utils.icon('solid-success', 'lg')\"></div>\n\t\t\t<div v-if=\"file.failed\" v-html=\"frappe.utils.icon('solid-red', 'lg')\"></div>\n\t\t\t<button v-if=\"!uploaded && !file.uploading\" class=\"btn\" @click=\"$emit('remove')\" v-html=\"frappe.utils.icon('delete', 'md')\"></button>\n\t\t</div>\n\t</div>\n</template>\n\n<script>\nimport ProgressRing from './ProgressRing.vue';\nexport default {\n\tname: 'FilePreview',\n\tprops: ['file'],\n\tcomponents: {\n\t\tProgressRing\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tsrc: null\n\t\t}\n\t},\n\tmounted() {\n\t\tif (this.is_image) {\n\t\t\tif (window.FileReader) {\n\t\t\t\tlet fr = new FileReader();\n\t\t\t\tfr.onload = () => this.src = fr.result;\n\t\t\t\tfr.readAsDataURL(this.file.file_obj);\n\t\t\t}\n\t\t}\n\t},\n\tfilters: {\n\t\tfile_size(value) {\n\t\t\treturn frappe.form.formatters.FileSize(value);\n\t\t},\n\t\tfile_name(value) {\n\t\t\treturn value;\n\t\t\t// return frappe.utils.file_name_ellipsis(value, 9);\n\t\t}\n\t},\n\tcomputed: {\n\t\tprivate_icon() {\n\t\t\treturn frappe.utils.icon(this.is_private ? 'lock' : 'unlock');\n\t\t},\n\t\tis_private() {\n\t\t\treturn this.file.doc ? this.file.doc.is_private : this.file.private;\n\t\t},\n\t\tuploaded() {\n\t\t\treturn this.file.total && this.file.total === this.file.progress && !this.file.failed;\n\t\t},\n\t\tis_image() {\n\t\t\treturn this.file.file_obj.type.startsWith('image');\n\t\t},\n\t\tprogress() {\n\t\t\tlet value = Math.round((this.file.progress * 100) / this.file.total);\n\t\t\tif (isNaN(value)) {\n\t\t\t\tvalue = 0;\n\t\t\t}\n\t\t\treturn value;\n\t\t}\n\t}\n}\n</script>\n\n<style>\n.file-preview {\n\tdisplay: flex;\n\talign-items: center;\n\tpadding: 0.75rem;\n\tborder: 1px solid transparent;\n}\n\n.file-preview + .file-preview {\n\tborder-top-color: var(--border-color);\n}\n\n.file-preview:hover {\n\tbackground-color: var(--bg-color);\n\tborder-color: var(--dark-border-color);\n\tborder-radius: var(--border-radius);\n}\n\n.file-preview:hover + .file-preview {\n\tborder-top-color: transparent;\n}\n\n.file-icon {\n\tborder-radius: var(--border-radius);\n\twidth: 2.625rem;\n\theight: 2.625rem;\n\toverflow: hidden;\n\tmargin-right: var(--margin-md);\n\tflex-shrink: 0;\n}\n\n.file-icon img {\n\twidth: 100%;\n\theight: 100%;\n\tobject-fit: cover;\n}\n\n.file-icon .fallback {\n\twidth: 100%;\n\theight: 100%;\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tborder: 1px solid var(--border-color);\n\tborder-radius: var(--border-radius);\n}\n\n.file-name {\n\tfont-size: var(--text-base);\n\tfont-weight: var(--text-bold);\n\tcolor: var(--text-color);\n\tdisplay: -webkit-box;\n\t-webkit-line-clamp: 1;\n\t-webkit-box-orient: vertical;\n\toverflow: hidden;\n}\n\n.file-size {\n\tfont-size: var(--text-sm);\n\tcolor: var(--text-light);\n}\n\n.file-actions {\n\twidth: 3rem;\n\tflex-shrink: 0;\n\tmargin-left: auto;\n\ttext-align: center;\n}\n\n.file-actions .btn {\n\tpadding: var(--padding-xs);\n\tbox-shadow: none;\n}\n</style>\n"]}, media: undefined });

	  };
	  /* scoped */
	  var __vue_scope_id__$1 = undefined;
	  /* module identifier */
	  var __vue_module_identifier__$1 = undefined;
	  /* functional template */
	  var __vue_is_functional_template__$1 = false;
	  /* component normalizer */
	  function __vue_normalize__$1(
	    template, style, script,
	    scope, functional, moduleIdentifier,
	    createInjector, createInjectorSSR
	  ) {
	    var component = (typeof script === 'function' ? script.options : script) || {};

	    // For security concerns, we use only base name in production mode.
	    component.__file = "/home/user/erpnext-pro/erp-next/apps/frappe/frappe/public/js/frappe/file_uploader/FilePreview.vue";

	    if (!component.render) {
	      component.render = template.render;
	      component.staticRenderFns = template.staticRenderFns;
	      component._compiled = true;

	      if (functional) { component.functional = true; }
	    }

	    component._scopeId = scope;

	    {
	      var hook;
	      if (style) {
	        hook = function(context) {
	          style.call(this, createInjector(context));
	        };
	      }

	      if (hook !== undefined) {
	        if (component.functional) {
	          // register for functional component in vue file
	          var originalRender = component.render;
	          component.render = function renderWithStyleInjection(h, context) {
	            hook.call(context);
	            return originalRender(h, context)
	          };
	        } else {
	          // inject component registration as beforeCreate hook
	          var existing = component.beforeCreate;
	          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
	        }
	      }
	    }

	    return component
	  }
	  /* style inject */
	  function __vue_create_injector__$1() {
	    var head = document.head || document.getElementsByTagName('head')[0];
	    var styles = __vue_create_injector__$1.styles || (__vue_create_injector__$1.styles = {});
	    var isOldIE =
	      typeof navigator !== 'undefined' &&
	      /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

	    return function addStyle(id, css) {
	      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) { return } // SSR styles are present.

	      var group = isOldIE ? css.media || 'default' : id;
	      var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });

	      if (!style.ids.includes(id)) {
	        var code = css.source;
	        var index = style.ids.length;

	        style.ids.push(id);

	        if (isOldIE) {
	          style.element = style.element || document.querySelector('style[data-group=' + group + ']');
	        }

	        if (!style.element) {
	          var el = style.element = document.createElement('style');
	          el.type = 'text/css';

	          if (css.media) { el.setAttribute('media', css.media); }
	          if (isOldIE) {
	            el.setAttribute('data-group', group);
	            el.setAttribute('data-next-index', '0');
	          }

	          head.appendChild(el);
	        }

	        if (isOldIE) {
	          index = parseInt(style.element.getAttribute('data-next-index'));
	          style.element.setAttribute('data-next-index', index + 1);
	        }

	        if (style.element.styleSheet) {
	          style.parts.push(code);
	          style.element.styleSheet.cssText = style.parts
	            .filter(Boolean)
	            .join('\n');
	        } else {
	          var textNode = document.createTextNode(code);
	          var nodes = style.element.childNodes;
	          if (nodes[index]) { style.element.removeChild(nodes[index]); }
	          if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }
	          else { style.element.appendChild(textNode); }
	        }
	      }
	    }
	  }
	  /* style inject SSR */
	  

	  
	  var FilePreview = __vue_normalize__$1(
	    { render: __vue_render__$1, staticRenderFns: __vue_staticRenderFns__$1 },
	    __vue_inject_styles__$1,
	    __vue_script__$1,
	    __vue_scope_id__$1,
	    __vue_is_functional_template__$1,
	    __vue_module_identifier__$1,
	    __vue_create_injector__$1,
	    undefined
	  );

	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//

	var script$2 = {
		name: "TreeNode",
		props: ["node", "selected_node"],
		components: {
			TreeNode: function () { return frappe.ui.components.TreeNode; }
		},
		computed: {
			icon: function icon() {
				var icons = {
					open: frappe.utils.icon("folder-open", "md"),
					closed: frappe.utils.icon("folder-normal", "md"),
					leaf: frappe.utils.icon("primitive-dot", "xs"),
					search: frappe.utils.icon("search")
				};

				if (this.node.by_search) { return icons.search; }
				if (this.node.is_leaf) { return icons.leaf; }
				if (this.node.open) { return icons.open; }
				return icons.closed;
			}
		}
	};

	/* script */
	            var __vue_script__$2 = script$2;
	            
	/* template */
	var __vue_render__$2 = function() {
	  var _vm = this;
	  var _h = _vm.$createElement;
	  var _c = _vm._self._c || _h;
	  return _c(
	    "div",
	    { staticClass: "tree-node", class: { opened: _vm.node.open } },
	    [
	      _c(
	        "span",
	        {
	          staticClass: "tree-link",
	          class: { active: _vm.node.value === _vm.selected_node.value },
	          attrs: { disabled: _vm.node.fetching },
	          on: {
	            click: function($event) {
	              return _vm.$emit("node-click", _vm.node)
	            }
	          }
	        },
	        [
	          _c("div", { domProps: { innerHTML: _vm._s(_vm.icon) } }),
	          _vm._v(" "),
	          _c("a", { staticClass: "tree-label" }, [
	            _vm._v(_vm._s(_vm.node.label))
	          ])
	        ]
	      ),
	      _vm._v(" "),
	      _c(
	        "ul",
	        {
	          directives: [
	            {
	              name: "show",
	              rawName: "v-show",
	              value: _vm.node.open,
	              expression: "node.open"
	            }
	          ],
	          staticClass: "tree-children"
	        },
	        [
	          _vm._l(_vm.node.children, function(n) {
	            return _c("TreeNode", {
	              key: n.value,
	              attrs: { node: n, selected_node: _vm.selected_node },
	              on: {
	                "node-click": function(n) {
	                  return _vm.$emit("node-click", n)
	                },
	                "load-more": function(n) {
	                  return _vm.$emit("load-more", n)
	                }
	              }
	            })
	          }),
	          _vm._v(" "),
	          _vm.node.has_more_children
	            ? _c(
	                "button",
	                {
	                  staticClass: "btn btn-xs btn-load-more",
	                  attrs: { disabled: _vm.node.children_loading },
	                  on: {
	                    click: function($event) {
	                      return _vm.$emit("load-more", _vm.node)
	                    }
	                  }
	                },
	                [
	                  _vm._v(
	                    "\n\t\t\t" +
	                      _vm._s(
	                        _vm.node.children_loading
	                          ? _vm.__("Loading...")
	                          : _vm.__("Load more")
	                      ) +
	                      "\n\t\t"
	                  )
	                ]
	              )
	            : _vm._e()
	        ],
	        2
	      )
	    ]
	  )
	};
	var __vue_staticRenderFns__$2 = [];
	__vue_render__$2._withStripped = true;

	  /* style */
	  var __vue_inject_styles__$2 = function (inject) {
	    if (!inject) { return }
	    inject("data-v-3f0b42c6_0", { source: "\n.btn-load-more[data-v-3f0b42c6] {\n\tmargin-left: 1.6rem;\n\tmargin-top: 0.5rem;\n}\n", map: {"version":3,"sources":["/home/user/erpnext-pro/erp-next/apps/frappe/frappe/public/js/frappe/file_uploader/TreeNode.vue"],"names":[],"mappings":";AAwDA;CACA,mBAAA;CACA,kBAAA;AACA","file":"TreeNode.vue","sourcesContent":["<template>\n\t<div class=\"tree-node\" :class=\"{ opened: node.open }\">\n\t\t<span\n\t\t\tclass=\"tree-link\"\n\t\t\t@click=\"$emit('node-click', node)\"\n\t\t\t:class=\"{ active: node.value === selected_node.value }\"\n\t\t\t:disabled=\"node.fetching\"\n\t\t>\n\t\t\t<div v-html=\"icon\"></div>\n\t\t\t<a class=\"tree-label\">{{ node.label }}</a>\n\t\t</span>\n\t\t<ul class=\"tree-children\" v-show=\"node.open\">\n\t\t\t<TreeNode\n\t\t\t\tv-for=\"n in node.children\"\n\t\t\t\t:key=\"n.value\"\n\t\t\t\t:node=\"n\"\n\t\t\t\t:selected_node=\"selected_node\"\n\t\t\t\t@node-click=\"n => $emit('node-click', n)\"\n\t\t\t\t@load-more=\"n => $emit('load-more', n)\"\n\t\t\t/>\n\t\t\t<button\n\t\t\t\tclass=\"btn btn-xs btn-load-more\"\n\t\t\t\tv-if=\"node.has_more_children\"\n\t\t\t\t@click=\"$emit('load-more', node)\"\n\t\t\t\t:disabled=\"node.children_loading\"\n\t\t\t>\n\t\t\t\t{{ node.children_loading ? __(\"Loading...\") : __(\"Load more\") }}\n\t\t\t</button>\n\t\t</ul>\n\t</div>\n</template>\n<script>\nexport default {\n\tname: \"TreeNode\",\n\tprops: [\"node\", \"selected_node\"],\n\tcomponents: {\n\t\tTreeNode: () => frappe.ui.components.TreeNode\n\t},\n\tcomputed: {\n\t\ticon() {\n\t\t\tlet icons = {\n\t\t\t\topen: frappe.utils.icon(\"folder-open\", \"md\"),\n\t\t\t\tclosed: frappe.utils.icon(\"folder-normal\", \"md\"),\n\t\t\t\tleaf: frappe.utils.icon(\"primitive-dot\", \"xs\"),\n\t\t\t\tsearch: frappe.utils.icon(\"search\")\n\t\t\t};\n\n\t\t\tif (this.node.by_search) return icons.search;\n\t\t\tif (this.node.is_leaf) return icons.leaf;\n\t\t\tif (this.node.open) return icons.open;\n\t\t\treturn icons.closed;\n\t\t}\n\t}\n};\n</script>\n<style scoped>\n.btn-load-more {\n\tmargin-left: 1.6rem;\n\tmargin-top: 0.5rem;\n}\n</style>\n"]}, media: undefined });

	  };
	  /* scoped */
	  var __vue_scope_id__$2 = "data-v-3f0b42c6";
	  /* module identifier */
	  var __vue_module_identifier__$2 = undefined;
	  /* functional template */
	  var __vue_is_functional_template__$2 = false;
	  /* component normalizer */
	  function __vue_normalize__$2(
	    template, style, script,
	    scope, functional, moduleIdentifier,
	    createInjector, createInjectorSSR
	  ) {
	    var component = (typeof script === 'function' ? script.options : script) || {};

	    // For security concerns, we use only base name in production mode.
	    component.__file = "/home/user/erpnext-pro/erp-next/apps/frappe/frappe/public/js/frappe/file_uploader/TreeNode.vue";

	    if (!component.render) {
	      component.render = template.render;
	      component.staticRenderFns = template.staticRenderFns;
	      component._compiled = true;

	      if (functional) { component.functional = true; }
	    }

	    component._scopeId = scope;

	    {
	      var hook;
	      if (style) {
	        hook = function(context) {
	          style.call(this, createInjector(context));
	        };
	      }

	      if (hook !== undefined) {
	        if (component.functional) {
	          // register for functional component in vue file
	          var originalRender = component.render;
	          component.render = function renderWithStyleInjection(h, context) {
	            hook.call(context);
	            return originalRender(h, context)
	          };
	        } else {
	          // inject component registration as beforeCreate hook
	          var existing = component.beforeCreate;
	          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
	        }
	      }
	    }

	    return component
	  }
	  /* style inject */
	  function __vue_create_injector__$2() {
	    var head = document.head || document.getElementsByTagName('head')[0];
	    var styles = __vue_create_injector__$2.styles || (__vue_create_injector__$2.styles = {});
	    var isOldIE =
	      typeof navigator !== 'undefined' &&
	      /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

	    return function addStyle(id, css) {
	      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) { return } // SSR styles are present.

	      var group = isOldIE ? css.media || 'default' : id;
	      var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });

	      if (!style.ids.includes(id)) {
	        var code = css.source;
	        var index = style.ids.length;

	        style.ids.push(id);

	        if (isOldIE) {
	          style.element = style.element || document.querySelector('style[data-group=' + group + ']');
	        }

	        if (!style.element) {
	          var el = style.element = document.createElement('style');
	          el.type = 'text/css';

	          if (css.media) { el.setAttribute('media', css.media); }
	          if (isOldIE) {
	            el.setAttribute('data-group', group);
	            el.setAttribute('data-next-index', '0');
	          }

	          head.appendChild(el);
	        }

	        if (isOldIE) {
	          index = parseInt(style.element.getAttribute('data-next-index'));
	          style.element.setAttribute('data-next-index', index + 1);
	        }

	        if (style.element.styleSheet) {
	          style.parts.push(code);
	          style.element.styleSheet.cssText = style.parts
	            .filter(Boolean)
	            .join('\n');
	        } else {
	          var textNode = document.createTextNode(code);
	          var nodes = style.element.childNodes;
	          if (nodes[index]) { style.element.removeChild(nodes[index]); }
	          if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }
	          else { style.element.appendChild(textNode); }
	        }
	      }
	    }
	  }
	  /* style inject SSR */
	  

	  
	  var TreeNode = __vue_normalize__$2(
	    { render: __vue_render__$2, staticRenderFns: __vue_staticRenderFns__$2 },
	    __vue_inject_styles__$2,
	    __vue_script__$2,
	    __vue_scope_id__$2,
	    __vue_is_functional_template__$2,
	    __vue_module_identifier__$2,
	    __vue_create_injector__$2,
	    undefined
	  );

	//

	var script$3 = {
		name: "FileBrowser",
		components: {
			TreeNode: TreeNode
		},
		data: function data() {
			return {
				node: {
					label: __("Home"),
					value: "Home",
					children: [],
					children_start: 0,
					children_loading: false,
					is_leaf: false,
					fetching: false,
					fetched: false,
					open: false,
					filtered: true
				},
				selected_node: {},
				search_text: "",
				page_length: 10
			};
		},
		mounted: function mounted() {
			this.toggle_node(this.node);
		},
		methods: {
			toggle_node: function toggle_node(node) {
				var this$1 = this;

				if (!node.fetched && !node.is_leaf) {
					node.fetching = true;
					node.children_start = 0;
					node.children_loading = false;
					this.get_files_in_folder(node.value, 0).then(
						function (ref) {
							var files = ref.files;
							var has_more = ref.has_more;

							node.open = true;
							node.children = files;
							node.fetched = true;
							node.fetching = false;
							node.children_start += this$1.page_length;
							node.has_more_children = has_more;
						}
					);
				} else {
					node.open = !node.open;
					this.select_node(node);
				}
			},
			load_more: function load_more(node) {
				var this$1 = this;

				if (node.has_more_children) {
					var start = node.children_start;
					node.children_loading = true;
					this.get_files_in_folder(node.value, start).then(
						function (ref) {
							var files = ref.files;
							var has_more = ref.has_more;

							node.children = node.children.concat(files);
							node.children_start += this$1.page_length;
							node.has_more_children = has_more;
							node.children_loading = false;
						}
					);
				}
			},
			select_node: function select_node(node) {
				if (node.is_leaf) {
					this.selected_node = node;
				}
			},
			get_files_in_folder: function get_files_in_folder(folder, start) {
				var this$1 = this;

				return frappe
					.call("frappe.core.doctype.file.file.get_files_in_folder", {
						folder: folder,
						start: start,
						page_length: this.page_length
					})
					.then(function (r) {
						var ref = r.message || {};
						var files = ref.files; if ( files === void 0 ) files = [];
						var has_more = ref.has_more; if ( has_more === void 0 ) has_more = false;
						files.sort(function (a, b) {
							if (a.is_folder && b.is_folder) {
								return a.modified < b.modified ? -1 : 1;
							}
							if (a.is_folder) {
								return -1;
							}
							if (b.is_folder) {
								return 1;
							}
							return 0;
						});
						files = files.map(function (file) { return this$1.make_file_node(file); });
						return { files: files, has_more: has_more };
					});
			},
			search_by_name: frappe.utils.debounce(function() {
				var this$1 = this;

				if (this.search_text === "") {
					this.node = this.folder_node;
					return;
				}
				if (this.search_text.length < 3) { return; }
				frappe
					.call(
						"frappe.core.doctype.file.file.get_files_by_search_text",
						{
							text: this.search_text
						}
					)
					.then(function (r) {
						var files = r.message || [];
						files = files.map(function (file) { return this$1.make_file_node(file); });
						if (!this$1.folder_node) {
							this$1.folder_node = this$1.node;
						}
						this$1.node = {
							label: __("Search Results"),
							value: "",
							children: files,
							by_search: true,
							open: true,
							filtered: true
						};
					});
			}, 300),
			make_file_node: function make_file_node(file) {
				var filename = file.file_name || file.name;
				var label = frappe.utils.file_name_ellipsis(filename, 40);
				return {
					label: label,
					filename: filename,
					file_url: file.file_url,
					value: file.name,
					is_leaf: !file.is_folder,
					fetched: !file.is_folder, // fetched if node is leaf
					children: [],
					children_loading: false,
					children_start: 0,
					open: false,
					fetching: false,
					filtered: true
				};
			}
		}
	};

	/* script */
	            var __vue_script__$3 = script$3;
	            
	/* template */
	var __vue_render__$3 = function() {
	  var _vm = this;
	  var _h = _vm.$createElement;
	  var _c = _vm._self._c || _h;
	  return _c("div", { staticClass: "file-browser" }, [
	    _c("div", [
	      _c(
	        "a",
	        {
	          staticClass: "text-muted text-medium",
	          attrs: { href: "" },
	          on: {
	            click: function($event) {
	              $event.preventDefault();
	              return _vm.$emit("hide-browser")
	            }
	          }
	        },
	        [
	          _vm._v(
	            "\n\t\t\t" + _vm._s(_vm.__("← Back to upload files")) + "\n\t\t"
	          )
	        ]
	      )
	    ]),
	    _vm._v(" "),
	    _c(
	      "div",
	      { staticClass: "file-browser-list" },
	      [
	        _c("div", { staticClass: "file-filter" }, [
	          _c("input", {
	            directives: [
	              {
	                name: "model",
	                rawName: "v-model",
	                value: _vm.search_text,
	                expression: "search_text"
	              }
	            ],
	            staticClass: "form-control input-xs",
	            attrs: {
	              type: "search",
	              placeholder: _vm.__("Search by filename or extension")
	            },
	            domProps: { value: _vm.search_text },
	            on: {
	              input: [
	                function($event) {
	                  if ($event.target.composing) {
	                    return
	                  }
	                  _vm.search_text = $event.target.value;
	                },
	                _vm.search_by_name
	              ]
	            }
	          })
	        ]),
	        _vm._v(" "),
	        _c("TreeNode", {
	          staticClass: "tree with-skeleton",
	          attrs: { node: _vm.node, selected_node: _vm.selected_node },
	          on: {
	            "node-click": function(n) {
	              return _vm.toggle_node(n)
	            },
	            "load-more": function(n) {
	              return _vm.load_more(n)
	            }
	          }
	        })
	      ],
	      1
	    )
	  ])
	};
	var __vue_staticRenderFns__$3 = [];
	__vue_render__$3._withStripped = true;

	  /* style */
	  var __vue_inject_styles__$3 = function (inject) {
	    if (!inject) { return }
	    inject("data-v-c1219b2a_0", { source: "\n.file-browser-list {\n\theight: 300px;\n\toverflow: hidden;\n\tmargin-top: 10px;\n}\n.file-filter {\n\tpadding: 3px;\n}\n.tree {\n\toverflow: auto;\n\theight: 100%;\n\tpadding-left: 0;\n\tpadding-right: 0;\n\tpadding-bottom: 4rem;\n}\n", map: {"version":3,"sources":["/home/user/erpnext-pro/erp-next/apps/frappe/frappe/public/js/frappe/file_uploader/FileBrowser.vue"],"names":[],"mappings":";AAkLA;CACA,aAAA;CACA,gBAAA;CACA,gBAAA;AACA;AAEA;CACA,YAAA;AACA;AAEA;CACA,cAAA;CACA,YAAA;CACA,eAAA;CACA,gBAAA;CACA,oBAAA;AACA","file":"FileBrowser.vue","sourcesContent":["<template>\n\t<div class=\"file-browser\">\n\t\t<div>\n\t\t\t<a\n\t\t\t\thref=\"\"\n\t\t\t\tclass=\"text-muted text-medium\"\n\t\t\t\t@click.prevent=\"$emit('hide-browser')\"\n\t\t\t>\n\t\t\t\t{{ __(\"← Back to upload files\") }}\n\t\t\t</a>\n\t\t</div>\n\t\t<div class=\"file-browser-list\">\n\t\t\t<div class=\"file-filter\">\n\t\t\t\t<input\n\t\t\t\t\ttype=\"search\"\n\t\t\t\t\tclass=\"form-control input-xs\"\n\t\t\t\t\t:placeholder=\"__('Search by filename or extension')\"\n\t\t\t\t\tv-model=\"search_text\"\n\t\t\t\t\t@input=\"search_by_name\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<TreeNode\n\t\t\t\tclass=\"tree with-skeleton\"\n\t\t\t\t:node=\"node\"\n\t\t\t\t:selected_node=\"selected_node\"\n\t\t\t\t@node-click=\"n => toggle_node(n)\"\n\t\t\t\t@load-more=\"n => load_more(n)\"\n\t\t\t/>\n\t\t</div>\n\t</div>\n</template>\n<script>\nimport TreeNode from \"./TreeNode.vue\";\n\nexport default {\n\tname: \"FileBrowser\",\n\tcomponents: {\n\t\tTreeNode\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tnode: {\n\t\t\t\tlabel: __(\"Home\"),\n\t\t\t\tvalue: \"Home\",\n\t\t\t\tchildren: [],\n\t\t\t\tchildren_start: 0,\n\t\t\t\tchildren_loading: false,\n\t\t\t\tis_leaf: false,\n\t\t\t\tfetching: false,\n\t\t\t\tfetched: false,\n\t\t\t\topen: false,\n\t\t\t\tfiltered: true\n\t\t\t},\n\t\t\tselected_node: {},\n\t\t\tsearch_text: \"\",\n\t\t\tpage_length: 10\n\t\t};\n\t},\n\tmounted() {\n\t\tthis.toggle_node(this.node);\n\t},\n\tmethods: {\n\t\ttoggle_node(node) {\n\t\t\tif (!node.fetched && !node.is_leaf) {\n\t\t\t\tnode.fetching = true;\n\t\t\t\tnode.children_start = 0;\n\t\t\t\tnode.children_loading = false;\n\t\t\t\tthis.get_files_in_folder(node.value, 0).then(\n\t\t\t\t\t({ files, has_more }) => {\n\t\t\t\t\t\tnode.open = true;\n\t\t\t\t\t\tnode.children = files;\n\t\t\t\t\t\tnode.fetched = true;\n\t\t\t\t\t\tnode.fetching = false;\n\t\t\t\t\t\tnode.children_start += this.page_length;\n\t\t\t\t\t\tnode.has_more_children = has_more;\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tnode.open = !node.open;\n\t\t\t\tthis.select_node(node);\n\t\t\t}\n\t\t},\n\t\tload_more(node) {\n\t\t\tif (node.has_more_children) {\n\t\t\t\tlet start = node.children_start;\n\t\t\t\tnode.children_loading = true;\n\t\t\t\tthis.get_files_in_folder(node.value, start).then(\n\t\t\t\t\t({ files, has_more }) => {\n\t\t\t\t\t\tnode.children = node.children.concat(files);\n\t\t\t\t\t\tnode.children_start += this.page_length;\n\t\t\t\t\t\tnode.has_more_children = has_more;\n\t\t\t\t\t\tnode.children_loading = false;\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t\tselect_node(node) {\n\t\t\tif (node.is_leaf) {\n\t\t\t\tthis.selected_node = node;\n\t\t\t}\n\t\t},\n\t\tget_files_in_folder(folder, start) {\n\t\t\treturn frappe\n\t\t\t\t.call(\"frappe.core.doctype.file.file.get_files_in_folder\", {\n\t\t\t\t\tfolder,\n\t\t\t\t\tstart,\n\t\t\t\t\tpage_length: this.page_length\n\t\t\t\t})\n\t\t\t\t.then(r => {\n\t\t\t\t\tlet { files = [], has_more = false } = r.message || {};\n\t\t\t\t\tfiles.sort((a, b) => {\n\t\t\t\t\t\tif (a.is_folder && b.is_folder) {\n\t\t\t\t\t\t\treturn a.modified < b.modified ? -1 : 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (a.is_folder) {\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (b.is_folder) {\n\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t});\n\t\t\t\t\tfiles = files.map(file => this.make_file_node(file));\n\t\t\t\t\treturn { files, has_more };\n\t\t\t\t});\n\t\t},\n\t\tsearch_by_name: frappe.utils.debounce(function() {\n\t\t\tif (this.search_text === \"\") {\n\t\t\t\tthis.node = this.folder_node;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this.search_text.length < 3) return;\n\t\t\tfrappe\n\t\t\t\t.call(\n\t\t\t\t\t\"frappe.core.doctype.file.file.get_files_by_search_text\",\n\t\t\t\t\t{\n\t\t\t\t\t\ttext: this.search_text\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t\t.then(r => {\n\t\t\t\t\tlet files = r.message || [];\n\t\t\t\t\tfiles = files.map(file => this.make_file_node(file));\n\t\t\t\t\tif (!this.folder_node) {\n\t\t\t\t\t\tthis.folder_node = this.node;\n\t\t\t\t\t}\n\t\t\t\t\tthis.node = {\n\t\t\t\t\t\tlabel: __(\"Search Results\"),\n\t\t\t\t\t\tvalue: \"\",\n\t\t\t\t\t\tchildren: files,\n\t\t\t\t\t\tby_search: true,\n\t\t\t\t\t\topen: true,\n\t\t\t\t\t\tfiltered: true\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t}, 300),\n\t\tmake_file_node(file) {\n\t\t\tlet filename = file.file_name || file.name;\n\t\t\tlet label = frappe.utils.file_name_ellipsis(filename, 40);\n\t\t\treturn {\n\t\t\t\tlabel: label,\n\t\t\t\tfilename: filename,\n\t\t\t\tfile_url: file.file_url,\n\t\t\t\tvalue: file.name,\n\t\t\t\tis_leaf: !file.is_folder,\n\t\t\t\tfetched: !file.is_folder, // fetched if node is leaf\n\t\t\t\tchildren: [],\n\t\t\t\tchildren_loading: false,\n\t\t\t\tchildren_start: 0,\n\t\t\t\topen: false,\n\t\t\t\tfetching: false,\n\t\t\t\tfiltered: true\n\t\t\t};\n\t\t}\n\t}\n};\n</script>\n\n<style>\n.file-browser-list {\n\theight: 300px;\n\toverflow: hidden;\n\tmargin-top: 10px;\n}\n\n.file-filter {\n\tpadding: 3px;\n}\n\n.tree {\n\toverflow: auto;\n\theight: 100%;\n\tpadding-left: 0;\n\tpadding-right: 0;\n\tpadding-bottom: 4rem;\n}\n</style>\n"]}, media: undefined });

	  };
	  /* scoped */
	  var __vue_scope_id__$3 = undefined;
	  /* module identifier */
	  var __vue_module_identifier__$3 = undefined;
	  /* functional template */
	  var __vue_is_functional_template__$3 = false;
	  /* component normalizer */
	  function __vue_normalize__$3(
	    template, style, script,
	    scope, functional, moduleIdentifier,
	    createInjector, createInjectorSSR
	  ) {
	    var component = (typeof script === 'function' ? script.options : script) || {};

	    // For security concerns, we use only base name in production mode.
	    component.__file = "/home/user/erpnext-pro/erp-next/apps/frappe/frappe/public/js/frappe/file_uploader/FileBrowser.vue";

	    if (!component.render) {
	      component.render = template.render;
	      component.staticRenderFns = template.staticRenderFns;
	      component._compiled = true;

	      if (functional) { component.functional = true; }
	    }

	    component._scopeId = scope;

	    {
	      var hook;
	      if (style) {
	        hook = function(context) {
	          style.call(this, createInjector(context));
	        };
	      }

	      if (hook !== undefined) {
	        if (component.functional) {
	          // register for functional component in vue file
	          var originalRender = component.render;
	          component.render = function renderWithStyleInjection(h, context) {
	            hook.call(context);
	            return originalRender(h, context)
	          };
	        } else {
	          // inject component registration as beforeCreate hook
	          var existing = component.beforeCreate;
	          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
	        }
	      }
	    }

	    return component
	  }
	  /* style inject */
	  function __vue_create_injector__$3() {
	    var head = document.head || document.getElementsByTagName('head')[0];
	    var styles = __vue_create_injector__$3.styles || (__vue_create_injector__$3.styles = {});
	    var isOldIE =
	      typeof navigator !== 'undefined' &&
	      /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

	    return function addStyle(id, css) {
	      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) { return } // SSR styles are present.

	      var group = isOldIE ? css.media || 'default' : id;
	      var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });

	      if (!style.ids.includes(id)) {
	        var code = css.source;
	        var index = style.ids.length;

	        style.ids.push(id);

	        if (isOldIE) {
	          style.element = style.element || document.querySelector('style[data-group=' + group + ']');
	        }

	        if (!style.element) {
	          var el = style.element = document.createElement('style');
	          el.type = 'text/css';

	          if (css.media) { el.setAttribute('media', css.media); }
	          if (isOldIE) {
	            el.setAttribute('data-group', group);
	            el.setAttribute('data-next-index', '0');
	          }

	          head.appendChild(el);
	        }

	        if (isOldIE) {
	          index = parseInt(style.element.getAttribute('data-next-index'));
	          style.element.setAttribute('data-next-index', index + 1);
	        }

	        if (style.element.styleSheet) {
	          style.parts.push(code);
	          style.element.styleSheet.cssText = style.parts
	            .filter(Boolean)
	            .join('\n');
	        } else {
	          var textNode = document.createTextNode(code);
	          var nodes = style.element.childNodes;
	          if (nodes[index]) { style.element.removeChild(nodes[index]); }
	          if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }
	          else { style.element.appendChild(textNode); }
	        }
	      }
	    }
	  }
	  /* style inject SSR */
	  

	  
	  var FileBrowser = __vue_normalize__$3(
	    { render: __vue_render__$3, staticRenderFns: __vue_staticRenderFns__$3 },
	    __vue_inject_styles__$3,
	    __vue_script__$3,
	    __vue_scope_id__$3,
	    __vue_is_functional_template__$3,
	    __vue_module_identifier__$3,
	    __vue_create_injector__$3,
	    undefined
	  );

	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//

	var script$4 = {
		name: 'WebLink',
		data: function data() {
			return {
				url: '',
			}
		}
	};

	/* script */
	            var __vue_script__$4 = script$4;
	            
	/* template */
	var __vue_render__$4 = function() {
	  var _vm = this;
	  var _h = _vm.$createElement;
	  var _c = _vm._self._c || _h;
	  return _c("div", { staticClass: "file-web-link margin-bottom" }, [
	    _c(
	      "a",
	      {
	        staticClass: "text-muted text-medium",
	        attrs: { href: "" },
	        on: {
	          click: function($event) {
	            $event.preventDefault();
	            return _vm.$emit("hide-web-link")
	          }
	        }
	      },
	      [_vm._v("\n\t\t" + _vm._s(_vm.__("← Back to upload files")) + "\n\t")]
	    ),
	    _vm._v(" "),
	    _c("div", { staticClass: "input-group" }, [
	      _c("input", {
	        directives: [
	          {
	            name: "model",
	            rawName: "v-model",
	            value: _vm.url,
	            expression: "url"
	          }
	        ],
	        staticClass: "form-control",
	        attrs: { type: "text", placeholder: _vm.__("Attach a web link") },
	        domProps: { value: _vm.url },
	        on: {
	          input: function($event) {
	            if ($event.target.composing) {
	              return
	            }
	            _vm.url = $event.target.value;
	          }
	        }
	      })
	    ])
	  ])
	};
	var __vue_staticRenderFns__$4 = [];
	__vue_render__$4._withStripped = true;

	  /* style */
	  var __vue_inject_styles__$4 = function (inject) {
	    if (!inject) { return }
	    inject("data-v-f740938a_0", { source: "\n.file-web-link .input-group {\n\tmargin-top: 10px;\n}\n", map: {"version":3,"sources":["/home/user/erpnext-pro/erp-next/apps/frappe/frappe/public/js/frappe/file_uploader/WebLink.vue"],"names":[],"mappings":";AA6BA;CACA,gBAAA;AACA","file":"WebLink.vue","sourcesContent":["<template>\n\t<div class=\"file-web-link margin-bottom\">\n\t\t<a href class=\"text-muted text-medium\"\n\t\t\t@click.prevent=\"$emit('hide-web-link')\"\n\t\t>\n\t\t\t{{ __('← Back to upload files') }}\n\t\t</a>\n\t\t<div class=\"input-group\">\n\t\t\t<input\n\t\t\t\ttype=\"text\"\n\t\t\t\tclass=\"form-control\"\n\t\t\t\t:placeholder=\"__('Attach a web link')\"\n\t\t\t\tv-model=\"url\"\n\t\t\t>\n\t\t</div>\n\t</div>\n</template>\n<script>\nexport default {\n\tname: 'WebLink',\n\tdata() {\n\t\treturn {\n\t\t\turl: '',\n\t\t}\n\t}\n}\n</script>\n\n<style>\n.file-web-link .input-group {\n\tmargin-top: 10px;\n}\n</style>\n"]}, media: undefined });

	  };
	  /* scoped */
	  var __vue_scope_id__$4 = undefined;
	  /* module identifier */
	  var __vue_module_identifier__$4 = undefined;
	  /* functional template */
	  var __vue_is_functional_template__$4 = false;
	  /* component normalizer */
	  function __vue_normalize__$4(
	    template, style, script,
	    scope, functional, moduleIdentifier,
	    createInjector, createInjectorSSR
	  ) {
	    var component = (typeof script === 'function' ? script.options : script) || {};

	    // For security concerns, we use only base name in production mode.
	    component.__file = "/home/user/erpnext-pro/erp-next/apps/frappe/frappe/public/js/frappe/file_uploader/WebLink.vue";

	    if (!component.render) {
	      component.render = template.render;
	      component.staticRenderFns = template.staticRenderFns;
	      component._compiled = true;

	      if (functional) { component.functional = true; }
	    }

	    component._scopeId = scope;

	    {
	      var hook;
	      if (style) {
	        hook = function(context) {
	          style.call(this, createInjector(context));
	        };
	      }

	      if (hook !== undefined) {
	        if (component.functional) {
	          // register for functional component in vue file
	          var originalRender = component.render;
	          component.render = function renderWithStyleInjection(h, context) {
	            hook.call(context);
	            return originalRender(h, context)
	          };
	        } else {
	          // inject component registration as beforeCreate hook
	          var existing = component.beforeCreate;
	          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
	        }
	      }
	    }

	    return component
	  }
	  /* style inject */
	  function __vue_create_injector__$4() {
	    var head = document.head || document.getElementsByTagName('head')[0];
	    var styles = __vue_create_injector__$4.styles || (__vue_create_injector__$4.styles = {});
	    var isOldIE =
	      typeof navigator !== 'undefined' &&
	      /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

	    return function addStyle(id, css) {
	      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) { return } // SSR styles are present.

	      var group = isOldIE ? css.media || 'default' : id;
	      var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });

	      if (!style.ids.includes(id)) {
	        var code = css.source;
	        var index = style.ids.length;

	        style.ids.push(id);

	        if (isOldIE) {
	          style.element = style.element || document.querySelector('style[data-group=' + group + ']');
	        }

	        if (!style.element) {
	          var el = style.element = document.createElement('style');
	          el.type = 'text/css';

	          if (css.media) { el.setAttribute('media', css.media); }
	          if (isOldIE) {
	            el.setAttribute('data-group', group);
	            el.setAttribute('data-next-index', '0');
	          }

	          head.appendChild(el);
	        }

	        if (isOldIE) {
	          index = parseInt(style.element.getAttribute('data-next-index'));
	          style.element.setAttribute('data-next-index', index + 1);
	        }

	        if (style.element.styleSheet) {
	          style.parts.push(code);
	          style.element.styleSheet.cssText = style.parts
	            .filter(Boolean)
	            .join('\n');
	        } else {
	          var textNode = document.createTextNode(code);
	          var nodes = style.element.childNodes;
	          if (nodes[index]) { style.element.removeChild(nodes[index]); }
	          if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }
	          else { style.element.appendChild(textNode); }
	        }
	      }
	    }
	  }
	  /* style inject SSR */
	  

	  
	  var WebLink = __vue_normalize__$4(
	    { render: __vue_render__$4, staticRenderFns: __vue_staticRenderFns__$4 },
	    __vue_inject_styles__$4,
	    __vue_script__$4,
	    __vue_scope_id__$4,
	    __vue_is_functional_template__$4,
	    __vue_module_identifier__$4,
	    __vue_create_injector__$4,
	    undefined
	  );

	//

	var script$5 = {
		name: 'FileUploader',
		props: {
			show_upload_button: {
				default: true
			},
			disable_file_browser: {
				default: false
			},
			allow_multiple: {
				default: true
			},
			as_dataurl: {
				default: false
			},
			doctype: {
				default: null
			},
			docname: {
				default: null
			},
			fieldname: {
				default: null
			},
			folder: {
				default: 'Home'
			},
			method: {
				default: null
			},
			on_success: {
				default: null
			},
			restrictions: {
				default: function () { return ({
					max_file_size: null, // 2048 -> 2KB
					max_number_of_files: null,
					allowed_file_types: [] // ['image/*', 'video/*', '.jpg', '.gif', '.pdf']
				}); }
			},
			upload_notes: {
				default: null // "Images or video, upto 2MB"
			}
		},
		components: {
			FilePreview: FilePreview,
			FileBrowser: FileBrowser,
			WebLink: WebLink
		},
		data: function data() {
			return {
				files: [],
				is_dragging: false,
				currently_uploading: -1,
				show_file_browser: false,
				show_web_link: false,
			}
		},
		watch: {
			files: function files(newvalue, oldvalue) {
				if (!this.allow_multiple && newvalue.length > 1) {
					this.files = [newvalue[newvalue.length - 1]];
				}
			}
		},
		computed: {
			upload_complete: function upload_complete() {
				return this.files.length > 0
					&& this.files.every(
						function (file) { return file.total !== 0 && file.progress === file.total; });
			},
			allow_take_photo: function allow_take_photo() {
				return window.navigator.mediaDevices;
			}
		},
		methods: {
			dragover: function dragover() {
				this.is_dragging = true;
			},
			dragleave: function dragleave() {
				this.is_dragging = false;
			},
			dropfiles: function dropfiles(e) {
				this.is_dragging = false;
				this.add_files(e.dataTransfer.files);
			},
			browse_files: function browse_files() {
				this.$refs.file_input.click();
			},
			on_file_input: function on_file_input(e) {
				this.add_files(this.$refs.file_input.files);
			},
			remove_file: function remove_file(file) {
				this.files = this.files.filter(function (f) { return f !== file; });
			},
			toggle_all_private: function toggle_all_private() {
				var flag;
				var private_values = this.files.filter(function (file) { return file.private; });
				if (private_values.length < this.files.length) {
					// there are some private and some public
					// set all to private
					flag = true;
				} else {
					// all are private, set all to public
					flag = false;
				}
				this.files = this.files.map(function (file) {
					file.private = flag;
					return file;
				});
			},
			add_files: function add_files(file_array) {
				var files = Array.from(file_array)
					.filter(this.check_restrictions)
					.map(function (file) {
						var is_image = file.type.startsWith('image');
						return {
							file_obj: file,
							name: file.name,
							doc: null,
							progress: 0,
							total: 0,
							failed: false,
							uploading: false,
							private: !is_image
						}
					});
				this.files = this.files.concat(files);
			},
			check_restrictions: function check_restrictions(file) {
				var ref = this.restrictions;
				var max_file_size = ref.max_file_size;
				var allowed_file_types = ref.allowed_file_types;

				var mime_type = file.type;
				var extension = '.' + file.name.split('.').pop();

				var is_correct_type = true;
				var valid_file_size = true;

				if (allowed_file_types.length) {
					is_correct_type = allowed_file_types.some(function (type) {
						// is this is a mime-type
						if (type.includes('/')) {
							if (!file.type) { return false; }
							return file.type.match(type);
						}

						// otherwise this is likely an extension
						if (type[0] === '.') {
							return file.name.endsWith(type);
						}
						return false;
					});
				}

				if (max_file_size && file.size != null) {
					valid_file_size = file.size < max_file_size;
				}

				if (!is_correct_type) {
					console.warn('File skipped because of invalid file type', file);
				}
				if (!valid_file_size) {
					console.warn('File skipped because of invalid file size', file.size, file);
				}

				return is_correct_type && valid_file_size;
			},
			upload_files: function upload_files() {
				var this$1 = this;

				if (this.show_file_browser) {
					return this.upload_via_file_browser();
				}
				if (this.show_web_link) {
					return this.upload_via_web_link();
				}
				if (this.as_dataurl) {
					return this.return_as_dataurl();
				}
				return frappe.run_serially(
					this.files.map(
						function (file, i) { return function () { return this$1.upload_file(file, i); }; }
					)
				);
			},
			upload_via_file_browser: function upload_via_file_browser() {
				var selected_file = this.$refs.file_browser.selected_node;
				if (!selected_file.value) {
					frappe.msgprint(__('Click on a file to select it.'));
					return Promise.reject();
				}

				return this.upload_file({
					file_url: selected_file.file_url
				});
			},
			upload_via_web_link: function upload_via_web_link() {
				var file_url = this.$refs.web_link.url;
				if (!file_url) {
					frappe.msgprint(__('Invalid URL'));
					return Promise.reject();
				}
				file_url = decodeURI(file_url);
				return this.upload_file({
					file_url: file_url
				});
			},
			return_as_dataurl: function return_as_dataurl() {
				var this$1 = this;

				var promises = this.files.map(function (file) { return frappe.dom.file_to_base64(file.file_obj)
						.then(function (dataurl) {
							file.dataurl = dataurl;
							this$1.on_success && this$1.on_success(file);
						}); }
				);
				return Promise.all(promises);
			},
			upload_file: function upload_file(file, i) {
				var this$1 = this;

				this.currently_uploading = i;

				return new Promise(function (resolve, reject) {
					var xhr = new XMLHttpRequest();
					xhr.upload.addEventListener('loadstart', function (e) {
						file.uploading = true;
					});
					xhr.upload.addEventListener('progress', function (e) {
						if (e.lengthComputable) {
							file.progress = e.loaded;
							file.total = e.total;
						}
					});
					xhr.upload.addEventListener('load', function (e) {
						file.uploading = false;
						resolve();
					});
					xhr.addEventListener('error', function (e) {
						file.failed = true;
						reject();
					});
					xhr.onreadystatechange = function () {
						if (xhr.readyState == XMLHttpRequest.DONE) {
							if (xhr.status === 200) {
								var r = null;
								var file_doc = null;
								try {
									r = JSON.parse(xhr.responseText);
									if (r.message.doctype === 'File') {
										file_doc = r.message;
									}
								} catch(e) {
									r = xhr.responseText;
								}

								file.doc = file_doc;

								if (this$1.on_success) {
									this$1.on_success(file_doc, r);
								}
							} else if (xhr.status === 403) {
								var response = JSON.parse(xhr.responseText);
								frappe.msgprint({
									title: __('Not permitted'),
									indicator: 'red',
									message: response._error_message
								});
							} else {
								file.failed = true;
								var error = null;
								try {
									error = JSON.parse(xhr.responseText);
								} catch(e) {
									// pass
								}
								frappe.request.cleanup({}, error);
							}
						}
					};
					xhr.open('POST', '/api/method/upload_file', true);
					xhr.setRequestHeader('Accept', 'application/json');
					xhr.setRequestHeader('X-Frappe-CSRF-Token', frappe.csrf_token);

					var form_data = new FormData();
					if (file.file_obj) {
						form_data.append('file', file.file_obj, file.name);
					}
					form_data.append('is_private', +file.private);
					form_data.append('folder', this$1.folder);

					if (file.file_url) {
						form_data.append('file_url', file.file_url);
					}

					if (this$1.doctype && this$1.docname) {
						form_data.append('doctype', this$1.doctype);
						form_data.append('docname', this$1.docname);
					}

					if (this$1.fieldname) {
						form_data.append('fieldname', this$1.fieldname);
					}

					if (this$1.method) {
						form_data.append('method', this$1.method);
					}

					xhr.send(form_data);
				});
			},
			capture_image: function capture_image() {
				var this$1 = this;

				var capture = new frappe.ui.Capture({
					animate: false,
					error: true
				});
				capture.show();
				capture.submit(function (data_url) {
					var filename = "capture_" + (frappe.datetime.now_datetime().replaceAll(/[: -]/g, '_')) + ".png";
					this$1.url_to_file(data_url, filename, 'image/png').then(function (file) { return this$1.add_files([file]); }
					);
				});
			},
			url_to_file: function url_to_file(url, filename, mime_type) {
				return fetch(url)
						.then(function (res) { return res.arrayBuffer(); })
						.then(function (buffer) { return new File([buffer], filename, { type: mime_type }); });
			},
		}
	};

	/* script */
	            var __vue_script__$5 = script$5;
	            
	/* template */
	var __vue_render__$5 = function() {
	  var _vm = this;
	  var _h = _vm.$createElement;
	  var _c = _vm._self._c || _h;
	  return _c(
	    "div",
	    {
	      staticClass: "file-uploader",
	      on: {
	        dragover: function($event) {
	          $event.preventDefault();
	          return _vm.dragover($event)
	        },
	        dragleave: function($event) {
	          $event.preventDefault();
	          return _vm.dragleave($event)
	        },
	        drop: function($event) {
	          $event.preventDefault();
	          return _vm.dropfiles($event)
	        }
	      }
	    },
	    [
	      _c(
	        "div",
	        {
	          directives: [
	            {
	              name: "show",
	              rawName: "v-show",
	              value:
	                _vm.files.length === 0 &&
	                !_vm.show_file_browser &&
	                !_vm.show_web_link,
	              expression:
	                "files.length === 0 && !show_file_browser && !show_web_link"
	            }
	          ],
	          staticClass: "file-upload-area"
	        },
	        [
	          !_vm.is_dragging
	            ? _c("div", [
	                _c("div", { staticClass: "text-center" }, [
	                  _vm._v(
	                    "\n\t\t\t\t" +
	                      _vm._s(
	                        _vm.__("Drag and drop files here or upload from")
	                      ) +
	                      "\n\t\t\t"
	                  )
	                ]),
	                _vm._v(" "),
	                _c("div", { staticClass: "mt-2 text-center" }, [
	                  _c(
	                    "button",
	                    {
	                      staticClass: "btn btn-file-upload",
	                      on: { click: _vm.browse_files }
	                    },
	                    [
	                      _c(
	                        "svg",
	                        {
	                          attrs: {
	                            width: "30",
	                            height: "30",
	                            viewBox: "0 0 30 30",
	                            fill: "none",
	                            xmlns: "http://www.w3.org/2000/svg"
	                          }
	                        },
	                        [
	                          _c("circle", {
	                            attrs: {
	                              cx: "15",
	                              cy: "15",
	                              r: "15",
	                              fill: "url(#paint0_linear)"
	                            }
	                          }),
	                          _vm._v(" "),
	                          _c("path", {
	                            attrs: {
	                              d: "M13.5 22V19",
	                              stroke: "white",
	                              "stroke-linecap": "round",
	                              "stroke-linejoin": "round"
	                            }
	                          }),
	                          _vm._v(" "),
	                          _c("path", {
	                            attrs: {
	                              d: "M16.5 22V19",
	                              stroke: "white",
	                              "stroke-linecap": "round",
	                              "stroke-linejoin": "round"
	                            }
	                          }),
	                          _vm._v(" "),
	                          _c("path", {
	                            attrs: {
	                              d: "M10.5 22H19.5",
	                              stroke: "white",
	                              "stroke-linecap": "round",
	                              "stroke-linejoin": "round"
	                            }
	                          }),
	                          _vm._v(" "),
	                          _c("path", {
	                            attrs: {
	                              d: "M7.5 16H22.5",
	                              stroke: "white",
	                              "stroke-linecap": "round",
	                              "stroke-linejoin": "round"
	                            }
	                          }),
	                          _vm._v(" "),
	                          _c("path", {
	                            attrs: {
	                              d:
	                                "M21 8H9C8.17157 8 7.5 8.67157 7.5 9.5V17.5C7.5 18.3284 8.17157 19 9 19H21C21.8284 19 22.5 18.3284 22.5 17.5V9.5C22.5 8.67157 21.8284 8 21 8Z",
	                              stroke: "white",
	                              "stroke-linecap": "round",
	                              "stroke-linejoin": "round"
	                            }
	                          }),
	                          _vm._v(" "),
	                          _c(
	                            "defs",
	                            [
	                              _c(
	                                "linearGradient",
	                                {
	                                  attrs: {
	                                    id: "paint0_linear",
	                                    x1: "0",
	                                    y1: "0",
	                                    x2: "0",
	                                    y2: "30",
	                                    gradientUnits: "userSpaceOnUse"
	                                  }
	                                },
	                                [
	                                  _c("stop", {
	                                    attrs: { "stop-color": "#2C9AF1" }
	                                  }),
	                                  _vm._v(" "),
	                                  _c("stop", {
	                                    attrs: {
	                                      offset: "1",
	                                      "stop-color": "#2490EF"
	                                    }
	                                  })
	                                ],
	                                1
	                              )
	                            ],
	                            1
	                          )
	                        ]
	                      ),
	                      _vm._v(" "),
	                      _c("div", { staticClass: "mt-1" }, [
	                        _vm._v(_vm._s(_vm.__("My Device")))
	                      ])
	                    ]
	                  ),
	                  _vm._v(" "),
	                  _c("input", {
	                    ref: "file_input",
	                    staticClass: "hidden",
	                    attrs: {
	                      type: "file",
	                      multiple: _vm.allow_multiple,
	                      accept: _vm.restrictions.allowed_file_types.join(", ")
	                    },
	                    on: { change: _vm.on_file_input }
	                  }),
	                  _vm._v(" "),
	                  !_vm.disable_file_browser
	                    ? _c(
	                        "button",
	                        {
	                          staticClass: "btn btn-file-upload",
	                          on: {
	                            click: function($event) {
	                              _vm.show_file_browser = true;
	                            }
	                          }
	                        },
	                        [
	                          _c(
	                            "svg",
	                            {
	                              attrs: {
	                                width: "30",
	                                height: "30",
	                                viewBox: "0 0 30 30",
	                                fill: "none",
	                                xmlns: "http://www.w3.org/2000/svg"
	                              }
	                            },
	                            [
	                              _c("circle", {
	                                attrs: {
	                                  cx: "15",
	                                  cy: "15",
	                                  r: "15",
	                                  fill: "#48BB74"
	                                }
	                              }),
	                              _vm._v(" "),
	                              _c("path", {
	                                attrs: {
	                                  d:
	                                    "M13.0245 11.5H8C7.72386 11.5 7.5 11.7239 7.5 12V20C7.5 21.1046 8.39543 22 9.5 22H20.5C21.6046 22 22.5 21.1046 22.5 20V14.5C22.5 14.2239 22.2761 14 22 14H15.2169C15.0492 14 14.8926 13.9159 14.8 13.776L13.4414 11.724C13.3488 11.5841 13.1922 11.5 13.0245 11.5Z",
	                                  stroke: "white",
	                                  "stroke-miterlimit": "10",
	                                  "stroke-linecap": "square"
	                                }
	                              }),
	                              _vm._v(" "),
	                              _c("path", {
	                                attrs: {
	                                  d:
	                                    "M8.87939 9.5V8.5C8.87939 8.22386 9.10325 8 9.37939 8H20.6208C20.8969 8 21.1208 8.22386 21.1208 8.5V12",
	                                  stroke: "white",
	                                  "stroke-miterlimit": "10",
	                                  "stroke-linecap": "round",
	                                  "stroke-linejoin": "round"
	                                }
	                              })
	                            ]
	                          ),
	                          _vm._v(" "),
	                          _c("div", { staticClass: "mt-1" }, [
	                            _vm._v(_vm._s(_vm.__("Library")))
	                          ])
	                        ]
	                      )
	                    : _vm._e(),
	                  _vm._v(" "),
	                  _c(
	                    "button",
	                    {
	                      staticClass: "btn btn-file-upload",
	                      on: {
	                        click: function($event) {
	                          _vm.show_web_link = true;
	                        }
	                      }
	                    },
	                    [
	                      _c(
	                        "svg",
	                        {
	                          attrs: {
	                            width: "30",
	                            height: "30",
	                            viewBox: "0 0 30 30",
	                            fill: "none",
	                            xmlns: "http://www.w3.org/2000/svg"
	                          }
	                        },
	                        [
	                          _c("circle", {
	                            attrs: {
	                              cx: "15",
	                              cy: "15",
	                              r: "15",
	                              fill: "#ECAC4B"
	                            }
	                          }),
	                          _vm._v(" "),
	                          _c("path", {
	                            attrs: {
	                              d: "M12.0469 17.9543L17.9558 12.0454",
	                              stroke: "white",
	                              "stroke-linecap": "round",
	                              "stroke-linejoin": "round"
	                            }
	                          }),
	                          _vm._v(" "),
	                          _c("path", {
	                            attrs: {
	                              d:
	                                "M13.8184 11.4547L15.7943 9.47873C16.4212 8.85205 17.2714 8.5 18.1578 8.5C19.0443 8.5 19.8945 8.85205 20.5214 9.47873V9.47873C21.1481 10.1057 21.5001 10.9558 21.5001 11.8423C21.5001 12.7287 21.1481 13.5789 20.5214 14.2058L18.5455 16.1818",
	                              stroke: "white",
	                              "stroke-linecap": "round",
	                              "stroke-linejoin": "round"
	                            }
	                          }),
	                          _vm._v(" "),
	                          _c("path", {
	                            attrs: {
	                              d:
	                                "M11.4547 13.8184L9.47873 15.7943C8.85205 16.4212 8.5 17.2714 8.5 18.1578C8.5 19.0443 8.85205 19.8945 9.47873 20.5214V20.5214C10.1057 21.1481 10.9558 21.5001 11.8423 21.5001C12.7287 21.5001 13.5789 21.1481 14.2058 20.5214L16.1818 18.5455",
	                              stroke: "white",
	                              "stroke-linecap": "round",
	                              "stroke-linejoin": "round"
	                            }
	                          })
	                        ]
	                      ),
	                      _vm._v(" "),
	                      _c("div", { staticClass: "mt-1" }, [
	                        _vm._v(_vm._s(_vm.__("Link")))
	                      ])
	                    ]
	                  ),
	                  _vm._v(" "),
	                  _vm.allow_take_photo
	                    ? _c(
	                        "button",
	                        {
	                          staticClass: "btn btn-file-upload",
	                          on: { click: _vm.capture_image }
	                        },
	                        [
	                          _c(
	                            "svg",
	                            {
	                              attrs: {
	                                width: "30",
	                                height: "30",
	                                viewBox: "0 0 30 30",
	                                fill: "none",
	                                xmlns: "http://www.w3.org/2000/svg"
	                              }
	                            },
	                            [
	                              _c("circle", {
	                                attrs: {
	                                  cx: "15",
	                                  cy: "15",
	                                  r: "15",
	                                  fill: "#CE315B"
	                                }
	                              }),
	                              _vm._v(" "),
	                              _c("path", {
	                                attrs: {
	                                  d:
	                                    "M11.5 10.5H9.5C8.67157 10.5 8 11.1716 8 12V20C8 20.8284 8.67157 21.5 9.5 21.5H20.5C21.3284 21.5 22 20.8284 22 20V12C22 11.1716 21.3284 10.5 20.5 10.5H18.5L17.3 8.9C17.1111 8.64819 16.8148 8.5 16.5 8.5H13.5C13.1852 8.5 12.8889 8.64819 12.7 8.9L11.5 10.5Z",
	                                  stroke: "white",
	                                  "stroke-linejoin": "round"
	                                }
	                              }),
	                              _vm._v(" "),
	                              _c("circle", {
	                                attrs: {
	                                  cx: "15",
	                                  cy: "16",
	                                  r: "2.5",
	                                  stroke: "white"
	                                }
	                              })
	                            ]
	                          ),
	                          _vm._v(" "),
	                          _c("div", { staticClass: "mt-1" }, [
	                            _vm._v(_vm._s(_vm.__("Camera")))
	                          ])
	                        ]
	                      )
	                    : _vm._e()
	                ]),
	                _vm._v(" "),
	                _c("div", { staticClass: "text-muted text-medium" }, [
	                  _vm._v("\n\t\t\t\t" + _vm._s(_vm.upload_notes) + "\n\t\t\t")
	                ])
	              ])
	            : _c("div", [
	                _vm._v(
	                  "\n\t\t\t" + _vm._s(_vm.__("Drop files here")) + "\n\t\t"
	                )
	              ])
	        ]
	      ),
	      _vm._v(" "),
	      _c(
	        "div",
	        {
	          directives: [
	            {
	              name: "show",
	              rawName: "v-show",
	              value:
	                _vm.files.length &&
	                !_vm.show_file_browser &&
	                !_vm.show_web_link,
	              expression: "files.length && !show_file_browser && !show_web_link"
	            }
	          ],
	          staticClass: "file-preview-area"
	        },
	        [
	          _c(
	            "div",
	            { staticClass: "file-preview-container" },
	            _vm._l(_vm.files, function(file, i) {
	              return _c("FilePreview", {
	                key: file.name,
	                attrs: { file: file },
	                on: {
	                  remove: function($event) {
	                    return _vm.remove_file(file)
	                  },
	                  toggle_private: function($event) {
	                    file.private = !file.private;
	                  }
	                }
	              })
	            }),
	            1
	          ),
	          _vm._v(" "),
	          _vm.show_upload_button && _vm.currently_uploading === -1
	            ? _c("div", { staticClass: "flex align-center" }, [
	                _c(
	                  "button",
	                  {
	                    staticClass: "btn btn-primary btn-sm margin-right",
	                    on: { click: _vm.upload_files }
	                  },
	                  [
	                    _vm.files.length === 1
	                      ? _c("span", [
	                          _vm._v(
	                            "\n\t\t\t\t\t" +
	                              _vm._s(_vm.__("Upload file")) +
	                              "\n\t\t\t\t"
	                          )
	                        ])
	                      : _c("span", [
	                          _vm._v(
	                            "\n\t\t\t\t\t" +
	                              _vm._s(
	                                _vm.__("Upload {0} files", [_vm.files.length])
	                              ) +
	                              "\n\t\t\t\t"
	                          )
	                        ])
	                  ]
	                ),
	                _vm._v(" "),
	                _c("div", { staticClass: "text-muted text-medium" }, [
	                  _vm._v(
	                    "\n\t\t\t\t" +
	                      _vm._s(
	                        _vm.__(
	                          "Click on the lock icon to toggle public/private"
	                        )
	                      ) +
	                      "\n\t\t\t"
	                  )
	                ])
	              ])
	            : _vm._e()
	        ]
	      ),
	      _vm._v(" "),
	      _vm.show_file_browser && !_vm.disable_file_browser
	        ? _c("FileBrowser", {
	            ref: "file_browser",
	            on: {
	              "hide-browser": function($event) {
	                _vm.show_file_browser = false;
	              }
	            }
	          })
	        : _vm._e(),
	      _vm._v(" "),
	      _vm.show_web_link
	        ? _c("WebLink", {
	            ref: "web_link",
	            on: {
	              "hide-web-link": function($event) {
	                _vm.show_web_link = false;
	              }
	            }
	          })
	        : _vm._e()
	    ],
	    1
	  )
	};
	var __vue_staticRenderFns__$5 = [];
	__vue_render__$5._withStripped = true;

	  /* style */
	  var __vue_inject_styles__$5 = function (inject) {
	    if (!inject) { return }
	    inject("data-v-0dbe907c_0", { source: "\n.file-upload-area {\n\tmin-height: 16rem;\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tborder: 1px dashed var(--dark-border-color);\n\tborder-radius: var(--border-radius);\n\tcursor: pointer;\n\tbackground-color: var(--bg-color);\n}\n.btn-file-upload {\n\tbackground-color: transparent;\n\tborder: none;\n\tbox-shadow: none;\n\tfont-size: var(--text-xs);\n}\n", map: {"version":3,"sources":["/home/user/erpnext-pro/erp-next/apps/frappe/frappe/public/js/frappe/file_uploader/FileUploader.vue"],"names":[],"mappings":";AAgcA;CACA,iBAAA;CACA,aAAA;CACA,mBAAA;CACA,uBAAA;CACA,2CAAA;CACA,mCAAA;CACA,eAAA;CACA,iCAAA;AACA;AAEA;CACA,6BAAA;CACA,YAAA;CACA,gBAAA;CACA,yBAAA;AACA","file":"FileUploader.vue","sourcesContent":["<template>\n\t<div class=\"file-uploader\"\n\t\t@dragover.prevent=\"dragover\"\n\t\t@dragleave.prevent=\"dragleave\"\n\t\t@drop.prevent=\"dropfiles\"\n\t>\n\t\t<div\n\t\t\tclass=\"file-upload-area\"\n\t\t\tv-show=\"files.length === 0 && !show_file_browser && !show_web_link\"\n\t\t>\n\t\t\t<div v-if=\"!is_dragging\">\n\t\t\t\t<div class=\"text-center\">\n\t\t\t\t\t{{ __('Drag and drop files here or upload from') }}\n\t\t\t\t</div>\n\t\t\t\t<div class=\"mt-2 text-center\">\n\t\t\t\t\t<button class=\"btn btn-file-upload\" @click=\"browse_files\">\n\t\t\t\t\t\t<svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n\t\t\t\t\t\t\t<circle cx=\"15\" cy=\"15\" r=\"15\" fill=\"url(#paint0_linear)\"/>\n\t\t\t\t\t\t\t<path d=\"M13.5 22V19\" stroke=\"white\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n\t\t\t\t\t\t\t<path d=\"M16.5 22V19\" stroke=\"white\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n\t\t\t\t\t\t\t<path d=\"M10.5 22H19.5\" stroke=\"white\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n\t\t\t\t\t\t\t<path d=\"M7.5 16H22.5\" stroke=\"white\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n\t\t\t\t\t\t\t<path d=\"M21 8H9C8.17157 8 7.5 8.67157 7.5 9.5V17.5C7.5 18.3284 8.17157 19 9 19H21C21.8284 19 22.5 18.3284 22.5 17.5V9.5C22.5 8.67157 21.8284 8 21 8Z\" stroke=\"white\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n\t\t\t\t\t\t\t<defs>\n\t\t\t\t\t\t\t<linearGradient id=\"paint0_linear\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"30\" gradientUnits=\"userSpaceOnUse\">\n\t\t\t\t\t\t\t<stop stop-color=\"#2C9AF1\"/>\n\t\t\t\t\t\t\t<stop offset=\"1\" stop-color=\"#2490EF\"/>\n\t\t\t\t\t\t\t</linearGradient>\n\t\t\t\t\t\t\t</defs>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t\t<div class=\"mt-1\">{{ __('My Device') }}</div>\n\t\t\t\t\t</button>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"file\"\n\t\t\t\t\t\tclass=\"hidden\"\n\t\t\t\t\t\tref=\"file_input\"\n\t\t\t\t\t\t@change=\"on_file_input\"\n\t\t\t\t\t\t:multiple=\"allow_multiple\"\n\t\t\t\t\t\t:accept=\"restrictions.allowed_file_types.join(', ')\"\n\t\t\t\t\t>\n\t\t\t\t\t<button class=\"btn btn-file-upload\" v-if=\"!disable_file_browser\" @click=\"show_file_browser = true\">\n\t\t\t\t\t\t<svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n\t\t\t\t\t\t\t<circle cx=\"15\" cy=\"15\" r=\"15\" fill=\"#48BB74\"/>\n\t\t\t\t\t\t\t<path d=\"M13.0245 11.5H8C7.72386 11.5 7.5 11.7239 7.5 12V20C7.5 21.1046 8.39543 22 9.5 22H20.5C21.6046 22 22.5 21.1046 22.5 20V14.5C22.5 14.2239 22.2761 14 22 14H15.2169C15.0492 14 14.8926 13.9159 14.8 13.776L13.4414 11.724C13.3488 11.5841 13.1922 11.5 13.0245 11.5Z\" stroke=\"white\" stroke-miterlimit=\"10\" stroke-linecap=\"square\"/>\n\t\t\t\t\t\t\t<path d=\"M8.87939 9.5V8.5C8.87939 8.22386 9.10325 8 9.37939 8H20.6208C20.8969 8 21.1208 8.22386 21.1208 8.5V12\" stroke=\"white\" stroke-miterlimit=\"10\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t\t<div class=\"mt-1\">{{ __('Library') }}</div>\n\t\t\t\t\t</button>\n\t\t\t\t\t<button class=\"btn btn-file-upload\" @click=\"show_web_link = true\">\n\t\t\t\t\t\t<svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n\t\t\t\t\t\t\t<circle cx=\"15\" cy=\"15\" r=\"15\" fill=\"#ECAC4B\"/>\n\t\t\t\t\t\t\t<path d=\"M12.0469 17.9543L17.9558 12.0454\" stroke=\"white\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n\t\t\t\t\t\t\t<path d=\"M13.8184 11.4547L15.7943 9.47873C16.4212 8.85205 17.2714 8.5 18.1578 8.5C19.0443 8.5 19.8945 8.85205 20.5214 9.47873V9.47873C21.1481 10.1057 21.5001 10.9558 21.5001 11.8423C21.5001 12.7287 21.1481 13.5789 20.5214 14.2058L18.5455 16.1818\" stroke=\"white\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n\t\t\t\t\t\t\t<path d=\"M11.4547 13.8184L9.47873 15.7943C8.85205 16.4212 8.5 17.2714 8.5 18.1578C8.5 19.0443 8.85205 19.8945 9.47873 20.5214V20.5214C10.1057 21.1481 10.9558 21.5001 11.8423 21.5001C12.7287 21.5001 13.5789 21.1481 14.2058 20.5214L16.1818 18.5455\" stroke=\"white\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t\t<div class=\"mt-1\">{{ __('Link') }}</div>\n\t\t\t\t\t</button>\n\t\t\t\t\t<button v-if=\"allow_take_photo\" class=\"btn btn-file-upload\" @click=\"capture_image\">\n\t\t\t\t\t\t<svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n\t\t\t\t\t\t\t<circle cx=\"15\" cy=\"15\" r=\"15\" fill=\"#CE315B\"/>\n\t\t\t\t\t\t\t<path d=\"M11.5 10.5H9.5C8.67157 10.5 8 11.1716 8 12V20C8 20.8284 8.67157 21.5 9.5 21.5H20.5C21.3284 21.5 22 20.8284 22 20V12C22 11.1716 21.3284 10.5 20.5 10.5H18.5L17.3 8.9C17.1111 8.64819 16.8148 8.5 16.5 8.5H13.5C13.1852 8.5 12.8889 8.64819 12.7 8.9L11.5 10.5Z\" stroke=\"white\" stroke-linejoin=\"round\"/>\n\t\t\t\t\t\t\t<circle cx=\"15\" cy=\"16\" r=\"2.5\" stroke=\"white\"/>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t\t<div class=\"mt-1\">{{ __('Camera') }}</div>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"text-muted text-medium\">\n\t\t\t\t\t{{ upload_notes }}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div v-else>\n\t\t\t\t{{ __('Drop files here') }}\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"file-preview-area\" v-show=\"files.length && !show_file_browser && !show_web_link\">\n\t\t\t<div class=\"file-preview-container\">\n\t\t\t\t<FilePreview\n\t\t\t\t\tv-for=\"(file, i) in files\"\n\t\t\t\t\t:key=\"file.name\"\n\t\t\t\t\t:file=\"file\"\n\t\t\t\t\t@remove=\"remove_file(file)\"\n\t\t\t\t\t@toggle_private=\"file.private = !file.private\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div class=\"flex align-center\" v-if=\"show_upload_button && currently_uploading === -1\">\n\t\t\t\t<button\n\t\t\t\t\tclass=\"btn btn-primary btn-sm margin-right\"\n\t\t\t\t\t@click=\"upload_files\"\n\t\t\t\t>\n\t\t\t\t\t<span v-if=\"files.length === 1\">\n\t\t\t\t\t\t{{ __('Upload file') }}\n\t\t\t\t\t</span>\n\t\t\t\t\t<span v-else>\n\t\t\t\t\t\t{{ __('Upload {0} files', [files.length]) }}\n\t\t\t\t\t</span>\n\t\t\t\t</button>\n\t\t\t\t<div class=\"text-muted text-medium\">\n\t\t\t\t\t{{ __('Click on the lock icon to toggle public/private') }}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<FileBrowser\n\t\t\tref=\"file_browser\"\n\t\t\tv-if=\"show_file_browser && !disable_file_browser\"\n\t\t\t@hide-browser=\"show_file_browser = false\"\n\t\t/>\n\t\t<WebLink\n\t\t\tref=\"web_link\"\n\t\t\tv-if=\"show_web_link\"\n\t\t\t@hide-web-link=\"show_web_link = false\"\n\t\t/>\n\t</div>\n</template>\n\n<script>\nimport FilePreview from './FilePreview.vue';\nimport FileBrowser from './FileBrowser.vue';\nimport WebLink from './WebLink.vue';\n\nexport default {\n\tname: 'FileUploader',\n\tprops: {\n\t\tshow_upload_button: {\n\t\t\tdefault: true\n\t\t},\n\t\tdisable_file_browser: {\n\t\t\tdefault: false\n\t\t},\n\t\tallow_multiple: {\n\t\t\tdefault: true\n\t\t},\n\t\tas_dataurl: {\n\t\t\tdefault: false\n\t\t},\n\t\tdoctype: {\n\t\t\tdefault: null\n\t\t},\n\t\tdocname: {\n\t\t\tdefault: null\n\t\t},\n\t\tfieldname: {\n\t\t\tdefault: null\n\t\t},\n\t\tfolder: {\n\t\t\tdefault: 'Home'\n\t\t},\n\t\tmethod: {\n\t\t\tdefault: null\n\t\t},\n\t\ton_success: {\n\t\t\tdefault: null\n\t\t},\n\t\trestrictions: {\n\t\t\tdefault: () => ({\n\t\t\t\tmax_file_size: null, // 2048 -> 2KB\n\t\t\t\tmax_number_of_files: null,\n\t\t\t\tallowed_file_types: [] // ['image/*', 'video/*', '.jpg', '.gif', '.pdf']\n\t\t\t})\n\t\t},\n\t\tupload_notes: {\n\t\t\tdefault: null // \"Images or video, upto 2MB\"\n\t\t}\n\t},\n\tcomponents: {\n\t\tFilePreview,\n\t\tFileBrowser,\n\t\tWebLink\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tfiles: [],\n\t\t\tis_dragging: false,\n\t\t\tcurrently_uploading: -1,\n\t\t\tshow_file_browser: false,\n\t\t\tshow_web_link: false,\n\t\t}\n\t},\n\twatch: {\n\t\tfiles(newvalue, oldvalue) {\n\t\t\tif (!this.allow_multiple && newvalue.length > 1) {\n\t\t\t\tthis.files = [newvalue[newvalue.length - 1]];\n\t\t\t}\n\t\t}\n\t},\n\tcomputed: {\n\t\tupload_complete() {\n\t\t\treturn this.files.length > 0\n\t\t\t\t&& this.files.every(\n\t\t\t\t\tfile => file.total !== 0 && file.progress === file.total);\n\t\t},\n\t\tallow_take_photo() {\n\t\t\treturn window.navigator.mediaDevices;\n\t\t}\n\t},\n\tmethods: {\n\t\tdragover() {\n\t\t\tthis.is_dragging = true;\n\t\t},\n\t\tdragleave() {\n\t\t\tthis.is_dragging = false;\n\t\t},\n\t\tdropfiles(e) {\n\t\t\tthis.is_dragging = false;\n\t\t\tthis.add_files(e.dataTransfer.files);\n\t\t},\n\t\tbrowse_files() {\n\t\t\tthis.$refs.file_input.click();\n\t\t},\n\t\ton_file_input(e) {\n\t\t\tthis.add_files(this.$refs.file_input.files);\n\t\t},\n\t\tremove_file(file) {\n\t\t\tthis.files = this.files.filter(f => f !== file);\n\t\t},\n\t\ttoggle_all_private() {\n\t\t\tlet flag;\n\t\t\tlet private_values = this.files.filter(file => file.private);\n\t\t\tif (private_values.length < this.files.length) {\n\t\t\t\t// there are some private and some public\n\t\t\t\t// set all to private\n\t\t\t\tflag = true;\n\t\t\t} else {\n\t\t\t\t// all are private, set all to public\n\t\t\t\tflag = false;\n\t\t\t}\n\t\t\tthis.files = this.files.map(file => {\n\t\t\t\tfile.private = flag;\n\t\t\t\treturn file;\n\t\t\t});\n\t\t},\n\t\tadd_files(file_array) {\n\t\t\tlet files = Array.from(file_array)\n\t\t\t\t.filter(this.check_restrictions)\n\t\t\t\t.map(file => {\n\t\t\t\t\tlet is_image = file.type.startsWith('image');\n\t\t\t\t\treturn {\n\t\t\t\t\t\tfile_obj: file,\n\t\t\t\t\t\tname: file.name,\n\t\t\t\t\t\tdoc: null,\n\t\t\t\t\t\tprogress: 0,\n\t\t\t\t\t\ttotal: 0,\n\t\t\t\t\t\tfailed: false,\n\t\t\t\t\t\tuploading: false,\n\t\t\t\t\t\tprivate: !is_image\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\tthis.files = this.files.concat(files);\n\t\t},\n\t\tcheck_restrictions(file) {\n\t\t\tlet { max_file_size, allowed_file_types } = this.restrictions;\n\n\t\t\tlet mime_type = file.type;\n\t\t\tlet extension = '.' + file.name.split('.').pop();\n\n\t\t\tlet is_correct_type = true;\n\t\t\tlet valid_file_size = true;\n\n\t\t\tif (allowed_file_types.length) {\n\t\t\t\tis_correct_type = allowed_file_types.some((type) => {\n\t\t\t\t\t// is this is a mime-type\n\t\t\t\t\tif (type.includes('/')) {\n\t\t\t\t\t\tif (!file.type) return false;\n\t\t\t\t\t\treturn file.type.match(type);\n\t\t\t\t\t}\n\n\t\t\t\t\t// otherwise this is likely an extension\n\t\t\t\t\tif (type[0] === '.') {\n\t\t\t\t\t\treturn file.name.endsWith(type);\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (max_file_size && file.size != null) {\n\t\t\t\tvalid_file_size = file.size < max_file_size;\n\t\t\t}\n\n\t\t\tif (!is_correct_type) {\n\t\t\t\tconsole.warn('File skipped because of invalid file type', file);\n\t\t\t}\n\t\t\tif (!valid_file_size) {\n\t\t\t\tconsole.warn('File skipped because of invalid file size', file.size, file);\n\t\t\t}\n\n\t\t\treturn is_correct_type && valid_file_size;\n\t\t},\n\t\tupload_files() {\n\t\t\tif (this.show_file_browser) {\n\t\t\t\treturn this.upload_via_file_browser();\n\t\t\t}\n\t\t\tif (this.show_web_link) {\n\t\t\t\treturn this.upload_via_web_link();\n\t\t\t}\n\t\t\tif (this.as_dataurl) {\n\t\t\t\treturn this.return_as_dataurl();\n\t\t\t}\n\t\t\treturn frappe.run_serially(\n\t\t\t\tthis.files.map(\n\t\t\t\t\t(file, i) =>\n\t\t\t\t\t\t() => this.upload_file(file, i)\n\t\t\t\t)\n\t\t\t);\n\t\t},\n\t\tupload_via_file_browser() {\n\t\t\tlet selected_file = this.$refs.file_browser.selected_node;\n\t\t\tif (!selected_file.value) {\n\t\t\t\tfrappe.msgprint(__('Click on a file to select it.'));\n\t\t\t\treturn Promise.reject();\n\t\t\t}\n\n\t\t\treturn this.upload_file({\n\t\t\t\tfile_url: selected_file.file_url\n\t\t\t});\n\t\t},\n\t\tupload_via_web_link() {\n\t\t\tlet file_url = this.$refs.web_link.url;\n\t\t\tif (!file_url) {\n\t\t\t\tfrappe.msgprint(__('Invalid URL'));\n\t\t\t\treturn Promise.reject();\n\t\t\t}\n\t\t\tfile_url = decodeURI(file_url)\n\t\t\treturn this.upload_file({\n\t\t\t\tfile_url\n\t\t\t});\n\t\t},\n\t\treturn_as_dataurl() {\n\t\t\tlet promises = this.files.map(file =>\n\t\t\t\tfrappe.dom.file_to_base64(file.file_obj)\n\t\t\t\t\t.then(dataurl => {\n\t\t\t\t\t\tfile.dataurl = dataurl;\n\t\t\t\t\t\tthis.on_success && this.on_success(file);\n\t\t\t\t\t})\n\t\t\t);\n\t\t\treturn Promise.all(promises);\n\t\t},\n\t\tupload_file(file, i) {\n\t\t\tthis.currently_uploading = i;\n\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tlet xhr = new XMLHttpRequest();\n\t\t\t\txhr.upload.addEventListener('loadstart', (e) => {\n\t\t\t\t\tfile.uploading = true;\n\t\t\t\t})\n\t\t\t\txhr.upload.addEventListener('progress', (e) => {\n\t\t\t\t\tif (e.lengthComputable) {\n\t\t\t\t\t\tfile.progress = e.loaded;\n\t\t\t\t\t\tfile.total = e.total;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\txhr.upload.addEventListener('load', (e) => {\n\t\t\t\t\tfile.uploading = false;\n\t\t\t\t\tresolve();\n\t\t\t\t})\n\t\t\t\txhr.addEventListener('error', (e) => {\n\t\t\t\t\tfile.failed = true;\n\t\t\t\t\treject();\n\t\t\t\t})\n\t\t\t\txhr.onreadystatechange = () => {\n\t\t\t\t\tif (xhr.readyState == XMLHttpRequest.DONE) {\n\t\t\t\t\t\tif (xhr.status === 200) {\n\t\t\t\t\t\t\tlet r = null;\n\t\t\t\t\t\t\tlet file_doc = null;\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tr = JSON.parse(xhr.responseText);\n\t\t\t\t\t\t\t\tif (r.message.doctype === 'File') {\n\t\t\t\t\t\t\t\t\tfile_doc = r.message;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} catch(e) {\n\t\t\t\t\t\t\t\tr = xhr.responseText;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tfile.doc = file_doc;\n\n\t\t\t\t\t\t\tif (this.on_success) {\n\t\t\t\t\t\t\t\tthis.on_success(file_doc, r);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (xhr.status === 403) {\n\t\t\t\t\t\t\tlet response = JSON.parse(xhr.responseText);\n\t\t\t\t\t\t\tfrappe.msgprint({\n\t\t\t\t\t\t\t\ttitle: __('Not permitted'),\n\t\t\t\t\t\t\t\tindicator: 'red',\n\t\t\t\t\t\t\t\tmessage: response._error_message\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfile.failed = true;\n\t\t\t\t\t\t\tlet error = null;\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\terror = JSON.parse(xhr.responseText);\n\t\t\t\t\t\t\t} catch(e) {\n\t\t\t\t\t\t\t\t// pass\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfrappe.request.cleanup({}, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\txhr.open('POST', '/api/method/upload_file', true);\n\t\t\t\txhr.setRequestHeader('Accept', 'application/json');\n\t\t\t\txhr.setRequestHeader('X-Frappe-CSRF-Token', frappe.csrf_token);\n\n\t\t\t\tlet form_data = new FormData();\n\t\t\t\tif (file.file_obj) {\n\t\t\t\t\tform_data.append('file', file.file_obj, file.name);\n\t\t\t\t}\n\t\t\t\tform_data.append('is_private', +file.private);\n\t\t\t\tform_data.append('folder', this.folder);\n\n\t\t\t\tif (file.file_url) {\n\t\t\t\t\tform_data.append('file_url', file.file_url);\n\t\t\t\t}\n\n\t\t\t\tif (this.doctype && this.docname) {\n\t\t\t\t\tform_data.append('doctype', this.doctype);\n\t\t\t\t\tform_data.append('docname', this.docname);\n\t\t\t\t}\n\n\t\t\t\tif (this.fieldname) {\n\t\t\t\t\tform_data.append('fieldname', this.fieldname);\n\t\t\t\t}\n\n\t\t\t\tif (this.method) {\n\t\t\t\t\tform_data.append('method', this.method);\n\t\t\t\t}\n\n\t\t\t\txhr.send(form_data);\n\t\t\t});\n\t\t},\n\t\tcapture_image() {\n\t\t\tconst capture = new frappe.ui.Capture({\n\t\t\t\tanimate: false,\n\t\t\t\terror: true\n\t\t\t});\n\t\t\tcapture.show();\n\t\t\tcapture.submit(data_url => {\n\t\t\t\tlet filename = `capture_${frappe.datetime.now_datetime().replaceAll(/[: -]/g, '_')}.png`;\n\t\t\t\tthis.url_to_file(data_url, filename, 'image/png').then((file) =>\n\t\t\t\t\tthis.add_files([file])\n\t\t\t\t);\n\t\t\t});\n\t\t},\n\t\turl_to_file(url, filename, mime_type) {\n\t\t\treturn fetch(url)\n\t\t\t\t\t.then(res => res.arrayBuffer())\n\t\t\t\t\t.then(buffer => new File([buffer], filename, { type: mime_type }));\n\t\t},\n\t}\n}\n</script>\n<style>\n.file-upload-area {\n\tmin-height: 16rem;\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tborder: 1px dashed var(--dark-border-color);\n\tborder-radius: var(--border-radius);\n\tcursor: pointer;\n\tbackground-color: var(--bg-color);\n}\n\n.btn-file-upload {\n\tbackground-color: transparent;\n\tborder: none;\n\tbox-shadow: none;\n\tfont-size: var(--text-xs);\n}\n</style>\n"]}, media: undefined });

	  };
	  /* scoped */
	  var __vue_scope_id__$5 = undefined;
	  /* module identifier */
	  var __vue_module_identifier__$5 = undefined;
	  /* functional template */
	  var __vue_is_functional_template__$5 = false;
	  /* component normalizer */
	  function __vue_normalize__$5(
	    template, style, script,
	    scope, functional, moduleIdentifier,
	    createInjector, createInjectorSSR
	  ) {
	    var component = (typeof script === 'function' ? script.options : script) || {};

	    // For security concerns, we use only base name in production mode.
	    component.__file = "/home/user/erpnext-pro/erp-next/apps/frappe/frappe/public/js/frappe/file_uploader/FileUploader.vue";

	    if (!component.render) {
	      component.render = template.render;
	      component.staticRenderFns = template.staticRenderFns;
	      component._compiled = true;

	      if (functional) { component.functional = true; }
	    }

	    component._scopeId = scope;

	    {
	      var hook;
	      if (style) {
	        hook = function(context) {
	          style.call(this, createInjector(context));
	        };
	      }

	      if (hook !== undefined) {
	        if (component.functional) {
	          // register for functional component in vue file
	          var originalRender = component.render;
	          component.render = function renderWithStyleInjection(h, context) {
	            hook.call(context);
	            return originalRender(h, context)
	          };
	        } else {
	          // inject component registration as beforeCreate hook
	          var existing = component.beforeCreate;
	          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
	        }
	      }
	    }

	    return component
	  }
	  /* style inject */
	  function __vue_create_injector__$5() {
	    var head = document.head || document.getElementsByTagName('head')[0];
	    var styles = __vue_create_injector__$5.styles || (__vue_create_injector__$5.styles = {});
	    var isOldIE =
	      typeof navigator !== 'undefined' &&
	      /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

	    return function addStyle(id, css) {
	      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) { return } // SSR styles are present.

	      var group = isOldIE ? css.media || 'default' : id;
	      var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });

	      if (!style.ids.includes(id)) {
	        var code = css.source;
	        var index = style.ids.length;

	        style.ids.push(id);

	        if (isOldIE) {
	          style.element = style.element || document.querySelector('style[data-group=' + group + ']');
	        }

	        if (!style.element) {
	          var el = style.element = document.createElement('style');
	          el.type = 'text/css';

	          if (css.media) { el.setAttribute('media', css.media); }
	          if (isOldIE) {
	            el.setAttribute('data-group', group);
	            el.setAttribute('data-next-index', '0');
	          }

	          head.appendChild(el);
	        }

	        if (isOldIE) {
	          index = parseInt(style.element.getAttribute('data-next-index'));
	          style.element.setAttribute('data-next-index', index + 1);
	        }

	        if (style.element.styleSheet) {
	          style.parts.push(code);
	          style.element.styleSheet.cssText = style.parts
	            .filter(Boolean)
	            .join('\n');
	        } else {
	          var textNode = document.createTextNode(code);
	          var nodes = style.element.childNodes;
	          if (nodes[index]) { style.element.removeChild(nodes[index]); }
	          if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }
	          else { style.element.appendChild(textNode); }
	        }
	      }
	    }
	  }
	  /* style inject SSR */
	  

	  
	  var FileUploaderComponent = __vue_normalize__$5(
	    { render: __vue_render__$5, staticRenderFns: __vue_staticRenderFns__$5 },
	    __vue_inject_styles__$5,
	    __vue_script__$5,
	    __vue_scope_id__$5,
	    __vue_is_functional_template__$5,
	    __vue_module_identifier__$5,
	    __vue_create_injector__$5,
	    undefined
	  );

	class FileUploader {
		constructor(ref) {
		var this$1 = this;
		if ( ref === void 0 ) ref = {};
		var wrapper = ref.wrapper;
		var method = ref.method;
		var on_success = ref.on_success;
		var doctype = ref.doctype;
		var docname = ref.docname;
		var fieldname = ref.fieldname;
		var files = ref.files;
		var folder = ref.folder;
		var restrictions = ref.restrictions;
		var upload_notes = ref.upload_notes;
		var allow_multiple = ref.allow_multiple;
		var as_dataurl = ref.as_dataurl;
		var disable_file_browser = ref.disable_file_browser;
		var frm = ref.frm;


			frm && frm.attachments.max_reached(true);

			if (!wrapper) {
				this.make_dialog();
			} else {
				this.wrapper = wrapper.get ? wrapper.get(0) : wrapper;
			}

			this.$fileuploader = new Vue({
				el: this.wrapper,
				render: function (h) { return h(FileUploaderComponent, {
					props: {
						show_upload_button: !Boolean(this$1.dialog),
						doctype: doctype,
						docname: docname,
						fieldname: fieldname,
						method: method,
						folder: folder,
						on_success: on_success,
						restrictions: restrictions,
						upload_notes: upload_notes,
						allow_multiple: allow_multiple,
						as_dataurl: as_dataurl,
						disable_file_browser: disable_file_browser,
					}
				}); }
			});

			this.uploader = this.$fileuploader.$children[0];

			this.uploader.$watch('files', function (files) {
				var all_private = files.every(function (file) { return file.private; });
				if (this$1.dialog) {
					this$1.dialog.set_secondary_action_label(all_private ? __('Set all public') : __('Set all private'));
				}
			}, { deep: true });

			if (files && files.length) {
				this.uploader.add_files(files);
			}
		}

		upload_files() {
			var this$1 = this;

			this.dialog && this.dialog.get_primary_btn().prop('disabled', true);
			return this.uploader.upload_files()
				.then(function () {
					this$1.dialog && this$1.dialog.hide();
				});
		}

		make_dialog() {
			var this$1 = this;

			this.dialog = new frappe.ui.Dialog({
				title: __('Upload'),
				primary_action_label: __('Upload'),
				primary_action: function () { return this$1.upload_files(); },
				secondary_action_label: __('Set all private'),
				secondary_action: function () {
					this$1.uploader.toggle_all_private();
				}
			});

			this.wrapper = this.dialog.body;
			this.dialog.show();
			this.dialog.$wrapper.on('hidden.bs.modal', function() {
				$(this).data('bs.modal', null);
				$(this).remove();
			});
		}
	}

	// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors

	frappe.provide('frappe.ui');
	frappe.ui.FileUploader = FileUploader;

	// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
	// MIT License. See license.txt

	frappe.provide('frappe.meta.docfield_map');
	frappe.provide('frappe.meta.docfield_copy');
	frappe.provide('frappe.meta.docfield_list');
	frappe.provide('frappe.meta.doctypes');
	frappe.provide("frappe.meta.precision_map");

	frappe.get_meta = function(doctype) {
		return locals['DocType'] ? locals['DocType'][doctype] : null;
	};

	$.extend(frappe.meta, {
		sync: function(doc) {
			$.each(doc.fields, function(i, df) {
				frappe.meta.add_field(df);
			});
			frappe.meta.sync_messages(doc);
			if(doc.__print_formats) { frappe.model.sync(doc.__print_formats); }
			if(doc.__workflow_docs) { frappe.model.sync(doc.__workflow_docs); }
		},

		// build docfield_map and docfield_list
		add_field: function(df) {
			frappe.provide('frappe.meta.docfield_map.' + df.parent);
			frappe.meta.docfield_map[df.parent][df.fieldname || df.label] = df;

			if(!frappe.meta.docfield_list[df.parent])
				{ frappe.meta.docfield_list[df.parent] = []; }

			// check for repeat
			for(var i in frappe.meta.docfield_list[df.parent]) {
				var d = frappe.meta.docfield_list[df.parent][i];
				if(df.fieldname==d.fieldname)
					{ return; } // no repeat
			}
			frappe.meta.docfield_list[df.parent].push(df);
		},

		make_docfield_copy_for: function(doctype, docname, docfield_list) {
			if ( docfield_list === void 0 ) docfield_list=null;

			var c = frappe.meta.docfield_copy;
			if(!c[doctype])
				{ c[doctype] = {}; }
			if(!c[doctype][docname])
				{ c[doctype][docname] = {}; }

			docfield_list = docfield_list || frappe.meta.docfield_list[doctype] || [];
			for(var i=0, j=docfield_list.length; i<j; i++) {
				var df = docfield_list[i];
				c[doctype][docname][df.fieldname || df.label] = copy_dict(df);
			}
		},

		get_field: function(doctype, fieldname, name) {
			var out = frappe.meta.get_docfield(doctype, fieldname, name);

			// search in standard fields
			if (!out) {
				frappe.model.std_fields.every(function(d) {
					if(d.fieldname===fieldname) {
						out = d;
						return false;
					} else {
						return true;
					}
				});
			}
			return out;
		},

		get_docfield: function(doctype, fieldname, name) {
			var fields_dict = frappe.meta.get_docfield_copy(doctype, name);
			return fields_dict ? fields_dict[fieldname] : null;
		},

		set_formatter: function(doctype, fieldname, name, formatter) {
			frappe.meta.get_docfield(doctype, fieldname, name).formatter = formatter;
		},

		set_indicator_formatter: function(doctype, fieldname, name, get_text, get_color) {
			frappe.meta.get_docfield(doctype, fieldname, name).formatter =
				function(value, df, options, doc) {
					return repl('<span class="indicator %(color)s">%(name)s</span>', {
						color: get_color(),
						name: get_text()
					});
				};
		},

		get_docfields: function(doctype, name, filters) {
			var docfield_map = frappe.meta.get_docfield_copy(doctype, name);

			var docfields = frappe.meta.sort_docfields(docfield_map);

			if(filters) {
				docfields = frappe.utils.filter_dict(docfields, filters);
			}

			return docfields;
		},

		get_linked_fields: function(doctype) {
			return $.map(frappe.get_meta(doctype).fields,
				function(d) { return d.fieldtype=="Link" ? d.options : null; });
		},

		get_fields_to_check_permissions: function(doctype) {
			var fields = $.map(frappe.meta.get_docfields(doctype, name), function(df) {
				return (df.fieldtype==="Link" && df.ignore_user_permissions!==1) ? df : null;
			});
			fields = fields.concat({label: "Name", fieldname: name, options: doctype});
			return fields;
		},

		sort_docfields: function(docs) {
			return $.map(docs, function(d) { return d; }).sort(function(a, b) { return a.idx - b.idx });
		},

		get_docfield_copy: function(doctype, name) {
			if(!name) { return frappe.meta.docfield_map[doctype]; }

			if(!(frappe.meta.docfield_copy[doctype] && frappe.meta.docfield_copy[doctype][name])) {
				frappe.meta.make_docfield_copy_for(doctype, name);
			}

			return frappe.meta.docfield_copy[doctype][name];
		},

		get_fieldnames: function(doctype, name, filters) {
			return $.map(frappe.utils.filter_dict(frappe.meta.docfield_map[doctype], filters),
				function(df) { return df.fieldname; });
		},

		has_field: function(dt, fn) {
			var docfield_map = frappe.meta.docfield_map[dt];
			return docfield_map && docfield_map[fn];
		},

		get_table_fields: function(dt) {
			return $.map(frappe.meta.docfield_list[dt], function(d) {
				return frappe.model.table_fields.includes(d.fieldtype) ? d : null});
		},

		get_doctype_for_field: function(doctype, key) {
			var out = null;
			if(in_list(frappe.model.std_fields_list, key)) {
				// standard
				out = doctype;
			} else if(frappe.meta.has_field(doctype, key)) {
				// found in parent
				out = doctype;
			} else {
				frappe.meta.get_table_fields(doctype).every(function(d) {
					if(frappe.meta.has_field(d.options, key)) {
						out = d.options;
						return false;
					}
					return true;
				});

				if(!out) {
					// eslint-disable-next-line
					console.log(__('Warning: Unable to find {0} in any table related to {1}', [key, __(doctype)]));
				}
			}
			return out;
		},

		get_parentfield: function(parent_dt, child_dt) {
			var df = (frappe.get_doc("DocType", parent_dt).fields || [])
				.filter(function (df) { return frappe.model.table_fields.includes(df.fieldtype) && df.options===child_dt; });
			if(!df.length)
				{ throw "parentfield not found for " + parent_dt + ", " + child_dt; }
			return df[0].fieldname;
		},

		get_label: function(dt, fn, dn) {
			var standard = {
				'owner': __('Owner'),
				'creation': __('Created On'),
				'modified': __('Last Modified On'),
				'idx': __('Idx'),
				'name': __('Name'),
				'modified_by': __('Last Modified By')
			};
			if(standard[fn]) {
				return standard[fn];
			} else {
				var df = this.get_docfield(dt, fn, dn);
				return (df ? df.label : "") || fn;
			}
		},

		get_print_formats: function(doctype) {
			var print_format_list = ["Standard"];
			var default_print_format = locals.DocType[doctype].default_print_format;
			var enable_raw_printing = frappe.model.get_doc(":Print Settings", "Print Settings").enable_raw_printing;
			var print_formats = frappe.get_list("Print Format", {doc_type: doctype})
				.sort(function(a, b) { return (a > b) ? 1 : -1; });
			$.each(print_formats, function(i, d) {
				if (
					!in_list(print_format_list, d.name)
					&& d.print_format_type !== 'JS'
					&& (cint(enable_raw_printing) || !d.raw_printing)
				) {
					print_format_list.push(d.name);
				}
			});

			if(default_print_format && default_print_format != "Standard") {
				var index = print_format_list.indexOf(default_print_format);
				print_format_list.splice(index, 1).sort();
				print_format_list.unshift(default_print_format);
			}

			return print_format_list;
		},

		sync_messages: function(doc) {
			if(doc.__messages) {
				$.extend(frappe._messages, doc.__messages);
			}
		},

		get_field_currency: function(df, doc) {
			var currency = frappe.boot.sysdefaults.currency;
			if(!doc && cur_frm)
				{ doc = cur_frm.doc; }

			if(df && df.options) {
				if(doc && df.options.indexOf(":")!=-1) {
					var options = df.options.split(":");
					if(options.length==3) {
						// get reference record e.g. Company
						var docname = doc[options[1]];
						if(!docname && cur_frm) {
							docname = cur_frm.doc[options[1]];
						}
						currency = frappe.model.get_value(options[0], docname, options[2]) ||
							frappe.model.get_value(":" + options[0], docname, options[2]) ||
							currency;
					}
				} else if(doc && doc[df.options]) {
					currency = doc[df.options];
				} else if(cur_frm && cur_frm.doc[df.options]) {
					currency = cur_frm.doc[df.options];
				}
			}
			return currency;
		},

		get_field_precision: function(df, doc) {
			var precision = null;
			if (df && df.precision) {
				precision = cint(df.precision);
			} else if(df && df.fieldtype === "Currency") {
				precision = cint(frappe.defaults.get_default("currency_precision"));
				if(!precision) {
					var number_format = get_number_format();
					var number_format_info = get_number_format_info(number_format);
					precision = number_format_info.precision;
				}
			} else {
				precision = cint(frappe.defaults.get_default("float_precision")) || 3;
			}
			return precision;
		}
	});

	// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
	// MIT License. See license.txt

	frappe.provide('frappe.model');

	$.extend(frappe.model, {
		no_value_type: ['Section Break', 'Column Break', 'HTML', 'Table', 'Table MultiSelect',
			'Button', 'Image', 'Fold', 'Heading'],

		layout_fields: ['Section Break', 'Column Break', 'Fold'],

		std_fields_list: ['name', 'owner', 'creation', 'modified', 'modified_by',
			'_user_tags', '_comments', '_assign', '_liked_by', 'docstatus',
			'parent', 'parenttype', 'parentfield', 'idx'],

		core_doctypes_list: ['DocType', 'DocField', 'DocPerm', 'User', 'Role', 'Has Role',
			'Page', 'Module Def', 'Print Format', 'Report', 'Customize Form',
			'Customize Form Field', 'Property Setter', 'Custom Field', 'Client Script'],

		std_fields: [
			{fieldname:'name', fieldtype:'Link', label:__('ID')},
			{fieldname:'owner', fieldtype:'Link', label:__('Created By'), options: 'User'},
			{fieldname:'idx', fieldtype:'Int', label:__('Index')},
			{fieldname:'creation', fieldtype:'Date', label:__('Created On')},
			{fieldname:'modified', fieldtype:'Date', label:__('Last Updated On')},
			{fieldname:'modified_by', fieldtype:'Data', label:__('Last Updated By')},
			{fieldname:'_user_tags', fieldtype:'Data', label:__('Tags')},
			{fieldname:'_liked_by', fieldtype:'Data', label:__('Liked By')},
			{fieldname:'_comments', fieldtype:'Text', label:__('Comments')},
			{fieldname:'_assign', fieldtype:'Text', label:__('Assigned To')},
			{fieldname:'docstatus', fieldtype:'Int', label:__('Document Status')} ],

		numeric_fieldtypes: ["Int", "Float", "Currency", "Percent", "Duration"],

		std_fields_table: [
			{fieldname:'parent', fieldtype:'Data', label:__('Parent')} ],

		table_fields: ['Table', 'Table MultiSelect'],

		new_names: {},
		events: {},
		user_settings: {},

		init: function() {
			// setup refresh if the document is updated somewhere else
			frappe.realtime.on("doc_update", function(data) {
				// set list dirty
				frappe.views.ListView.trigger_list_update(data);
				var doc = locals[data.doctype] && locals[data.doctype][data.name];

				if(doc) {
					// current document is dirty, show message if its not me
					if(frappe.get_route()[0]==="Form" && cur_frm.doc.doctype===doc.doctype && cur_frm.doc.name===doc.name) {
						if(!frappe.ui.form.is_saving && data.modified!=cur_frm.doc.modified) {
							doc.__needs_refresh = true;
							cur_frm.check_doctype_conflict();
						}
					} else {
						if(!doc.__unsaved) {
							// no local changes, remove from locals
							frappe.model.remove_from_locals(doc.doctype, doc.name);
						} else {
							// show message when user navigates back
							doc.__needs_refresh = true;
						}
					}
				}
			});

			frappe.realtime.on("list_update", function(data) {
				frappe.views.ListView.trigger_list_update(data);
			});

		},

		is_value_type: function(fieldtype) {
			if (typeof fieldtype == 'object') {
				fieldtype = fieldtype.fieldtype;
			}
			// not in no-value type
			return frappe.model.no_value_type.indexOf(fieldtype)===-1;
		},

		is_non_std_field: function(fieldname) {
			return !frappe.model.std_fields_list.includes(fieldname);
		},

		get_std_field: function(fieldname, ignore) {
			if ( ignore === void 0 ) ignore=false;

			var docfield = $.map([].concat(frappe.model.std_fields).concat(frappe.model.std_fields_table),
				function(d) {
					if(d.fieldname==fieldname) { return d; }
				});
			if (!docfield.length) {
				//Standard fields are ignored in case of adding columns as a result of groupby
				if (ignore) {
					return {fieldname: fieldname};
				} else {
					frappe.msgprint(__("Unknown Column: {0}", [fieldname]));
				}
			}
			return docfield[0];
		},

		get_from_localstorage: function(doctype) {
			if (localStorage["_doctype:" + doctype]) {
				return JSON.parse(localStorage["_doctype:" + doctype]);
			}
		},

		set_in_localstorage: function(doctype, docs) {
			try {
				localStorage["_doctype:" + doctype] = JSON.stringify(docs);
			} catch(e) {
				// if quota is exceeded, clear local storage and set item
				console.warn("localStorage quota exceeded, clearing doctype cache");
				frappe.model.clear_local_storage();
				localStorage["_doctype:" + doctype] = JSON.stringify(docs);
			}
		},

		clear_local_storage: function() {
			for(var key in localStorage) {
				if (key.startsWith("_doctype:")) {
					localStorage.removeItem(key);
				}
			}
		},

		with_doctype: function(doctype, callback, async) {
			if(locals.DocType[doctype]) {
				callback && callback();
			} else {
				var cached_timestamp = null;
				var cached_doc = null;

				var cached_docs = frappe.model.get_from_localstorage(doctype);

				if (cached_docs) {
					cached_doc = cached_docs.filter(function (doc) { return doc.name === doctype; })[0];
					if(cached_doc) {
						cached_timestamp = cached_doc.modified;
					}
				}

				return frappe.call({
					method:'frappe.desk.form.load.getdoctype',
					type: "GET",
					args: {
						doctype: doctype,
						with_parent: 1,
						cached_timestamp: cached_timestamp
					},
					async: async,
					callback: function(r) {
						if(r.exc) {
							frappe.msgprint(__("Unable to load: {0}", [__(doctype)]));
							throw "No doctype";
						}
						if(r.message=="use_cache") {
							frappe.model.sync(cached_doc);
						} else {
							frappe.model.set_in_localstorage(doctype, r.docs);
						}
						frappe.model.init_doctype(doctype);

						if(r.user_settings) {
							// remember filters and other settings from last view
							frappe.model.user_settings[doctype] = JSON.parse(r.user_settings);
							frappe.model.user_settings[doctype].updated_on = moment().toString();
						}
						callback && callback(r);
					}
				});
			}
		},

		init_doctype: function(doctype) {
			var meta = locals.DocType[doctype];
			if(meta.__list_js) {
				eval(meta.__list_js);
			}
			if(meta.__custom_list_js) {
				eval(meta.__custom_list_js);
			}
			if(meta.__calendar_js) {
				eval(meta.__calendar_js);
			}
			if(meta.__map_js) {
				eval(meta.__map_js);
			}
			if(meta.__tree_js) {
				eval(meta.__tree_js);
			}
			if(meta.__templates) {
				$.extend(frappe.templates, meta.__templates);
			}
		},

		with_doc: function(doctype, name, callback) {
			return new Promise(function (resolve) {
				if(!name) { name = doctype; } // single type
				if(locals[doctype] && locals[doctype][name] && frappe.model.get_docinfo(doctype, name)) {
					callback && callback(name);
					resolve(frappe.get_doc(doctype, name));
				} else {
					return frappe.call({
						method: 'frappe.desk.form.load.getdoc',
						type: "GET",
						args: {
							doctype: doctype,
							name: name
						},
						callback: function(r) {
							callback && callback(name, r);
							resolve(frappe.get_doc(doctype, name));
						}
					});
				}
			});
		},

		get_docinfo: function(doctype, name) {
			return frappe.model.docinfo[doctype] && frappe.model.docinfo[doctype][name] || null;
		},

		set_docinfo: function(doctype, name, key, value) {
			if (frappe.model.docinfo[doctype] && frappe.model.docinfo[doctype][name]) {
				frappe.model.docinfo[doctype][name][key] = value;
			}
		},

		get_shared: function(doctype, name) {
			return frappe.model.get_docinfo(doctype, name).shared;
		},

		get_server_module_name: function(doctype) {
			var dt = frappe.model.scrub(doctype);
			var module = frappe.model.scrub(locals.DocType[doctype].module);
			var app = frappe.boot.module_app[module];
			return app + "." + module + '.doctype.' + dt + '.' + dt;
		},

		scrub: function(txt) {
			return txt.replace(/ /g, "_").toLowerCase();  // use to slugify or create a slug, a "code-friendly" string
		},

		unscrub: function(txt) {
			return __(txt || '').replace(/-|_/g, " ").replace(/\w*/g,
	            function(keywords){return keywords.charAt(0).toUpperCase() + keywords.substr(1).toLowerCase();});
		},

		can_create: function(doctype) {
			return frappe.boot.user.can_create.indexOf(doctype)!==-1;
		},

		can_select: function(doctype) {
			if (frappe.boot.user) {
				return frappe.boot.user.can_select.indexOf(doctype)!==-1;
			}
		},

		can_read: function(doctype) {
			if (frappe.boot.user) {
				return frappe.boot.user.can_read.indexOf(doctype)!==-1;
			}
		},

		can_write: function(doctype) {
			return frappe.boot.user.can_write.indexOf(doctype)!==-1;
		},

		can_get_report: function(doctype) {
			return frappe.boot.user.can_get_report.indexOf(doctype)!==-1;
		},

		can_delete: function(doctype) {
			if(!doctype) { return false; }
			return frappe.boot.user.can_delete.indexOf(doctype)!==-1;
		},

		can_cancel: function(doctype) {
			if(!doctype) { return false; }
			return frappe.boot.user.can_cancel.indexOf(doctype)!==-1;
		},

		has_workflow: function(doctype) {
			return frappe.get_list('Workflow', {'document_type': doctype,
				'is_active': 1}).length;
		},

		is_submittable: function(doctype) {
			if(!doctype) { return false; }
			return locals.DocType[doctype]
				&& locals.DocType[doctype].is_submittable;
		},

		is_table: function(doctype) {
			if(!doctype) { return false; }
			return locals.DocType[doctype] && locals.DocType[doctype].istable;
		},

		is_single: function(doctype) {
			if(!doctype) { return false; }
			return frappe.boot.single_types.indexOf(doctype) != -1;
		},

		is_tree: function(doctype) {
			if (!doctype) { return false; }
			return frappe.boot.treeviews.indexOf(doctype) != -1;
		},

		is_fresh: function is_fresh(doc) {
			// returns true if document has been recently loaded (5 seconds ago)
			return doc && doc.__last_sync_on && ((new Date() - doc.__last_sync_on)) < 5000;
		},

		can_import: function(doctype, frm) {
			// system manager can always import
			if(frappe.user_roles.includes("System Manager")) { return true; }

			if(frm) { return frm.perm[0].import===1; }
			return frappe.boot.user.can_import.indexOf(doctype)!==-1;
		},

		can_export: function(doctype, frm) {
			// system manager can always export
			if(frappe.user_roles.includes("System Manager")) { return true; }

			if(frm) { return frm.perm[0].export===1; }
			return frappe.boot.user.can_export.indexOf(doctype)!==-1;
		},

		can_print: function(doctype, frm) {
			if(frm) { return frm.perm[0].print===1; }
			return frappe.boot.user.can_print.indexOf(doctype)!==-1;
		},

		can_email: function(doctype, frm) {
			if(frm) { return frm.perm[0].email===1; }
			return frappe.boot.user.can_email.indexOf(doctype)!==-1;
		},

		can_share: function(doctype, frm) {
			if(frm) {
				return frm.perm[0].share===1;
			}
			return frappe.boot.user.can_share.indexOf(doctype)!==-1;
		},

		can_set_user_permissions: function(doctype, frm) {
			// system manager can always set user permissions
			if(frappe.user_roles.includes("System Manager")) { return true; }

			if(frm) { return frm.perm[0].set_user_permissions===1; }
			return frappe.boot.user.can_set_user_permissions.indexOf(doctype)!==-1;
		},

		has_value: function(dt, dn, fn) {
			// return true if property has value
			var val = locals[dt] && locals[dt][dn] && locals[dt][dn][fn];
			var df = frappe.meta.get_docfield(dt, fn, dn);

			if(frappe.model.table_fields.includes(df.fieldtype)) {
				var ret = false;
				$.each(locals[df.options] || {}, function(k,d) {
					if(d.parent==dn && d.parenttype==dt && d.parentfield==df.fieldname) {
						ret = true;
						return false;
					}
				});
			} else {
				var ret = !is_null(val);
			}
			return ret ? true : false;
		},

		get_list: function(doctype, filters) {
			var docsdict = locals[doctype] || locals[":" + doctype] || {};
			if($.isEmptyObject(docsdict))
				{ return []; }
			return frappe.utils.filter_dict(docsdict, filters);
		},

		get_value: function(doctype, filters, fieldname, callback) {
			if(callback) {
				frappe.call({
					method:"frappe.client.get_value",
					args: {
						doctype: doctype,
						fieldname: fieldname,
						filters: filters
					},
					callback: function(r) {
						if(!r.exc) {
							callback(r.message);
						}
					}
				});
			} else {
				if(typeof filters==="string" && locals[doctype] && locals[doctype][filters]) {
					return locals[doctype][filters][fieldname];
				} else {
					var l = frappe.get_list(doctype, filters);
					return (l.length && l[0]) ? l[0][fieldname] : null;
				}
			}
		},

		set_value: function(doctype, docname, fieldname, value, fieldtype) {
			/* help: Set a value locally (if changed) and execute triggers */

			var doc;
			if ($.isPlainObject(doctype)) {
				// first parameter is the doc, shift parameters to the left
				doc = doctype; fieldname = docname; value = fieldname;
			} else {
				doc = locals[doctype] && locals[doctype][docname];
			}

			var to_update = fieldname;
			var tasks = [];
			if(!$.isPlainObject(to_update)) {
				to_update = {};
				to_update[fieldname] = value;
			}

			$.each(to_update, function (key, value) {
				if (doc && doc[key] !== value) {
					if(doc.__unedited && !(!doc[key] && !value)) {
						// unset unedited flag for virgin rows
						doc.__unedited = false;
					}

					doc[key] = value;
					tasks.push(function () { return frappe.model.trigger(key, value, doc); });
				} else {
					// execute link triggers (want to reselect to execute triggers)
					if(in_list(["Link", "Dynamic Link"], fieldtype) && doc) {
						tasks.push(function () { return frappe.model.trigger(key, value, doc); });
					}
				}
			});

			return frappe.run_serially(tasks);
		},

		on: function(doctype, fieldname, fn) {
			/* help: Attach a trigger on change of a particular field.
			To trigger on any change in a particular doctype, use fieldname as "*"
			*/
			/* example: frappe.model.on("Customer", "age", function(fieldname, value, doc) {
			  if(doc.age < 16) {
			   	frappe.msgprint("Warning, Customer must atleast be 16 years old.");
			    raise "CustomerAgeError";
			  }
			}) */
			frappe.provide("frappe.model.events." + doctype);
			if(!frappe.model.events[doctype][fieldname]) {
				frappe.model.events[doctype][fieldname] = [];
			}
			frappe.model.events[doctype][fieldname].push(fn);
		},

		trigger: function(fieldname, value, doc) {
			var tasks = [];

			function enqueue_events(events) {
				if (!events) { return; }

				var loop = function () {
					var fn = list[i];

					if (!fn) { return; }

					tasks.push(function () {
						var return_value = fn(fieldname, value, doc);

						// if the trigger returns a promise, return it,
						// or use the default promise frappe.after_ajax
						if (return_value && return_value.then) {
							return return_value;
						} else {
							return frappe.after_server_call();
						}
					});
				};

				for (var i = 0, list = events; i < list.length; i += 1) loop();
			}
			if(frappe.model.events[doc.doctype]) {
				enqueue_events(frappe.model.events[doc.doctype][fieldname]);
				enqueue_events(frappe.model.events[doc.doctype]['*']);
			}

			return frappe.run_serially(tasks);
		},

		get_doc: function(doctype, name) {
			if(!name) { name = doctype; }
			if($.isPlainObject(name)) {
				var doc = frappe.get_list(doctype, name);
				return doc && doc.length ? doc[0] : null;
			}
			return locals[doctype] ? locals[doctype][name] : null;
		},

		get_children: function(doctype, parent, parentfield, filters) {
			if($.isPlainObject(doctype)) {
				var doc = doctype;
				var filters = parentfield;
				var parentfield = parent;
			} else {
				var doc = frappe.get_doc(doctype, parent);
			}

			var children = doc[parentfield] || [];
			if(filters) {
				return frappe.utils.filter_dict(children, filters);
			} else {
				return children;
			}
		},

		clear_table: function(doc, parentfield) {
			for (var i=0, l=(doc[parentfield] || []).length; i<l; i++) {
				var d = doc[parentfield][i];
				delete locals[d.doctype][d.name];
			}
			doc[parentfield] = [];
		},

		remove_from_locals: function(doctype, name) {
			this.clear_doc(doctype, name);
			if(frappe.views.formview[doctype]) {
				delete frappe.views.formview[doctype].frm.opendocs[name];
			}
		},

		clear_doc: function(doctype, name) {
			var doc = locals[doctype] && locals[doctype][name];
			if(!doc) { return; }

			var parent = null;
			if(doc.parenttype) {
				var parent = doc.parent,
					parenttype = doc.parenttype,
					parentfield = doc.parentfield;
			}
			delete locals[doctype][name];
			if(parent) {
				var parent_doc = locals[parenttype][parent];
				var newlist = [], idx = 1;
				$.each(parent_doc[parentfield], function(i, d) {
					if(d.name!=name) {
						newlist.push(d);
						d.idx = idx;
						idx++;
					}
					parent_doc[parentfield] = newlist;
				});
			}
		},

		get_no_copy_list: function(doctype) {
			var no_copy_list = ['name','amended_from','amendment_date','cancel_reason'];

			var docfields = frappe.get_doc("DocType", doctype).fields || [];
			for(var i=0, j=docfields.length; i<j; i++) {
				var df = docfields[i];
				if(cint(df.no_copy)) { no_copy_list.push(df.fieldname); }
			}

			return no_copy_list;
		},

		delete_doc: function(doctype, docname, callback) {
			var title = docname;
			var title_field = frappe.get_meta(doctype).title_field;
			if (frappe.get_meta(doctype).autoname == "hash" && title_field) {
				var title = frappe.model.get_value(doctype, docname, title_field);
				title += " (" + docname + ")";
			}
			frappe.confirm(__("Permanently delete {0}?", [title]), function() {
				return frappe.call({
					method: 'frappe.client.delete',
					args: {
						doctype: doctype,
						name: docname
					},
					callback: function(r, rt) {
						if(!r.exc) {
							frappe.utils.play_sound("delete");
							frappe.model.clear_doc(doctype, docname);
							if(callback) { callback(r,rt); }
						}
					}
				})
			});
		},

		rename_doc: function(doctype, docname, callback) {
				var message = __("Merge with existing");
				var warning = __("This cannot be undone");
				var merge_label = message + " <b>(" + warning + ")</b>";

			var d = new frappe.ui.Dialog({
				title: __("Rename {0}", [__(docname)]),
				fields: [
					{label: __("New Name"), fieldname: "new_name", fieldtype: "Data", reqd: 1, "default": docname},
					{label: merge_label, fieldtype: "Check", fieldname: "merge"} ]
			});

			d.set_primary_action(__("Rename"), function() {
				var args = d.get_values();
				if(!args) { return; }
				return frappe.call({
					method:"frappe.rename_doc",
					args: {
						doctype: doctype,
						old: docname,
						new: args.new_name,
						merge: args.merge
					},
					btn: d.get_primary_btn(),
					callback: function(r,rt) {
						if(!r.exc) {
							$(document).trigger('rename', [doctype, docname,
								r.message || args.new_name]);
							if(locals[doctype] && locals[doctype][docname])
								{ delete locals[doctype][docname]; }
							d.hide();
							if(callback)
								{ callback(r.message); }
						}
					}
				});
			});
			d.show();
		},

		round_floats_in: function(doc, fieldnames) {
			if(!fieldnames) {
				fieldnames = frappe.meta.get_fieldnames(doc.doctype, doc.parent,
					{"fieldtype": ["in", ["Currency", "Float"]]});
			}
			for(var i=0, j=fieldnames.length; i < j; i++) {
				var fieldname = fieldnames[i];
				doc[fieldname] = flt(doc[fieldname], precision(fieldname, doc));
			}
		},

		validate_missing: function(doc, fieldname) {
			if(!doc[fieldname]) {
				frappe.throw(__("Please specify") + ": " +
					__(frappe.meta.get_label(doc.doctype, fieldname, doc.parent || doc.name)));
			}
		},

		get_all_docs: function(doc) {
			var all = [doc];
			for(var key in doc) {
				if($.isArray(doc[key])) {
					var children = doc[key];
					for (var i=0, l=children.length; i < l; i++) {
						all.push(children[i]);
					}
				}
			}
			return all;
		},

		get_full_column_name: function(fieldname, doctype) {
			if (fieldname.includes('`tab')) { return fieldname; }
			return '`tab' + doctype + '`.`' + fieldname + '`';
		},

		is_numeric_field: function(fieldtype) {
			if (!fieldtype) { return; }
			if (typeof fieldtype === 'object') {
				fieldtype = fieldtype.fieldtype;
			}
			return frappe.model.numeric_fieldtypes.includes(fieldtype);
		}
	});

	// legacy
	frappe.get_doc = frappe.model.get_doc;
	frappe.get_children = frappe.model.get_children;
	frappe.get_list = frappe.model.get_list;

	// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
	// MIT License. See license.txt

	frappe.provide("frappe.perm");

	// backward compatibilty
	Object.assign(window, {
		READ: "read",
		WRITE: "write",
		CREATE: "create",
		DELETE: "delete",
		SUBMIT: "submit",
		CANCEL: "cancel",
		AMEND: "amend",
	});

	$.extend(frappe.perm, {
		rights: ["read", "write", "create", "delete", "submit", "cancel", "amend",
			"report", "import", "export", "print", "email", "share", "set_user_permissions"],

		doctype_perm: {},

		has_perm: function (doctype, permlevel, ptype, doc) {
			if (!permlevel) { permlevel = 0; }
			if (!frappe.perm.doctype_perm[doctype]) {
				frappe.perm.doctype_perm[doctype] = frappe.perm.get_perm(doctype);
			}

			var perms = frappe.perm.doctype_perm[doctype];

			if (!perms || !perms[permlevel]) { return false; }

			var perm = !!perms[permlevel][ptype];

			if (permlevel === 0 && perm && doc) {
				var docinfo = frappe.model.get_docinfo(doctype, doc.name);
				if (docinfo && !docinfo.permissions[ptype])
					{ perm = false; }
			}

			return perm;
		},

		get_perm: function (doctype, doc) {
			var perm = [{ read: 0, permlevel: 0 }];

			var meta = frappe.get_doc("DocType", doctype);
			var user  = frappe.session.user;

			if (user === "Administrator" || frappe.user_roles.includes("Administrator")) {
				perm[0].read = 1;
			}

			if (!meta) { return perm; }

			perm = frappe.perm.get_role_permissions(meta);

			if (doc) {
				// apply user permissions via docinfo (which is processed server-side)
				var docinfo = frappe.model.get_docinfo(doctype, doc.name);
				if (docinfo && docinfo.permissions) {
					Object.keys(docinfo.permissions).forEach(function (ptype) {
						perm[0][ptype] = docinfo.permissions[ptype];
					});
				}

				// if owner
				if (!$.isEmptyObject(perm[0].if_owner)) {
					if (doc.owner === user) {
						$.extend(perm[0], perm[0].if_owner);
					} else {
						// not owner, remove permissions
						$.each(perm[0].if_owner, function (ptype) {
							if (perm[0].if_owner[ptype]) {
								perm[0][ptype] = 0;
							}
						});
					}
				}

				// apply permissions from shared
				if (docinfo && docinfo.shared) {
					for (var i = 0; i < docinfo.shared.length; i++) {
						var s = docinfo.shared[i];
						if (s.user === user) {
							perm[0]["read"] = perm[0]["read"] || s.read;
							perm[0]["write"] = perm[0]["write"] || s.write;
							perm[0]["submit"] = perm[0]["submit"] || s.submit;
							perm[0]["share"] = perm[0]["share"] || s.share;

							if (s.read) {
								// also give print, email permissions if read
								// and these permissions exist at level [0]
								perm[0].email = frappe.boot.user.can_email.indexOf(doctype) !== -1 ? 1 : 0;
								perm[0].print = frappe.boot.user.can_print.indexOf(doctype) !== -1 ? 1 : 0;
							}
						}
					}
				}

			}

			if (frappe.model.can_read(doctype) && !perm[0].read) {
				// read via sharing
				perm[0].read = 1;
			}

			return perm;
		},

		get_role_permissions: function (meta) {
			var perm = [{ read: 0, permlevel: 0 }];
			// Returns a `dict` of evaluated Role Permissions
			(meta.permissions || []).forEach(function (p) {
				// if user has this role
				var permlevel = cint(p.permlevel);
				if (!perm[permlevel]) {
					perm[permlevel] = {};
					perm[permlevel]["permlevel"] = permlevel;
				}

				if (frappe.user_roles.includes(p.role)) {
					frappe.perm.rights.forEach(function (right) {
						var value = perm[permlevel][right] || (p[right] || 0);
						if (value) {
							perm[permlevel][right] = value;
						}
					});
				}
			});

			// fill gaps with empty object
			perm = perm.map(function (p) { return p || {}; });
			return perm;
		},

		get_match_rules: function (doctype, ptype) {
			var match_rules = [];

			if (!ptype) { ptype = "read"; }

			var perm = frappe.perm.get_perm(doctype);

			var user_permissions = frappe.defaults.get_user_permissions();

			if (user_permissions && !$.isEmptyObject(user_permissions)) {
				var rules = {};
				var fields_to_check = frappe.meta.get_fields_to_check_permissions(doctype);
				$.each(fields_to_check, function (i, df) {
					var user_permissions_for_doctype = user_permissions[df.options] || [];
					var allowed_records = frappe.perm.get_allowed_docs_for_doctype(user_permissions_for_doctype, doctype);
					if (allowed_records.length) {
						rules[df.label] = allowed_records;
					}
				});
				if (!$.isEmptyObject(rules)) {
					match_rules.push(rules);
				}
			}

			if (perm[0].if_owner && perm[0].read) {
				match_rules.push({ "Owner": frappe.session.user });
			}
			return match_rules;
		},

		get_field_display_status: function (df, doc, perm, explain) {
			// returns the display status of a particular field
			// returns one of "Read", "Write" or "None"
			if (!perm && doc) {
				perm = frappe.perm.get_perm(doc.doctype, doc);
			}

			if (!perm) {
				return (df && (cint(df.hidden) || cint(df.hidden_due_to_dependency))) ? "None" : "Write";
			}

			if (!df.permlevel) { df.permlevel = 0; }
			var p = perm[df.permlevel];
			var status = "None";

			// permission
			if (p) {
				if (p.write && !df.disabled) {
					status = "Write";
				} else if (p.read) {
					status = "Read";
				}
			}
			if (explain) { console.log("By Permission:" + status); }

			// hidden
			if (cint(df.hidden)) { status = "None"; }
			if (explain) { console.log("By Hidden:" + status); }

			// hidden due to dependency
			if (cint(df.hidden_due_to_dependency)) { status = "None"; }
			if (explain) { console.log("By Hidden Due To Dependency:" + status); }

			if (!doc) {
				return status;
			}

			// submit
			if (status === "Write" && cint(doc.docstatus) > 0) { status = "Read"; }
			if (explain) { console.log("By Submit:" + status); }

			// allow on submit
			// let allow_on_submit = df.fieldtype==="Table" ? 0 : cint(df.allow_on_submit);
			var allow_on_submit = cint(df.allow_on_submit);
			if (status === "Read" && allow_on_submit && cint(doc.docstatus) === 1 && p.write) {
				status = "Write";
			}
			if (explain) { console.log("By Allow on Submit:" + status); }

			// workflow state
			if (status === "Read" && cur_frm && cur_frm.state_fieldname) {
				// fields updated by workflow must be read-only
				if (cint(cur_frm.read_only) ||
					in_list(cur_frm.states.update_fields, df.fieldname) ||
					df.fieldname == cur_frm.state_fieldname) {
					status = "Read";
				}
			}
			if (explain) { console.log("By Workflow:" + status); }

			// read only field is checked
			if (status === "Write" && cint(df.read_only)) {
				status = "Read";
			}
			if (explain) { console.log("By Read Only:" + status); }

			if (status === "Write" && df.set_only_once && !doc.__islocal) {
				status = "Read";
			}
			if (explain) { console.log("By Set Only Once:" + status); }

			return status;
		},

		is_visible: function (df, doc, perm) {
			if (typeof df === 'string') {
				// df is fieldname
				df = frappe.meta.get_docfield(doc.doctype, df, doc.parent || doc.name);
			}

			var status = frappe.perm.get_field_display_status(df, doc, perm);

			return status === "None" ? false : true;
		},

		get_allowed_docs_for_doctype: function (user_permissions, doctype) {
			// returns docs from the list of user permissions that are allowed under provided doctype
			return frappe.perm.filter_allowed_docs_for_doctype(user_permissions, doctype, false);
		},

		filter_allowed_docs_for_doctype: function (user_permissions, doctype, with_default_doc) {
			if ( with_default_doc === void 0 ) with_default_doc=true;

			// returns docs from the list of user permissions that are allowed under provided doctype
			// also returns default doc when with_default_doc is set
			var filtered_perms = (user_permissions || []).filter(function (perm) {
				return (perm.applicable_for === doctype || !perm.applicable_for);
			});

			var allowed_docs = (filtered_perms).map(function (perm) { return perm.doc; });

			if (with_default_doc) {
				var default_doc = allowed_docs.length === 1 ? allowed_docs : filtered_perms
					.filter(function (perm) { return perm.is_default; })
					.map(function (record) { return record.doc; });

				return {
					allowed_records: allowed_docs,
					default_doc: default_doc[0]
				};
			} else {
				return allowed_docs;
			}
		}
	});

	function deepFreeze(obj) {
	    if (obj instanceof Map) {
	        obj.clear = obj.delete = obj.set = function () {
	            throw new Error('map is read-only');
	        };
	    } else if (obj instanceof Set) {
	        obj.add = obj.clear = obj.delete = function () {
	            throw new Error('set is read-only');
	        };
	    }

	    // Freeze self
	    Object.freeze(obj);

	    Object.getOwnPropertyNames(obj).forEach(function (name) {
	        var prop = obj[name];

	        // Freeze prop if it is an object
	        if (typeof prop == 'object' && !Object.isFrozen(prop)) {
	            deepFreeze(prop);
	        }
	    });

	    return obj;
	}

	var deepFreezeEs6 = deepFreeze;
	var _default = deepFreeze;
	deepFreezeEs6.default = _default;

	class Response {
	  /**
	   * @param {CompiledMode} mode
	   */
	  constructor(mode) {
	    // eslint-disable-next-line no-undefined
	    if (mode.data === undefined) { mode.data = {}; }

	    this.data = mode.data;
	  }

	  ignoreMatch() {
	    this.ignore = true;
	  }
	}

	/**
	 * @param {string} value
	 * @returns {string}
	 */
	function escapeHTML(value) {
	  return value
	    .replace(/&/g, '&amp;')
	    .replace(/</g, '&lt;')
	    .replace(/>/g, '&gt;')
	    .replace(/"/g, '&quot;')
	    .replace(/'/g, '&#x27;');
	}

	/**
	 * performs a shallow merge of multiple objects into one
	 *
	 * @template T
	 * @param {T} original
	 * @param {Record<string,any>[]} objects
	 * @returns {T} a single new object
	 */
	function inherit(original) {
	  var objects = [], len = arguments.length - 1;
	  while ( len-- > 0 ) objects[ len ] = arguments[ len + 1 ];

	  /** @type Record<string,any> */
	  var result = Object.create(null);

	  for (var key in original) {
	    result[key] = original[key];
	  }
	  objects.forEach(function(obj) {
	    for (var key in obj) {
	      result[key] = obj[key];
	    }
	  });
	  return /** @type {T} */ (result);
	}

	/* Stream merging */

	/**
	 * @typedef Event
	 * @property {'start'|'stop'} event
	 * @property {number} offset
	 * @property {Node} node
	 */

	/**
	 * @param {Node} node
	 */
	function tag(node) {
	  return node.nodeName.toLowerCase();
	}

	/**
	 * @param {Node} node
	 */
	function nodeStream(node) {
	  /** @type Event[] */
	  var result = [];
	  (function _nodeStream(node, offset) {
	    for (var child = node.firstChild; child; child = child.nextSibling) {
	      if (child.nodeType === 3) {
	        offset += child.nodeValue.length;
	      } else if (child.nodeType === 1) {
	        result.push({
	          event: 'start',
	          offset: offset,
	          node: child
	        });
	        offset = _nodeStream(child, offset);
	        // Prevent void elements from having an end tag that would actually
	        // double them in the output. There are more void elements in HTML
	        // but we list only those realistically expected in code display.
	        if (!tag(child).match(/br|hr|img|input/)) {
	          result.push({
	            event: 'stop',
	            offset: offset,
	            node: child
	          });
	        }
	      }
	    }
	    return offset;
	  })(node, 0);
	  return result;
	}

	/**
	 * @param {any} original - the original stream
	 * @param {any} highlighted - stream of the highlighted source
	 * @param {string} value - the original source itself
	 */
	function mergeStreams(original, highlighted, value) {
	  var processed = 0;
	  var result = '';
	  var nodeStack = [];

	  function selectStream() {
	    if (!original.length || !highlighted.length) {
	      return original.length ? original : highlighted;
	    }
	    if (original[0].offset !== highlighted[0].offset) {
	      return (original[0].offset < highlighted[0].offset) ? original : highlighted;
	    }

	    /*
	    To avoid starting the stream just before it should stop the order is
	    ensured that original always starts first and closes last:

	    if (event1 == 'start' && event2 == 'start')
	      return original;
	    if (event1 == 'start' && event2 == 'stop')
	      return highlighted;
	    if (event1 == 'stop' && event2 == 'start')
	      return original;
	    if (event1 == 'stop' && event2 == 'stop')
	      return highlighted;

	    ... which is collapsed to:
	    */
	    return highlighted[0].event === 'start' ? original : highlighted;
	  }

	  /**
	   * @param {Node} node
	   */
	  function open(node) {
	    /** @param {Attr} attr */
	    function attributeString(attr) {
	      return ' ' + attr.nodeName + '="' + escapeHTML(attr.value) + '"';
	    }
	    // @ts-ignore
	    result += '<' + tag(node) + [].map.call(node.attributes, attributeString).join('') + '>';
	  }

	  /**
	   * @param {Node} node
	   */
	  function close(node) {
	    result += '</' + tag(node) + '>';
	  }

	  /**
	   * @param {Event} event
	   */
	  function render(event) {
	    (event.event === 'start' ? open : close)(event.node);
	  }

	  while (original.length || highlighted.length) {
	    var stream = selectStream();
	    result += escapeHTML(value.substring(processed, stream[0].offset));
	    processed = stream[0].offset;
	    if (stream === original) {
	      /*
	      On any opening or closing tag of the original markup we first close
	      the entire highlighted node stack, then render the original tag along
	      with all the following original tags at the same offset and then
	      reopen all the tags on the highlighted stack.
	      */
	      nodeStack.reverse().forEach(close);
	      do {
	        render(stream.splice(0, 1)[0]);
	        stream = selectStream();
	      } while (stream === original && stream.length && stream[0].offset === processed);
	      nodeStack.reverse().forEach(open);
	    } else {
	      if (stream[0].event === 'start') {
	        nodeStack.push(stream[0].node);
	      } else {
	        nodeStack.pop();
	      }
	      render(stream.splice(0, 1)[0]);
	    }
	  }
	  return result + escapeHTML(value.substr(processed));
	}

	var utils = /*#__PURE__*/Object.freeze({
	    __proto__: null,
	    escapeHTML: escapeHTML,
	    inherit: inherit,
	    nodeStream: nodeStream,
	    mergeStreams: mergeStreams
	});

	/**
	 * @typedef {object} Renderer
	 * @property {(text: string) => void} addText
	 * @property {(node: Node) => void} openNode
	 * @property {(node: Node) => void} closeNode
	 * @property {() => string} value
	 */

	/** @typedef {{kind?: string, sublanguage?: boolean}} Node */
	/** @typedef {{walk: (r: Renderer) => void}} Tree */
	/** */

	var SPAN_CLOSE = '</span>';

	/**
	 * Determines if a node needs to be wrapped in <span>
	 *
	 * @param {Node} node */
	var emitsWrappingTags = function (node) {
	  return !!node.kind;
	};

	/** @type {Renderer} */
	class HTMLRenderer {
	  /**
	   * Creates a new HTMLRenderer
	   *
	   * @param {Tree} parseTree - the parse tree (must support `walk` API)
	   * @param {{classPrefix: string}} options
	   */
	  constructor(parseTree, options) {
	    this.buffer = "";
	    this.classPrefix = options.classPrefix;
	    parseTree.walk(this);
	  }

	  /**
	   * Adds texts to the output stream
	   *
	   * @param {string} text */
	  addText(text) {
	    this.buffer += escapeHTML(text);
	  }

	  /**
	   * Adds a node open to the output stream (if needed)
	   *
	   * @param {Node} node */
	  openNode(node) {
	    if (!emitsWrappingTags(node)) { return; }

	    var className = node.kind;
	    if (!node.sublanguage) {
	      className = "" + (this.classPrefix) + className;
	    }
	    this.span(className);
	  }

	  /**
	   * Adds a node close to the output stream (if needed)
	   *
	   * @param {Node} node */
	  closeNode(node) {
	    if (!emitsWrappingTags(node)) { return; }

	    this.buffer += SPAN_CLOSE;
	  }

	  /**
	   * returns the accumulated buffer
	  */
	  value() {
	    return this.buffer;
	  }

	  // helpers

	  /**
	   * Builds a span element
	   *
	   * @param {string} className */
	  span(className) {
	    this.buffer += "<span class=\"" + className + "\">";
	  }
	}

	/** @typedef {{kind?: string, sublanguage?: boolean, children: Node[]} | string} Node */
	/** @typedef {{kind?: string, sublanguage?: boolean, children: Node[]} } DataNode */
	/**  */

	class TokenTree {
	  constructor() {
	    /** @type DataNode */
	    this.rootNode = { children: [] };
	    this.stack = [this.rootNode];
	  }

	  get top() {
	    return this.stack[this.stack.length - 1];
	  }

	  get root() { return this.rootNode; }

	  /** @param {Node} node */
	  add(node) {
	    this.top.children.push(node);
	  }

	  /** @param {string} kind */
	  openNode(kind) {
	    /** @type Node */
	    var node = { kind: kind, children: [] };
	    this.add(node);
	    this.stack.push(node);
	  }

	  closeNode() {
	    if (this.stack.length > 1) {
	      return this.stack.pop();
	    }
	    // eslint-disable-next-line no-undefined
	    return undefined;
	  }

	  closeAllNodes() {
	    while (this.closeNode()){ }
	  }

	  toJSON() {
	    return JSON.stringify(this.rootNode, null, 4);
	  }

	  /**
	   * @typedef { import("./html_renderer").Renderer } Renderer
	   * @param {Renderer} builder
	   */
	  walk(builder) {
	    // this does not
	    return this.constructor._walk(builder, this.rootNode);
	    // this works
	    // return TokenTree._walk(builder, this.rootNode);
	  }

	  /**
	   * @param {Renderer} builder
	   * @param {Node} node
	   */
	  static _walk(builder, node) {
	    var this$1 = this;

	    if (typeof node === "string") {
	      builder.addText(node);
	    } else if (node.children) {
	      builder.openNode(node);
	      node.children.forEach(function (child) { return this$1._walk(builder, child); });
	      builder.closeNode(node);
	    }
	    return builder;
	  }

	  /**
	   * @param {Node} node
	   */
	  static _collapse(node) {
	    if (typeof node === "string") { return; }
	    if (!node.children) { return; }

	    if (node.children.every(function (el) { return typeof el === "string"; })) {
	      // node.text = node.children.join("");
	      // delete node.children;
	      node.children = [node.children.join("")];
	    } else {
	      node.children.forEach(function (child) {
	        TokenTree._collapse(child);
	      });
	    }
	  }
	}

	/**
	  Currently this is all private API, but this is the minimal API necessary
	  that an Emitter must implement to fully support the parser.

	  Minimal interface:

	  - addKeyword(text, kind)
	  - addText(text)
	  - addSublanguage(emitter, subLanguageName)
	  - finalize()
	  - openNode(kind)
	  - closeNode()
	  - closeAllNodes()
	  - toHTML()

	*/

	/**
	 * @implements {Emitter}
	 */
	class TokenTreeEmitter extends TokenTree {
	  /**
	   * @param {*} options
	   */
	  constructor(options) {
	    super();
	    this.options = options;
	  }

	  /**
	   * @param {string} text
	   * @param {string} kind
	   */
	  addKeyword(text, kind) {
	    if (text === "") { return; }

	    this.openNode(kind);
	    this.addText(text);
	    this.closeNode();
	  }

	  /**
	   * @param {string} text
	   */
	  addText(text) {
	    if (text === "") { return; }

	    this.add(text);
	  }

	  /**
	   * @param {Emitter & {root: DataNode}} emitter
	   * @param {string} name
	   */
	  addSublanguage(emitter, name) {
	    /** @type DataNode */
	    var node = emitter.root;
	    node.kind = name;
	    node.sublanguage = true;
	    this.add(node);
	  }

	  toHTML() {
	    var renderer = new HTMLRenderer(this, this.options);
	    return renderer.value();
	  }

	  finalize() {
	    return true;
	  }
	}

	/**
	 * @param {string} value
	 * @returns {RegExp}
	 * */
	function escape$1(value) {
	  return new RegExp(value.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&'), 'm');
	}

	/**
	 * @param {RegExp | string } re
	 * @returns {string}
	 */
	function source(re) {
	  if (!re) { return null; }
	  if (typeof re === "string") { return re; }

	  return re.source;
	}

	/**
	 * @param {...(RegExp | string) } args
	 * @returns {string}
	 */
	function concat() {
	  var args = [], len = arguments.length;
	  while ( len-- ) args[ len ] = arguments[ len ];

	  var joined = args.map(function (x) { return source(x); }).join("");
	  return joined;
	}

	/**
	 * @param {RegExp} re
	 * @returns {number}
	 */
	function countMatchGroups(re) {
	  return (new RegExp(re.toString() + '|')).exec('').length - 1;
	}

	/**
	 * Does lexeme start with a regular expression match at the beginning
	 * @param {RegExp} re
	 * @param {string} lexeme
	 */
	function startsWith(re, lexeme) {
	  var match = re && re.exec(lexeme);
	  return match && match.index === 0;
	}

	// join logically computes regexps.join(separator), but fixes the
	// backreferences so they continue to match.
	// it also places each individual regular expression into it's own
	// match group, keeping track of the sequencing of those match groups
	// is currently an exercise for the caller. :-)
	/**
	 * @param {(string | RegExp)[]} regexps
	 * @param {string} separator
	 * @returns {string}
	 */
	function join(regexps, separator) {
	  if ( separator === void 0 ) separator = "|";

	  // backreferenceRe matches an open parenthesis or backreference. To avoid
	  // an incorrect parse, it additionally matches the following:
	  // - [...] elements, where the meaning of parentheses and escapes change
	  // - other escape sequences, so we do not misparse escape sequences as
	  //   interesting elements
	  // - non-matching or lookahead parentheses, which do not capture. These
	  //   follow the '(' with a '?'.
	  var backreferenceRe = /\[(?:[^\\\]]|\\.)*\]|\(\??|\\([1-9][0-9]*)|\\./;
	  var numCaptures = 0;
	  var ret = '';
	  for (var i = 0; i < regexps.length; i++) {
	    numCaptures += 1;
	    var offset = numCaptures;
	    var re = source(regexps[i]);
	    if (i > 0) {
	      ret += separator;
	    }
	    ret += "(";
	    while (re.length > 0) {
	      var match = backreferenceRe.exec(re);
	      if (match == null) {
	        ret += re;
	        break;
	      }
	      ret += re.substring(0, match.index);
	      re = re.substring(match.index + match[0].length);
	      if (match[0][0] === '\\' && match[1]) {
	        // Adjust the backreference.
	        ret += '\\' + String(Number(match[1]) + offset);
	      } else {
	        ret += match[0];
	        if (match[0] === '(') {
	          numCaptures++;
	        }
	      }
	    }
	    ret += ")";
	  }
	  return ret;
	}

	// Common regexps
	var IDENT_RE = '[a-zA-Z]\\w*';
	var UNDERSCORE_IDENT_RE = '[a-zA-Z_]\\w*';
	var NUMBER_RE = '\\b\\d+(\\.\\d+)?';
	var C_NUMBER_RE = '(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)'; // 0x..., 0..., decimal, float
	var BINARY_NUMBER_RE = '\\b(0b[01]+)'; // 0b...
	var RE_STARTERS_RE = '!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~';

	/**
	* @param { Partial<Mode> & {binary?: string | RegExp} } opts
	*/
	var SHEBANG = function (opts) {
	  if ( opts === void 0 ) opts = {};

	  var beginShebang = /^#![ ]*\//;
	  if (opts.binary) {
	    opts.begin = concat(
	      beginShebang,
	      /.*\b/,
	      opts.binary,
	      /\b.*/);
	  }
	  return inherit({
	    className: 'meta',
	    begin: beginShebang,
	    end: /$/,
	    relevance: 0,
	    /** @type {ModeCallback} */
	    "on:begin": function (m, resp) {
	      if (m.index !== 0) { resp.ignoreMatch(); }
	    }
	  }, opts);
	};

	// Common modes
	var BACKSLASH_ESCAPE = {
	  begin: '\\\\[\\s\\S]', relevance: 0
	};
	var APOS_STRING_MODE = {
	  className: 'string',
	  begin: '\'',
	  end: '\'',
	  illegal: '\\n',
	  contains: [BACKSLASH_ESCAPE]
	};
	var QUOTE_STRING_MODE = {
	  className: 'string',
	  begin: '"',
	  end: '"',
	  illegal: '\\n',
	  contains: [BACKSLASH_ESCAPE]
	};
	var PHRASAL_WORDS_MODE = {
	  begin: /\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/
	};
	/**
	 * Creates a comment mode
	 *
	 * @param {string | RegExp} begin
	 * @param {string | RegExp} end
	 * @param {Mode | {}} [modeOptions]
	 * @returns {Partial<Mode>}
	 */
	var COMMENT = function(begin, end, modeOptions) {
	  if ( modeOptions === void 0 ) modeOptions = {};

	  var mode = inherit(
	    {
	      className: 'comment',
	      begin: begin,
	      end: end,
	      contains: []
	    },
	    modeOptions
	  );
	  mode.contains.push(PHRASAL_WORDS_MODE);
	  mode.contains.push({
	    className: 'doctag',
	    begin: '(?:TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):',
	    relevance: 0
	  });
	  return mode;
	};
	var C_LINE_COMMENT_MODE = COMMENT('//', '$');
	var C_BLOCK_COMMENT_MODE = COMMENT('/\\*', '\\*/');
	var HASH_COMMENT_MODE = COMMENT('#', '$');
	var NUMBER_MODE = {
	  className: 'number',
	  begin: NUMBER_RE,
	  relevance: 0
	};
	var C_NUMBER_MODE = {
	  className: 'number',
	  begin: C_NUMBER_RE,
	  relevance: 0
	};
	var BINARY_NUMBER_MODE = {
	  className: 'number',
	  begin: BINARY_NUMBER_RE,
	  relevance: 0
	};
	var CSS_NUMBER_MODE = {
	  className: 'number',
	  begin: NUMBER_RE + '(' +
	    '%|em|ex|ch|rem' +
	    '|vw|vh|vmin|vmax' +
	    '|cm|mm|in|pt|pc|px' +
	    '|deg|grad|rad|turn' +
	    '|s|ms' +
	    '|Hz|kHz' +
	    '|dpi|dpcm|dppx' +
	    ')?',
	  relevance: 0
	};
	var REGEXP_MODE = {
	  // this outer rule makes sure we actually have a WHOLE regex and not simply
	  // an expression such as:
	  //
	  //     3 / something
	  //
	  // (which will then blow up when regex's `illegal` sees the newline)
	  begin: /(?=\/[^/\n]*\/)/,
	  contains: [{
	    className: 'regexp',
	    begin: /\//,
	    end: /\/[gimuy]*/,
	    illegal: /\n/,
	    contains: [
	      BACKSLASH_ESCAPE,
	      {
	        begin: /\[/,
	        end: /\]/,
	        relevance: 0,
	        contains: [BACKSLASH_ESCAPE]
	      }
	    ]
	  }]
	};
	var TITLE_MODE = {
	  className: 'title',
	  begin: IDENT_RE,
	  relevance: 0
	};
	var UNDERSCORE_TITLE_MODE = {
	  className: 'title',
	  begin: UNDERSCORE_IDENT_RE,
	  relevance: 0
	};
	var METHOD_GUARD = {
	  // excludes method names from keyword processing
	  begin: '\\.\\s*' + UNDERSCORE_IDENT_RE,
	  relevance: 0
	};

	/**
	 * Adds end same as begin mechanics to a mode
	 *
	 * Your mode must include at least a single () match group as that first match
	 * group is what is used for comparison
	 * @param {Partial<Mode>} mode
	 */
	var END_SAME_AS_BEGIN = function(mode) {
	  return Object.assign(mode,
	    {
	      /** @type {ModeCallback} */
	      'on:begin': function (m, resp) { resp.data._beginMatch = m[1]; },
	      /** @type {ModeCallback} */
	      'on:end': function (m, resp) { if (resp.data._beginMatch !== m[1]) { resp.ignoreMatch(); } }
	    });
	};

	var MODES = /*#__PURE__*/Object.freeze({
	    __proto__: null,
	    IDENT_RE: IDENT_RE,
	    UNDERSCORE_IDENT_RE: UNDERSCORE_IDENT_RE,
	    NUMBER_RE: NUMBER_RE,
	    C_NUMBER_RE: C_NUMBER_RE,
	    BINARY_NUMBER_RE: BINARY_NUMBER_RE,
	    RE_STARTERS_RE: RE_STARTERS_RE,
	    SHEBANG: SHEBANG,
	    BACKSLASH_ESCAPE: BACKSLASH_ESCAPE,
	    APOS_STRING_MODE: APOS_STRING_MODE,
	    QUOTE_STRING_MODE: QUOTE_STRING_MODE,
	    PHRASAL_WORDS_MODE: PHRASAL_WORDS_MODE,
	    COMMENT: COMMENT,
	    C_LINE_COMMENT_MODE: C_LINE_COMMENT_MODE,
	    C_BLOCK_COMMENT_MODE: C_BLOCK_COMMENT_MODE,
	    HASH_COMMENT_MODE: HASH_COMMENT_MODE,
	    NUMBER_MODE: NUMBER_MODE,
	    C_NUMBER_MODE: C_NUMBER_MODE,
	    BINARY_NUMBER_MODE: BINARY_NUMBER_MODE,
	    CSS_NUMBER_MODE: CSS_NUMBER_MODE,
	    REGEXP_MODE: REGEXP_MODE,
	    TITLE_MODE: TITLE_MODE,
	    UNDERSCORE_TITLE_MODE: UNDERSCORE_TITLE_MODE,
	    METHOD_GUARD: METHOD_GUARD,
	    END_SAME_AS_BEGIN: END_SAME_AS_BEGIN
	});

	// keywords that should have no default relevance value
	var COMMON_KEYWORDS = [
	  'of',
	  'and',
	  'for',
	  'in',
	  'not',
	  'or',
	  'if',
	  'then',
	  'parent', // common variable name
	  'list', // common variable name
	  'value' // common variable name
	];

	// compilation

	/**
	 * Compiles a language definition result
	 *
	 * Given the raw result of a language definition (Language), compiles this so
	 * that it is ready for highlighting code.
	 * @param {Language} language
	 * @returns {CompiledLanguage}
	 */
	function compileLanguage(language) {
	  /**
	   * Builds a regex with the case sensativility of the current language
	   *
	   * @param {RegExp | string} value
	   * @param {boolean} [global]
	   */
	  function langRe(value, global) {
	    return new RegExp(
	      source(value),
	      'm' + (language.case_insensitive ? 'i' : '') + (global ? 'g' : '')
	    );
	  }

	  /**
	    Stores multiple regular expressions and allows you to quickly search for
	    them all in a string simultaneously - returning the first match.  It does
	    this by creating a huge (a|b|c) regex - each individual item wrapped with ()
	    and joined by `|` - using match groups to track position.  When a match is
	    found checking which position in the array has content allows us to figure
	    out which of the original regexes / match groups triggered the match.

	    The match object itself (the result of `Regex.exec`) is returned but also
	    enhanced by merging in any meta-data that was registered with the regex.
	    This is how we keep track of which mode matched, and what type of rule
	    (`illegal`, `begin`, end, etc).
	  */
	  class MultiRegex {
	    constructor() {
	      this.matchIndexes = {};
	      // @ts-ignore
	      this.regexes = [];
	      this.matchAt = 1;
	      this.position = 0;
	    }

	    // @ts-ignore
	    addRule(re, opts) {
	      opts.position = this.position++;
	      // @ts-ignore
	      this.matchIndexes[this.matchAt] = opts;
	      this.regexes.push([opts, re]);
	      this.matchAt += countMatchGroups(re) + 1;
	    }

	    compile() {
	      if (this.regexes.length === 0) {
	        // avoids the need to check length every time exec is called
	        // @ts-ignore
	        this.exec = function () { return null; };
	      }
	      var terminators = this.regexes.map(function (el) { return el[1]; });
	      this.matcherRe = langRe(join(terminators), true);
	      this.lastIndex = 0;
	    }

	    /** @param {string} s */
	    exec(s) {
	      this.matcherRe.lastIndex = this.lastIndex;
	      var match = this.matcherRe.exec(s);
	      if (!match) { return null; }

	      // eslint-disable-next-line no-undefined
	      var i = match.findIndex(function (el, i) { return i > 0 && el !== undefined; });
	      // @ts-ignore
	      var matchData = this.matchIndexes[i];
	      // trim off any earlier non-relevant match groups (ie, the other regex
	      // match groups that make up the multi-matcher)
	      match.splice(0, i);

	      return Object.assign(match, matchData);
	    }
	  }

	  /*
	    Created to solve the key deficiently with MultiRegex - there is no way to
	    test for multiple matches at a single location.  Why would we need to do
	    that?  In the future a more dynamic engine will allow certain matches to be
	    ignored.  An example: if we matched say the 3rd regex in a large group but
	    decided to ignore it - we'd need to started testing again at the 4th
	    regex... but MultiRegex itself gives us no real way to do that.

	    So what this class creates MultiRegexs on the fly for whatever search
	    position they are needed.

	    NOTE: These additional MultiRegex objects are created dynamically.  For most
	    grammars most of the time we will never actually need anything more than the
	    first MultiRegex - so this shouldn't have too much overhead.

	    Say this is our search group, and we match regex3, but wish to ignore it.

	      regex1 | regex2 | regex3 | regex4 | regex5    ' ie, startAt = 0

	    What we need is a new MultiRegex that only includes the remaining
	    possibilities:

	      regex4 | regex5                               ' ie, startAt = 3

	    This class wraps all that complexity up in a simple API... `startAt` decides
	    where in the array of expressions to start doing the matching. It
	    auto-increments, so if a match is found at position 2, then startAt will be
	    set to 3.  If the end is reached startAt will return to 0.

	    MOST of the time the parser will be setting startAt manually to 0.
	  */
	  class ResumableMultiRegex {
	    constructor() {
	      // @ts-ignore
	      this.rules = [];
	      // @ts-ignore
	      this.multiRegexes = [];
	      this.count = 0;

	      this.lastIndex = 0;
	      this.regexIndex = 0;
	    }

	    // @ts-ignore
	    getMatcher(index) {
	      if (this.multiRegexes[index]) { return this.multiRegexes[index]; }

	      var matcher = new MultiRegex();
	      this.rules.slice(index).forEach(function (ref) {
	        var re = ref[0];
	        var opts = ref[1];

	        return matcher.addRule(re, opts);
	      });
	      matcher.compile();
	      this.multiRegexes[index] = matcher;
	      return matcher;
	    }

	    resumingScanAtSamePosition() {
	      return this.regexIndex !== 0;
	    }

	    considerAll() {
	      this.regexIndex = 0;
	    }

	    // @ts-ignore
	    addRule(re, opts) {
	      this.rules.push([re, opts]);
	      if (opts.type === "begin") { this.count++; }
	    }

	    /** @param {string} s */
	    exec(s) {
	      var m = this.getMatcher(this.regexIndex);
	      m.lastIndex = this.lastIndex;
	      var result = m.exec(s);

	      // The following is because we have no easy way to say "resume scanning at the
	      // existing position but also skip the current rule ONLY". What happens is
	      // all prior rules are also skipped which can result in matching the wrong
	      // thing. Example of matching "booger":

	      // our matcher is [string, "booger", number]
	      //
	      // ....booger....

	      // if "booger" is ignored then we'd really need a regex to scan from the
	      // SAME position for only: [string, number] but ignoring "booger" (if it
	      // was the first match), a simple resume would scan ahead who knows how
	      // far looking only for "number", ignoring potential string matches (or
	      // future "booger" matches that might be valid.)

	      // So what we do: We execute two matchers, one resuming at the same
	      // position, but the second full matcher starting at the position after:

	      //     /--- resume first regex match here (for [number])
	      //     |/---- full match here for [string, "booger", number]
	      //     vv
	      // ....booger....

	      // Which ever results in a match first is then used. So this 3-4 step
	      // process essentially allows us to say "match at this position, excluding
	      // a prior rule that was ignored".
	      //
	      // 1. Match "booger" first, ignore. Also proves that [string] does non match.
	      // 2. Resume matching for [number]
	      // 3. Match at index + 1 for [string, "booger", number]
	      // 4. If #2 and #3 result in matches, which came first?
	      if (this.resumingScanAtSamePosition()) {
	        if (result && result.index === this.lastIndex) ; else { // use the second matcher result
	          var m2 = this.getMatcher(0);
	          m2.lastIndex = this.lastIndex + 1;
	          result = m2.exec(s);
	        }
	      }

	      if (result) {
	        this.regexIndex += result.position + 1;
	        if (this.regexIndex === this.count) {
	          // wrap-around to considering all matches again
	          this.considerAll();
	        }
	      }

	      return result;
	    }
	  }

	  /**
	   * Given a mode, builds a huge ResumableMultiRegex that can be used to walk
	   * the content and find matches.
	   *
	   * @param {CompiledMode} mode
	   * @returns {ResumableMultiRegex}
	   */
	  function buildModeRegex(mode) {
	    var mm = new ResumableMultiRegex();

	    mode.contains.forEach(function (term) { return mm.addRule(term.begin, { rule: term, type: "begin" }); });

	    if (mode.terminator_end) {
	      mm.addRule(mode.terminator_end, { type: "end" });
	    }
	    if (mode.illegal) {
	      mm.addRule(mode.illegal, { type: "illegal" });
	    }

	    return mm;
	  }

	  // TODO: We need negative look-behind support to do this properly
	  /**
	   * Skip a match if it has a preceding dot
	   *
	   * This is used for `beginKeywords` to prevent matching expressions such as
	   * `bob.keyword.do()`. The mode compiler automatically wires this up as a
	   * special _internal_ 'on:begin' callback for modes with `beginKeywords`
	   * @param {RegExpMatchArray} match
	   * @param {CallbackResponse} response
	   */
	  function skipIfhasPrecedingDot(match, response) {
	    var before = match.input[match.index - 1];
	    if (before === ".") {
	      response.ignoreMatch();
	    }
	  }

	  /** skip vs abort vs ignore
	   *
	   * @skip   - The mode is still entered and exited normally (and contains rules apply),
	   *           but all content is held and added to the parent buffer rather than being
	   *           output when the mode ends.  Mostly used with `sublanguage` to build up
	   *           a single large buffer than can be parsed by sublanguage.
	   *
	   *             - The mode begin ands ends normally.
	   *             - Content matched is added to the parent mode buffer.
	   *             - The parser cursor is moved forward normally.
	   *
	   * @abort  - A hack placeholder until we have ignore.  Aborts the mode (as if it
	   *           never matched) but DOES NOT continue to match subsequent `contains`
	   *           modes.  Abort is bad/suboptimal because it can result in modes
	   *           farther down not getting applied because an earlier rule eats the
	   *           content but then aborts.
	   *
	   *             - The mode does not begin.
	   *             - Content matched by `begin` is added to the mode buffer.
	   *             - The parser cursor is moved forward accordingly.
	   *
	   * @ignore - Ignores the mode (as if it never matched) and continues to match any
	   *           subsequent `contains` modes.  Ignore isn't technically possible with
	   *           the current parser implementation.
	   *
	   *             - The mode does not begin.
	   *             - Content matched by `begin` is ignored.
	   *             - The parser cursor is not moved forward.
	   */

	  /**
	   * Compiles an individual mode
	   *
	   * This can raise an error if the mode contains certain detectable known logic
	   * issues.
	   * @param {Mode} mode
	   * @param {CompiledMode | null} [parent]
	   * @returns {CompiledMode | never}
	   */
	  function compileMode(mode, parent) {
	    var ref;

	    var cmode = /** @type CompiledMode */ (mode);
	    if (mode.compiled) { return cmode; }
	    mode.compiled = true;

	    // __beforeBegin is considered private API, internal use only
	    mode.__beforeBegin = null;

	    mode.keywords = mode.keywords || mode.beginKeywords;

	    var keywordPattern = null;
	    if (typeof mode.keywords === "object") {
	      keywordPattern = mode.keywords.$pattern;
	      delete mode.keywords.$pattern;
	    }

	    if (mode.keywords) {
	      mode.keywords = compileKeywords(mode.keywords, language.case_insensitive);
	    }

	    // both are not allowed
	    if (mode.lexemes && keywordPattern) {
	      throw new Error("ERR: Prefer `keywords.$pattern` to `mode.lexemes`, BOTH are not allowed. (see mode reference) ");
	    }

	    // `mode.lexemes` was the old standard before we added and now recommend
	    // using `keywords.$pattern` to pass the keyword pattern
	    cmode.keywordPatternRe = langRe(mode.lexemes || keywordPattern || /\w+/, true);

	    if (parent) {
	      if (mode.beginKeywords) {
	        // for languages with keywords that include non-word characters checking for
	        // a word boundary is not sufficient, so instead we check for a word boundary
	        // or whitespace - this does no harm in any case since our keyword engine
	        // doesn't allow spaces in keywords anyways and we still check for the boundary
	        // first
	        mode.begin = '\\b(' + mode.beginKeywords.split(' ').join('|') + ')(?!\\.)(?=\\b|\\s)';
	        mode.__beforeBegin = skipIfhasPrecedingDot;
	      }
	      if (!mode.begin) { mode.begin = /\B|\b/; }
	      cmode.beginRe = langRe(mode.begin);
	      if (mode.endSameAsBegin) { mode.end = mode.begin; }
	      if (!mode.end && !mode.endsWithParent) { mode.end = /\B|\b/; }
	      if (mode.end) { cmode.endRe = langRe(mode.end); }
	      cmode.terminator_end = source(mode.end) || '';
	      if (mode.endsWithParent && parent.terminator_end) {
	        cmode.terminator_end += (mode.end ? '|' : '') + parent.terminator_end;
	      }
	    }
	    if (mode.illegal) { cmode.illegalRe = langRe(mode.illegal); }
	    // eslint-disable-next-line no-undefined
	    if (mode.relevance === undefined) { mode.relevance = 1; }
	    if (!mode.contains) { mode.contains = []; }

	    mode.contains = (ref = []).concat.apply(ref, mode.contains.map(function(c) {
	      return expandOrCloneMode(c === 'self' ? mode : c);
	    }));
	    mode.contains.forEach(function(c) { compileMode(/** @type Mode */ (c), cmode); });

	    if (mode.starts) {
	      compileMode(mode.starts, parent);
	    }

	    cmode.matcher = buildModeRegex(cmode);
	    return cmode;
	  }

	  // self is not valid at the top-level
	  if (language.contains && language.contains.includes('self')) {
	    throw new Error("ERR: contains `self` is not supported at the top-level of a language.  See documentation.");
	  }

	  // we need a null object, which inherit will guarantee
	  language.classNameAliases = inherit(language.classNameAliases || {});

	  return compileMode(/** @type Mode */ (language));
	}

	/**
	 * Determines if a mode has a dependency on it's parent or not
	 *
	 * If a mode does have a parent dependency then often we need to clone it if
	 * it's used in multiple places so that each copy points to the correct parent,
	 * where-as modes without a parent can often safely be re-used at the bottom of
	 * a mode chain.
	 *
	 * @param {Mode | null} mode
	 * @returns {boolean} - is there a dependency on the parent?
	 * */
	function dependencyOnParent(mode) {
	  if (!mode) { return false; }

	  return mode.endsWithParent || dependencyOnParent(mode.starts);
	}

	/**
	 * Expands a mode or clones it if necessary
	 *
	 * This is necessary for modes with parental dependenceis (see notes on
	 * `dependencyOnParent`) and for nodes that have `variants` - which must then be
	 * exploded into their own individual modes at compile time.
	 *
	 * @param {Mode} mode
	 * @returns {Mode | Mode[]}
	 * */
	function expandOrCloneMode(mode) {
	  if (mode.variants && !mode.cached_variants) {
	    mode.cached_variants = mode.variants.map(function(variant) {
	      return inherit(mode, { variants: null }, variant);
	    });
	  }

	  // EXPAND
	  // if we have variants then essentially "replace" the mode with the variants
	  // this happens in compileMode, where this function is called from
	  if (mode.cached_variants) {
	    return mode.cached_variants;
	  }

	  // CLONE
	  // if we have dependencies on parents then we need a unique
	  // instance of ourselves, so we can be reused with many
	  // different parents without issue
	  if (dependencyOnParent(mode)) {
	    return inherit(mode, { starts: mode.starts ? inherit(mode.starts) : null });
	  }

	  if (Object.isFrozen(mode)) {
	    return inherit(mode);
	  }

	  // no special dependency issues, just return ourselves
	  return mode;
	}

	/***********************************************
	  Keywords
	***********************************************/

	/**
	 * Given raw keywords from a language definition, compile them.
	 *
	 * @param {string | Record<string,string>} rawKeywords
	 * @param {boolean} caseInsensitive
	 */
	function compileKeywords(rawKeywords, caseInsensitive) {
	  /** @type KeywordDict */
	  var compiledKeywords = {};

	  if (typeof rawKeywords === 'string') { // string
	    splitAndCompile('keyword', rawKeywords);
	  } else {
	    Object.keys(rawKeywords).forEach(function(className) {
	      splitAndCompile(className, rawKeywords[className]);
	    });
	  }
	  return compiledKeywords;

	  // ---

	  /**
	   * Compiles an individual list of keywords
	   *
	   * Ex: "for if when while|5"
	   *
	   * @param {string} className
	   * @param {string} keywordList
	   */
	  function splitAndCompile(className, keywordList) {
	    if (caseInsensitive) {
	      keywordList = keywordList.toLowerCase();
	    }
	    keywordList.split(' ').forEach(function(keyword) {
	      var pair = keyword.split('|');
	      compiledKeywords[pair[0]] = [className, scoreForKeyword(pair[0], pair[1])];
	    });
	  }
	}

	/**
	 * Returns the proper score for a given keyword
	 *
	 * Also takes into account comment keywords, which will be scored 0 UNLESS
	 * another score has been manually assigned.
	 * @param {string} keyword
	 * @param {string} [providedScore]
	 */
	function scoreForKeyword(keyword, providedScore) {
	  // manual scores always win over common keywords
	  // so you can force a score of 1 if you really insist
	  if (providedScore) {
	    return Number(providedScore);
	  }

	  return commonKeyword(keyword) ? 0 : 1;
	}

	/**
	 * Determines if a given keyword is common or not
	 *
	 * @param {string} keyword */
	function commonKeyword(keyword) {
	  return COMMON_KEYWORDS.includes(keyword.toLowerCase());
	}

	var version = "10.4.1";

	// @ts-nocheck

	function hasValueOrEmptyAttribute(value) {
	  return Boolean(value || value === "");
	}

	function BuildVuePlugin(hljs) {
	  var Component = {
	    props: ["language", "code", "autodetect"],
	    data: function() {
	      return {
	        detectedLanguage: "",
	        unknownLanguage: false
	      };
	    },
	    computed: {
	      className: function className() {
	        if (this.unknownLanguage) { return ""; }
	  
	        return "hljs " + this.detectedLanguage;
	      },
	      highlighted: function highlighted() {
	        // no idea what language to use, return raw code
	        if (!this.autoDetect && !hljs.getLanguage(this.language)) {
	          console.warn(("The language \"" + (this.language) + "\" you specified could not be found."));
	          this.unknownLanguage = true;
	          return escapeHTML(this.code);
	        }
	  
	        var result;
	        if (this.autoDetect) {
	          result = hljs.highlightAuto(this.code);
	          this.detectedLanguage = result.language;
	        } else {
	          result = hljs.highlight(this.language, this.code, this.ignoreIllegals);
	          this.detectedLanguage = this.language;
	        }
	        return result.value;
	      },
	      autoDetect: function autoDetect() {
	        return !this.language || hasValueOrEmptyAttribute(this.autodetect);
	      },
	      ignoreIllegals: function ignoreIllegals() {
	        return true;
	      }
	    },
	    // this avoids needing to use a whole Vue compilation pipeline just
	    // to build Highlight.js
	    render: function render(createElement) {
	      return createElement("pre", {}, [
	        createElement("code", {
	          class: this.className,
	          domProps: { innerHTML: this.highlighted }})
	      ]);
	    }
	    // template: `<pre><code :class="className" v-html="highlighted"></code></pre>`
	  };
	  
	  var VuePlugin = {
	    install: function install(Vue) {
	      Vue.component('highlightjs', Component);
	    }
	  };

	  return { Component: Component, VuePlugin: VuePlugin };
	}

	/*
	Syntax highlighting with language autodetection.
	https://highlightjs.org/
	*/

	var escape$1$1 = escapeHTML;
	var inherit$1 = inherit;

	var nodeStream$1 = utils.nodeStream;
	var mergeStreams$1 = utils.mergeStreams;
	var NO_MATCH = Symbol("nomatch");

	/**
	 * @param {any} hljs - object that is extended (legacy)
	 * @returns {HLJSApi}
	 */
	var HLJS = function(hljs) {
	  // Convenience variables for build-in objects
	  /** @type {unknown[]} */
	  var ArrayProto = [];

	  // Global internal variables used within the highlight.js library.
	  /** @type {Record<string, Language>} */
	  var languages = Object.create(null);
	  /** @type {Record<string, string>} */
	  var aliases = Object.create(null);
	  /** @type {HLJSPlugin[]} */
	  var plugins = [];

	  // safe/production mode - swallows more errors, tries to keep running
	  // even if a single syntax or parse hits a fatal error
	  var SAFE_MODE = true;
	  var fixMarkupRe = /(^(<[^>]+>|\t|)+|\n)/gm;
	  var LANGUAGE_NOT_FOUND = "Could not find the language '{}', did you forget to load/include a language module?";
	  /** @type {Language} */
	  var PLAINTEXT_LANGUAGE = { disableAutodetect: true, name: 'Plain text', contains: [] };

	  // Global options used when within external APIs. This is modified when
	  // calling the `hljs.configure` function.
	  /** @type HLJSOptions */
	  var options = {
	    noHighlightRe: /^(no-?highlight)$/i,
	    languageDetectRe: /\blang(?:uage)?-([\w-]+)\b/i,
	    classPrefix: 'hljs-',
	    tabReplace: null,
	    useBR: false,
	    languages: null,
	    // beta configuration options, subject to change, welcome to discuss
	    // https://github.com/highlightjs/highlight.js/issues/1086
	    __emitter: TokenTreeEmitter
	  };

	  /* Utility functions */

	  /**
	   * Tests a language name to see if highlighting should be skipped
	   * @param {string} languageName
	   */
	  function shouldNotHighlight(languageName) {
	    return options.noHighlightRe.test(languageName);
	  }

	  /**
	   * @param {HighlightedHTMLElement} block - the HTML element to determine language for
	   */
	  function blockLanguage(block) {
	    var classes = block.className + ' ';

	    classes += block.parentNode ? block.parentNode.className : '';

	    // language-* takes precedence over non-prefixed class names.
	    var match = options.languageDetectRe.exec(classes);
	    if (match) {
	      var language = getLanguage(match[1]);
	      if (!language) {
	        console.warn(LANGUAGE_NOT_FOUND.replace("{}", match[1]));
	        console.warn("Falling back to no-highlight mode for this block.", block);
	      }
	      return language ? match[1] : 'no-highlight';
	    }

	    return classes
	      .split(/\s+/)
	      .find(function (_class) { return shouldNotHighlight(_class) || getLanguage(_class); });
	  }

	  /**
	   * Core highlighting function.
	   *
	   * @param {string} languageName - the language to use for highlighting
	   * @param {string} code - the code to highlight
	   * @param {boolean} [ignoreIllegals] - whether to ignore illegal matches, default is to bail
	   * @param {CompiledMode} [continuation] - current continuation mode, if any
	   *
	   * @returns {HighlightResult} Result - an object that represents the result
	   * @property {string} language - the language name
	   * @property {number} relevance - the relevance score
	   * @property {string} value - the highlighted HTML code
	   * @property {string} code - the original raw code
	   * @property {CompiledMode} top - top of the current mode stack
	   * @property {boolean} illegal - indicates whether any illegal matches were found
	  */
	  function highlight(languageName, code, ignoreIllegals, continuation) {
	    /** @type {{ code: string, language: string, result?: any }} */
	    var context = {
	      code: code,
	      language: languageName
	    };
	    // the plugin can change the desired language or the code to be highlighted
	    // just be changing the object it was passed
	    fire("before:highlight", context);

	    // a before plugin can usurp the result completely by providing it's own
	    // in which case we don't even need to call highlight
	    var result = context.result ?
	      context.result :
	      _highlight(context.language, context.code, ignoreIllegals, continuation);

	    result.code = context.code;
	    // the plugin can change anything in result to suite it
	    fire("after:highlight", result);

	    return result;
	  }

	  /**
	   * private highlight that's used internally and does not fire callbacks
	   *
	   * @param {string} languageName - the language to use for highlighting
	   * @param {string} code - the code to highlight
	   * @param {boolean} [ignoreIllegals] - whether to ignore illegal matches, default is to bail
	   * @param {CompiledMode} [continuation] - current continuation mode, if any
	   * @returns {HighlightResult} - result of the highlight operation
	  */
	  function _highlight(languageName, code, ignoreIllegals, continuation) {
	    var codeToHighlight = code;

	    /**
	     * Return keyword data if a match is a keyword
	     * @param {CompiledMode} mode - current mode
	     * @param {RegExpMatchArray} match - regexp match data
	     * @returns {KeywordData | false}
	     */
	    function keywordData(mode, match) {
	      var matchText = language.case_insensitive ? match[0].toLowerCase() : match[0];
	      return Object.prototype.hasOwnProperty.call(mode.keywords, matchText) && mode.keywords[matchText];
	    }

	    function processKeywords() {
	      if (!top.keywords) {
	        emitter.addText(modeBuffer);
	        return;
	      }

	      var lastIndex = 0;
	      top.keywordPatternRe.lastIndex = 0;
	      var match = top.keywordPatternRe.exec(modeBuffer);
	      var buf = "";

	      while (match) {
	        buf += modeBuffer.substring(lastIndex, match.index);
	        var data = keywordData(top, match);
	        if (data) {
	          var kind = data[0];
	          var keywordRelevance = data[1];
	          emitter.addText(buf);
	          buf = "";

	          relevance += keywordRelevance;
	          var cssClass = language.classNameAliases[kind] || kind;
	          emitter.addKeyword(match[0], cssClass);
	        } else {
	          buf += match[0];
	        }
	        lastIndex = top.keywordPatternRe.lastIndex;
	        match = top.keywordPatternRe.exec(modeBuffer);
	      }
	      buf += modeBuffer.substr(lastIndex);
	      emitter.addText(buf);
	    }

	    function processSubLanguage() {
	      if (modeBuffer === "") { return; }
	      /** @type HighlightResult */
	      var result = null;

	      if (typeof top.subLanguage === 'string') {
	        if (!languages[top.subLanguage]) {
	          emitter.addText(modeBuffer);
	          return;
	        }
	        result = _highlight(top.subLanguage, modeBuffer, true, continuations[top.subLanguage]);
	        continuations[top.subLanguage] = /** @type {CompiledMode} */ (result.top);
	      } else {
	        result = highlightAuto(modeBuffer, top.subLanguage.length ? top.subLanguage : null);
	      }

	      // Counting embedded language score towards the host language may be disabled
	      // with zeroing the containing mode relevance. Use case in point is Markdown that
	      // allows XML everywhere and makes every XML snippet to have a much larger Markdown
	      // score.
	      if (top.relevance > 0) {
	        relevance += result.relevance;
	      }
	      emitter.addSublanguage(result.emitter, result.language);
	    }

	    function processBuffer() {
	      if (top.subLanguage != null) {
	        processSubLanguage();
	      } else {
	        processKeywords();
	      }
	      modeBuffer = '';
	    }

	    /**
	     * @param {Mode} mode - new mode to start
	     */
	    function startNewMode(mode) {
	      if (mode.className) {
	        emitter.openNode(language.classNameAliases[mode.className] || mode.className);
	      }
	      top = Object.create(mode, { parent: { value: top } });
	      return top;
	    }

	    /**
	     * @param {CompiledMode } mode - the mode to potentially end
	     * @param {RegExpMatchArray} match - the latest match
	     * @param {string} matchPlusRemainder - match plus remainder of content
	     * @returns {CompiledMode | void} - the next mode, or if void continue on in current mode
	     */
	    function endOfMode(mode, match, matchPlusRemainder) {
	      var matched = startsWith(mode.endRe, matchPlusRemainder);

	      if (matched) {
	        if (mode["on:end"]) {
	          var resp = new Response(mode);
	          mode["on:end"](match, resp);
	          if (resp.ignore) { matched = false; }
	        }

	        if (matched) {
	          while (mode.endsParent && mode.parent) {
	            mode = mode.parent;
	          }
	          return mode;
	        }
	      }
	      // even if on:end fires an `ignore` it's still possible
	      // that we might trigger the end node because of a parent mode
	      if (mode.endsWithParent) {
	        return endOfMode(mode.parent, match, matchPlusRemainder);
	      }
	    }

	    /**
	     * Handle matching but then ignoring a sequence of text
	     *
	     * @param {string} lexeme - string containing full match text
	     */
	    function doIgnore(lexeme) {
	      if (top.matcher.regexIndex === 0) {
	        // no more regexs to potentially match here, so we move the cursor forward one
	        // space
	        modeBuffer += lexeme[0];
	        return 1;
	      } else {
	        // no need to move the cursor, we still have additional regexes to try and
	        // match at this very spot
	        resumeScanAtSamePosition = true;
	        return 0;
	      }
	    }

	    /**
	     * Handle the start of a new potential mode match
	     *
	     * @param {EnhancedMatch} match - the current match
	     * @returns {number} how far to advance the parse cursor
	     */
	    function doBeginMatch(match) {
	      var lexeme = match[0];
	      var newMode = match.rule;

	      var resp = new Response(newMode);
	      // first internal before callbacks, then the public ones
	      var beforeCallbacks = [newMode.__beforeBegin, newMode["on:begin"]];
	      for (var i = 0, list = beforeCallbacks; i < list.length; i += 1) {
	        var cb = list[i];

	        if (!cb) { continue; }
	        cb(match, resp);
	        if (resp.ignore) { return doIgnore(lexeme); }
	      }

	      if (newMode && newMode.endSameAsBegin) {
	        newMode.endRe = escape$1(lexeme);
	      }

	      if (newMode.skip) {
	        modeBuffer += lexeme;
	      } else {
	        if (newMode.excludeBegin) {
	          modeBuffer += lexeme;
	        }
	        processBuffer();
	        if (!newMode.returnBegin && !newMode.excludeBegin) {
	          modeBuffer = lexeme;
	        }
	      }
	      startNewMode(newMode);
	      // if (mode["after:begin"]) {
	      //   let resp = new Response(mode);
	      //   mode["after:begin"](match, resp);
	      // }
	      return newMode.returnBegin ? 0 : lexeme.length;
	    }

	    /**
	     * Handle the potential end of mode
	     *
	     * @param {RegExpMatchArray} match - the current match
	     */
	    function doEndMatch(match) {
	      var lexeme = match[0];
	      var matchPlusRemainder = codeToHighlight.substr(match.index);

	      var endMode = endOfMode(top, match, matchPlusRemainder);
	      if (!endMode) { return NO_MATCH; }

	      var origin = top;
	      if (origin.skip) {
	        modeBuffer += lexeme;
	      } else {
	        if (!(origin.returnEnd || origin.excludeEnd)) {
	          modeBuffer += lexeme;
	        }
	        processBuffer();
	        if (origin.excludeEnd) {
	          modeBuffer = lexeme;
	        }
	      }
	      do {
	        if (top.className) {
	          emitter.closeNode();
	        }
	        if (!top.skip && !top.subLanguage) {
	          relevance += top.relevance;
	        }
	        top = top.parent;
	      } while (top !== endMode.parent);
	      if (endMode.starts) {
	        if (endMode.endSameAsBegin) {
	          endMode.starts.endRe = endMode.endRe;
	        }
	        startNewMode(endMode.starts);
	      }
	      return origin.returnEnd ? 0 : lexeme.length;
	    }

	    function processContinuations() {
	      var list = [];
	      for (var current = top; current !== language; current = current.parent) {
	        if (current.className) {
	          list.unshift(current.className);
	        }
	      }
	      list.forEach(function (item) { return emitter.openNode(item); });
	    }

	    /** @type {{type?: MatchType, index?: number, rule?: Mode}}} */
	    var lastMatch = {};

	    /**
	     *  Process an individual match
	     *
	     * @param {string} textBeforeMatch - text preceeding the match (since the last match)
	     * @param {EnhancedMatch} [match] - the match itself
	     */
	    function processLexeme(textBeforeMatch, match) {
	      var lexeme = match && match[0];

	      // add non-matched text to the current mode buffer
	      modeBuffer += textBeforeMatch;

	      if (lexeme == null) {
	        processBuffer();
	        return 0;
	      }

	      // we've found a 0 width match and we're stuck, so we need to advance
	      // this happens when we have badly behaved rules that have optional matchers to the degree that
	      // sometimes they can end up matching nothing at all
	      // Ref: https://github.com/highlightjs/highlight.js/issues/2140
	      if (lastMatch.type === "begin" && match.type === "end" && lastMatch.index === match.index && lexeme === "") {
	        // spit the "skipped" character that our regex choked on back into the output sequence
	        modeBuffer += codeToHighlight.slice(match.index, match.index + 1);
	        if (!SAFE_MODE) {
	          /** @type {AnnotatedError} */
	          var err = new Error('0 width match regex');
	          err.languageName = languageName;
	          err.badRule = lastMatch.rule;
	          throw err;
	        }
	        return 1;
	      }
	      lastMatch = match;

	      if (match.type === "begin") {
	        return doBeginMatch(match);
	      } else if (match.type === "illegal" && !ignoreIllegals) {
	        // illegal match, we do not continue processing
	        /** @type {AnnotatedError} */
	        var err$1 = new Error('Illegal lexeme "' + lexeme + '" for mode "' + (top.className || '<unnamed>') + '"');
	        err$1.mode = top;
	        throw err$1;
	      } else if (match.type === "end") {
	        var processed = doEndMatch(match);
	        if (processed !== NO_MATCH) {
	          return processed;
	        }
	      }

	      // edge case for when illegal matches $ (end of line) which is technically
	      // a 0 width match but not a begin/end match so it's not caught by the
	      // first handler (when ignoreIllegals is true)
	      if (match.type === "illegal" && lexeme === "") {
	        // advance so we aren't stuck in an infinite loop
	        return 1;
	      }

	      // infinite loops are BAD, this is a last ditch catch all. if we have a
	      // decent number of iterations yet our index (cursor position in our
	      // parsing) still 3x behind our index then something is very wrong
	      // so we bail
	      if (iterations > 100000 && iterations > match.index * 3) {
	        var err$2 = new Error('potential infinite loop, way more iterations than matches');
	        throw err$2;
	      }

	      /*
	      Why might be find ourselves here?  Only one occasion now.  An end match that was
	      triggered but could not be completed.  When might this happen?  When an `endSameasBegin`
	      rule sets the end rule to a specific match.  Since the overall mode termination rule that's
	      being used to scan the text isn't recompiled that means that any match that LOOKS like
	      the end (but is not, because it is not an exact match to the beginning) will
	      end up here.  A definite end match, but when `doEndMatch` tries to "reapply"
	      the end rule and fails to match, we wind up here, and just silently ignore the end.

	      This causes no real harm other than stopping a few times too many.
	      */

	      modeBuffer += lexeme;
	      return lexeme.length;
	    }

	    var language = getLanguage(languageName);
	    if (!language) {
	      console.error(LANGUAGE_NOT_FOUND.replace("{}", languageName));
	      throw new Error('Unknown language: "' + languageName + '"');
	    }

	    var md = compileLanguage(language);
	    var result = '';
	    /** @type {CompiledMode} */
	    var top = continuation || md;
	    /** @type Record<string,CompiledMode> */
	    var continuations = {}; // keep continuations for sub-languages
	    var emitter = new options.__emitter(options);
	    processContinuations();
	    var modeBuffer = '';
	    var relevance = 0;
	    var index = 0;
	    var iterations = 0;
	    var resumeScanAtSamePosition = false;

	    try {
	      top.matcher.considerAll();

	      for (;;) {
	        iterations++;
	        if (resumeScanAtSamePosition) {
	          // only regexes not matched previously will now be
	          // considered for a potential match
	          resumeScanAtSamePosition = false;
	        } else {
	          top.matcher.considerAll();
	        }
	        top.matcher.lastIndex = index;

	        var match = top.matcher.exec(codeToHighlight);
	        // console.log("match", match[0], match.rule && match.rule.begin)

	        if (!match) { break; }

	        var beforeMatch = codeToHighlight.substring(index, match.index);
	        var processedCount = processLexeme(beforeMatch, match);
	        index = match.index + processedCount;
	      }
	      processLexeme(codeToHighlight.substr(index));
	      emitter.closeAllNodes();
	      emitter.finalize();
	      result = emitter.toHTML();

	      return {
	        relevance: relevance,
	        value: result,
	        language: languageName,
	        illegal: false,
	        emitter: emitter,
	        top: top
	      };
	    } catch (err) {
	      if (err.message && err.message.includes('Illegal')) {
	        return {
	          illegal: true,
	          illegalBy: {
	            msg: err.message,
	            context: codeToHighlight.slice(index - 100, index + 100),
	            mode: err.mode
	          },
	          sofar: result,
	          relevance: 0,
	          value: escape$1$1(codeToHighlight),
	          emitter: emitter
	        };
	      } else if (SAFE_MODE) {
	        return {
	          illegal: false,
	          relevance: 0,
	          value: escape$1$1(codeToHighlight),
	          emitter: emitter,
	          language: languageName,
	          top: top,
	          errorRaised: err
	        };
	      } else {
	        throw err;
	      }
	    }
	  }

	  /**
	   * returns a valid highlight result, without actually doing any actual work,
	   * auto highlight starts with this and it's possible for small snippets that
	   * auto-detection may not find a better match
	   * @param {string} code
	   * @returns {HighlightResult}
	   */
	  function justTextHighlightResult(code) {
	    var result = {
	      relevance: 0,
	      emitter: new options.__emitter(options),
	      value: escape$1$1(code),
	      illegal: false,
	      top: PLAINTEXT_LANGUAGE
	    };
	    result.emitter.addText(code);
	    return result;
	  }

	  /**
	  Highlighting with language detection. Accepts a string with the code to
	  highlight. Returns an object with the following properties:

	  - language (detected language)
	  - relevance (int)
	  - value (an HTML string with highlighting markup)
	  - second_best (object with the same structure for second-best heuristically
	    detected language, may be absent)

	    @param {string} code
	    @param {Array<string>} [languageSubset]
	    @returns {AutoHighlightResult}
	  */
	  function highlightAuto(code, languageSubset) {
	    languageSubset = languageSubset || options.languages || Object.keys(languages);
	    var plaintext = justTextHighlightResult(code);

	    var results = languageSubset.filter(getLanguage).filter(autoDetection).map(function (name) { return _highlight(name, code, false); }
	    );
	    results.unshift(plaintext); // plaintext is always an option

	    var sorted = results.sort(function (a, b) {
	      // sort base on relevance
	      if (a.relevance !== b.relevance) { return b.relevance - a.relevance; }

	      // always award the tie to the base language
	      // ie if C++ and Arduino are tied, it's more likely to be C++
	      if (a.language && b.language) {
	        if (getLanguage(a.language).supersetOf === b.language) {
	          return 1;
	        } else if (getLanguage(b.language).supersetOf === a.language) {
	          return -1;
	        }
	      }

	      // otherwise say they are equal, which has the effect of sorting on
	      // relevance while preserving the original ordering - which is how ties
	      // have historically been settled, ie the language that comes first always
	      // wins in the case of a tie
	      return 0;
	    });

	    var best = sorted[0];
	    var secondBest = sorted[1];

	    /** @type {AutoHighlightResult} */
	    var result = best;
	    result.second_best = secondBest;

	    return result;
	  }

	  /**
	  Post-processing of the highlighted markup:

	  - replace TABs with something more useful
	  - replace real line-breaks with '<br>' for non-pre containers

	    @param {string} html
	    @returns {string}
	  */
	  function fixMarkup(html) {
	    if (!(options.tabReplace || options.useBR)) {
	      return html;
	    }

	    return html.replace(fixMarkupRe, function (match) {
	      if (match === '\n') {
	        return options.useBR ? '<br>' : match;
	      } else if (options.tabReplace) {
	        return match.replace(/\t/g, options.tabReplace);
	      }
	      return match;
	    });
	  }

	  /**
	   * Builds new class name for block given the language name
	   *
	   * @param {string} prevClassName
	   * @param {string} [currentLang]
	   * @param {string} [resultLang]
	   */
	  function buildClassName(prevClassName, currentLang, resultLang) {
	    var language = currentLang ? aliases[currentLang] : resultLang;
	    var result = [prevClassName.trim()];

	    if (!prevClassName.match(/\bhljs\b/)) {
	      result.push('hljs');
	    }

	    if (!prevClassName.includes(language)) {
	      result.push(language);
	    }

	    return result.join(' ').trim();
	  }

	  /**
	   * Applies highlighting to a DOM node containing code. Accepts a DOM node and
	   * two optional parameters for fixMarkup.
	   *
	   * @param {HighlightedHTMLElement} element - the HTML element to highlight
	  */
	  function highlightBlock(element) {
	    /** @type HTMLElement */
	    var node = null;
	    var language = blockLanguage(element);

	    if (shouldNotHighlight(language)) { return; }

	    fire("before:highlightBlock",
	      { block: element, language: language });

	    if (options.useBR) {
	      node = document.createElement('div');
	      node.innerHTML = element.innerHTML.replace(/\n/g, '').replace(/<br[ /]*>/g, '\n');
	    } else {
	      node = element;
	    }
	    var text = node.textContent;
	    var result = language ? highlight(language, text, true) : highlightAuto(text);

	    var originalStream = nodeStream$1(node);
	    if (originalStream.length) {
	      var resultNode = document.createElement('div');
	      resultNode.innerHTML = result.value;
	      result.value = mergeStreams$1(originalStream, nodeStream$1(resultNode), text);
	    }
	    result.value = fixMarkup(result.value);

	    fire("after:highlightBlock", { block: element, result: result });

	    element.innerHTML = result.value;
	    element.className = buildClassName(element.className, language, result.language);
	    element.result = {
	      language: result.language,
	      // TODO: remove with version 11.0
	      re: result.relevance,
	      relavance: result.relevance
	    };
	    if (result.second_best) {
	      element.second_best = {
	        language: result.second_best.language,
	        // TODO: remove with version 11.0
	        re: result.second_best.relevance,
	        relavance: result.second_best.relevance
	      };
	    }
	  }

	  /**
	   * Updates highlight.js global options with the passed options
	   *
	   * @param {Partial<HLJSOptions>} userOptions
	   */
	  function configure(userOptions) {
	    if (userOptions.useBR) {
	      console.warn("'useBR' option is deprecated and will be removed entirely in v11.0");
	      console.warn("Please see https://github.com/highlightjs/highlight.js/issues/2559");
	    }
	    options = inherit$1(options, userOptions);
	  }

	  /**
	   * Highlights to all <pre><code> blocks on a page
	   *
	   * @type {Function & {called?: boolean}}
	   */
	  var initHighlighting = function () {
	    if (initHighlighting.called) { return; }
	    initHighlighting.called = true;

	    var blocks = document.querySelectorAll('pre code');
	    ArrayProto.forEach.call(blocks, highlightBlock);
	  };

	  // Higlights all when DOMContentLoaded fires
	  function initHighlightingOnLoad() {
	    // @ts-ignore
	    window.addEventListener('DOMContentLoaded', initHighlighting, false);
	  }

	  /**
	   * Register a language grammar module
	   *
	   * @param {string} languageName
	   * @param {LanguageFn} languageDefinition
	   */
	  function registerLanguage(languageName, languageDefinition) {
	    var lang = null;
	    try {
	      lang = languageDefinition(hljs);
	    } catch (error) {
	      console.error("Language definition for '{}' could not be registered.".replace("{}", languageName));
	      // hard or soft error
	      if (!SAFE_MODE) { throw error; } else { console.error(error); }
	      // languages that have serious errors are replaced with essentially a
	      // "plaintext" stand-in so that the code blocks will still get normal
	      // css classes applied to them - and one bad language won't break the
	      // entire highlighter
	      lang = PLAINTEXT_LANGUAGE;
	    }
	    // give it a temporary name if it doesn't have one in the meta-data
	    if (!lang.name) { lang.name = languageName; }
	    languages[languageName] = lang;
	    lang.rawDefinition = languageDefinition.bind(null, hljs);

	    if (lang.aliases) {
	      registerAliases(lang.aliases, { languageName: languageName });
	    }
	  }

	  /**
	   * @returns {string[]} List of language internal names
	   */
	  function listLanguages() {
	    return Object.keys(languages);
	  }

	  /**
	    intended usage: When one language truly requires another

	    Unlike `getLanguage`, this will throw when the requested language
	    is not available.

	    @param {string} name - name of the language to fetch/require
	    @returns {Language | never}
	  */
	  function requireLanguage(name) {
	    console.warn("requireLanguage is deprecated and will be removed entirely in the future.");
	    console.warn("Please see https://github.com/highlightjs/highlight.js/pull/2844");

	    var lang = getLanguage(name);
	    if (lang) { return lang; }

	    var err = new Error('The \'{}\' language is required, but not loaded.'.replace('{}', name));
	    throw err;
	  }

	  /**
	   * @param {string} name - name of the language to retrieve
	   * @returns {Language | undefined}
	   */
	  function getLanguage(name) {
	    name = (name || '').toLowerCase();
	    return languages[name] || languages[aliases[name]];
	  }

	  /**
	   *
	   * @param {string|string[]} aliasList - single alias or list of aliases
	   * @param {{languageName: string}} opts
	   */
	  function registerAliases(aliasList, ref) {
	    var languageName = ref.languageName;

	    if (typeof aliasList === 'string') {
	      aliasList = [aliasList];
	    }
	    aliasList.forEach(function (alias) { aliases[alias] = languageName; });
	  }

	  /**
	   * Determines if a given language has auto-detection enabled
	   * @param {string} name - name of the language
	   */
	  function autoDetection(name) {
	    var lang = getLanguage(name);
	    return lang && !lang.disableAutodetect;
	  }

	  /**
	   * @param {HLJSPlugin} plugin
	   */
	  function addPlugin(plugin) {
	    plugins.push(plugin);
	  }

	  /**
	   *
	   * @param {PluginEvent} event
	   * @param {any} args
	   */
	  function fire(event, args) {
	    var cb = event;
	    plugins.forEach(function(plugin) {
	      if (plugin[cb]) {
	        plugin[cb](args);
	      }
	    });
	  }

	  /**
	  Note: fixMarkup is deprecated and will be removed entirely in v11

	  @param {string} arg
	  @returns {string}
	  */
	  function deprecateFixMarkup(arg) {
	    console.warn("fixMarkup is deprecated and will be removed entirely in v11.0");
	    console.warn("Please see https://github.com/highlightjs/highlight.js/issues/2534");

	    return fixMarkup(arg);
	  }

	  /* Interface definition */
	  Object.assign(hljs, {
	    highlight: highlight,
	    highlightAuto: highlightAuto,
	    fixMarkup: deprecateFixMarkup,
	    highlightBlock: highlightBlock,
	    configure: configure,
	    initHighlighting: initHighlighting,
	    initHighlightingOnLoad: initHighlightingOnLoad,
	    registerLanguage: registerLanguage,
	    listLanguages: listLanguages,
	    getLanguage: getLanguage,
	    registerAliases: registerAliases,
	    requireLanguage: requireLanguage,
	    autoDetection: autoDetection,
	    inherit: inherit$1,
	    addPlugin: addPlugin,
	    // plugins for frameworks
	    vuePlugin: BuildVuePlugin(hljs).VuePlugin
	  });

	  hljs.debugMode = function() { SAFE_MODE = false; };
	  hljs.safeMode = function() { SAFE_MODE = true; };
	  hljs.versionString = version;

	  for (var key in MODES) {
	    // @ts-ignore
	    if (typeof MODES[key] === "object") {
	      // @ts-ignore
	      deepFreezeEs6(MODES[key]);
	    }
	  }

	  // merge all the modes/regexs into our main object
	  Object.assign(hljs, MODES);

	  return hljs;
	};

	// export an "instance" of the highlighter
	var highlight = HLJS({});

	var core = highlight;

	var core$1 = /*#__PURE__*/Object.freeze({
		default: core,
		__moduleExports: core
	});

	var IDENT_RE$1 = '[A-Za-z$_][0-9A-Za-z$_]*';
	var KEYWORDS = [
	  "as", // for exports
	  "in",
	  "of",
	  "if",
	  "for",
	  "while",
	  "finally",
	  "var",
	  "new",
	  "function",
	  "do",
	  "return",
	  "void",
	  "else",
	  "break",
	  "catch",
	  "instanceof",
	  "with",
	  "throw",
	  "case",
	  "default",
	  "try",
	  "switch",
	  "continue",
	  "typeof",
	  "delete",
	  "let",
	  "yield",
	  "const",
	  "class",
	  // JS handles these with a special rule
	  // "get",
	  // "set",
	  "debugger",
	  "async",
	  "await",
	  "static",
	  "import",
	  "from",
	  "export",
	  "extends"
	];
	var LITERALS = [
	  "true",
	  "false",
	  "null",
	  "undefined",
	  "NaN",
	  "Infinity"
	];

	var TYPES = [
	  "Intl",
	  "DataView",
	  "Number",
	  "Math",
	  "Date",
	  "String",
	  "RegExp",
	  "Object",
	  "Function",
	  "Boolean",
	  "Error",
	  "Symbol",
	  "Set",
	  "Map",
	  "WeakSet",
	  "WeakMap",
	  "Proxy",
	  "Reflect",
	  "JSON",
	  "Promise",
	  "Float64Array",
	  "Int16Array",
	  "Int32Array",
	  "Int8Array",
	  "Uint16Array",
	  "Uint32Array",
	  "Float32Array",
	  "Array",
	  "Uint8Array",
	  "Uint8ClampedArray",
	  "ArrayBuffer"
	];

	var ERROR_TYPES = [
	  "EvalError",
	  "InternalError",
	  "RangeError",
	  "ReferenceError",
	  "SyntaxError",
	  "TypeError",
	  "URIError"
	];

	var BUILT_IN_GLOBALS = [
	  "setInterval",
	  "setTimeout",
	  "clearInterval",
	  "clearTimeout",

	  "require",
	  "exports",

	  "eval",
	  "isFinite",
	  "isNaN",
	  "parseFloat",
	  "parseInt",
	  "decodeURI",
	  "decodeURIComponent",
	  "encodeURI",
	  "encodeURIComponent",
	  "escape",
	  "unescape"
	];

	var BUILT_IN_VARIABLES = [
	  "arguments",
	  "this",
	  "super",
	  "console",
	  "window",
	  "document",
	  "localStorage",
	  "module",
	  "global" // Node.js
	];

	var BUILT_INS = [].concat(
	  BUILT_IN_GLOBALS,
	  BUILT_IN_VARIABLES,
	  TYPES,
	  ERROR_TYPES
	);

	/**
	 * @param {string} value
	 * @returns {RegExp}
	 * */

	/**
	 * @param {RegExp | string } re
	 * @returns {string}
	 */
	function source$1(re) {
	  if (!re) { return null; }
	  if (typeof re === "string") { return re; }

	  return re.source;
	}

	/**
	 * @param {RegExp | string } re
	 * @returns {string}
	 */
	function lookahead(re) {
	  return concat$1('(?=', re, ')');
	}

	/**
	 * @param {...(RegExp | string) } args
	 * @returns {string}
	 */
	function concat$1() {
	  var args = [], len = arguments.length;
	  while ( len-- ) args[ len ] = arguments[ len ];

	  var joined = args.map(function (x) { return source$1(x); }).join("");
	  return joined;
	}

	/*
	Language: JavaScript
	Description: JavaScript (JS) is a lightweight, interpreted, or just-in-time compiled programming language with first-class functions.
	Category: common, scripting
	Website: https://developer.mozilla.org/en-US/docs/Web/JavaScript
	*/

	/** @type LanguageFn */
	function javascript(hljs) {
	  /**
	   * Takes a string like "<Booger" and checks to see
	   * if we can find a matching "</Booger" later in the
	   * content.
	   * @param {RegExpMatchArray} match
	   * @param {{after:number}} param1
	   */
	  var hasClosingTag = function (match, ref) {
	    var after = ref.after;

	    var tag = "</" + match[0].slice(1);
	    var pos = match.input.indexOf(tag, after);
	    return pos !== -1;
	  };

	  var IDENT_RE$1$1 = IDENT_RE$1;
	  var FRAGMENT = {
	    begin: '<>',
	    end: '</>'
	  };
	  var XML_TAG = {
	    begin: /<[A-Za-z0-9\\._:-]+/,
	    end: /\/[A-Za-z0-9\\._:-]+>|\/>/,
	    /**
	     * @param {RegExpMatchArray} match
	     * @param {CallbackResponse} response
	     */
	    isTrulyOpeningTag: function (match, response) {
	      var afterMatchIndex = match[0].length + match.index;
	      var nextChar = match.input[afterMatchIndex];
	      // nested type?
	      // HTML should not include another raw `<` inside a tag
	      // But a type might: `<Array<Array<number>>`, etc.
	      if (nextChar === "<") {
	        response.ignoreMatch();
	        return;
	      }
	      // <something>
	      // This is now either a tag or a type.
	      if (nextChar === ">") {
	        // if we cannot find a matching closing tag, then we
	        // will ignore it
	        if (!hasClosingTag(match, { after: afterMatchIndex })) {
	          response.ignoreMatch();
	        }
	      }
	    }
	  };
	  var KEYWORDS$1 = {
	    $pattern: IDENT_RE$1,
	    keyword: KEYWORDS.join(" "),
	    literal: LITERALS.join(" "),
	    built_in: BUILT_INS.join(" ")
	  };

	  // https://tc39.es/ecma262/#sec-literals-numeric-literals
	  var decimalDigits = '[0-9](_?[0-9])*';
	  var frac = "\\.(" + decimalDigits + ")";
	  // DecimalIntegerLiteral, including Annex B NonOctalDecimalIntegerLiteral
	  // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals
	  var decimalInteger = "0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*";
	  var NUMBER = {
	    className: 'number',
	    variants: [
	      // DecimalLiteral
	      { begin: "(\\b(" + decimalInteger + ")((" + frac + ")|\\.)?|(" + frac + "))" +
	        "[eE][+-]?(" + decimalDigits + ")\\b" },
	      { begin: ("\\b(" + decimalInteger + ")\\b((" + frac + ")\\b|\\.)?|(" + frac + ")\\b") },

	      // DecimalBigIntegerLiteral
	      { begin: "\\b(0|[1-9](_?[0-9])*)n\\b" },

	      // NonDecimalIntegerLiteral
	      { begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b" },
	      { begin: "\\b0[bB][0-1](_?[0-1])*n?\\b" },
	      { begin: "\\b0[oO][0-7](_?[0-7])*n?\\b" },

	      // LegacyOctalIntegerLiteral (does not include underscore separators)
	      // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals
	      { begin: "\\b0[0-7]+n?\\b" } ],
	    relevance: 0
	  };

	  var SUBST = {
	    className: 'subst',
	    begin: '\\$\\{',
	    end: '\\}',
	    keywords: KEYWORDS$1,
	    contains: [] // defined later
	  };
	  var HTML_TEMPLATE = {
	    begin: 'html`',
	    end: '',
	    starts: {
	      end: '`',
	      returnEnd: false,
	      contains: [
	        hljs.BACKSLASH_ESCAPE,
	        SUBST
	      ],
	      subLanguage: 'xml'
	    }
	  };
	  var CSS_TEMPLATE = {
	    begin: 'css`',
	    end: '',
	    starts: {
	      end: '`',
	      returnEnd: false,
	      contains: [
	        hljs.BACKSLASH_ESCAPE,
	        SUBST
	      ],
	      subLanguage: 'css'
	    }
	  };
	  var TEMPLATE_STRING = {
	    className: 'string',
	    begin: '`',
	    end: '`',
	    contains: [
	      hljs.BACKSLASH_ESCAPE,
	      SUBST
	    ]
	  };
	  var JSDOC_COMMENT = hljs.COMMENT(
	    '/\\*\\*',
	    '\\*/',
	    {
	      relevance: 0,
	      contains: [
	        {
	          className: 'doctag',
	          begin: '@[A-Za-z]+',
	          contains: [
	            {
	              className: 'type',
	              begin: '\\{',
	              end: '\\}',
	              relevance: 0
	            },
	            {
	              className: 'variable',
	              begin: IDENT_RE$1$1 + '(?=\\s*(-)|$)',
	              endsParent: true,
	              relevance: 0
	            },
	            // eat spaces (not newlines) so we can find
	            // types or variables
	            {
	              begin: /(?=[^\n])\s/,
	              relevance: 0
	            }
	          ]
	        }
	      ]
	    }
	  );
	  var COMMENT = {
	    className: "comment",
	    variants: [
	      JSDOC_COMMENT,
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.C_LINE_COMMENT_MODE
	    ]
	  };
	  var SUBST_INTERNALS = [
	    hljs.APOS_STRING_MODE,
	    hljs.QUOTE_STRING_MODE,
	    HTML_TEMPLATE,
	    CSS_TEMPLATE,
	    TEMPLATE_STRING,
	    NUMBER,
	    hljs.REGEXP_MODE
	  ];
	  SUBST.contains = SUBST_INTERNALS
	    .concat({
	      // we need to pair up {} inside our subst to prevent
	      // it from ending too early by matching another }
	      begin: /\{/,
	      end: /\}/,
	      keywords: KEYWORDS$1,
	      contains: [
	        "self"
	      ].concat(SUBST_INTERNALS)
	    });
	  var SUBST_AND_COMMENTS = [].concat(COMMENT, SUBST.contains);
	  var PARAMS_CONTAINS = SUBST_AND_COMMENTS.concat([
	    // eat recursive parens in sub expressions
	    {
	      begin: /\(/,
	      end: /\)/,
	      keywords: KEYWORDS$1,
	      contains: ["self"].concat(SUBST_AND_COMMENTS)
	    }
	  ]);
	  var PARAMS = {
	    className: 'params',
	    begin: /\(/,
	    end: /\)/,
	    excludeBegin: true,
	    excludeEnd: true,
	    keywords: KEYWORDS$1,
	    contains: PARAMS_CONTAINS
	  };

	  return {
	    name: 'Javascript',
	    aliases: ['js', 'jsx', 'mjs', 'cjs'],
	    keywords: KEYWORDS$1,
	    // this will be extended by TypeScript
	    exports: { PARAMS_CONTAINS: PARAMS_CONTAINS },
	    illegal: /#(?![$_A-z])/,
	    contains: [
	      hljs.SHEBANG({
	        label: "shebang",
	        binary: "node",
	        relevance: 5
	      }),
	      {
	        label: "use_strict",
	        className: 'meta',
	        relevance: 10,
	        begin: /^\s*['"]use (strict|asm)['"]/
	      },
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE,
	      HTML_TEMPLATE,
	      CSS_TEMPLATE,
	      TEMPLATE_STRING,
	      COMMENT,
	      NUMBER,
	      { // object attr container
	        begin: concat$1(/[{,\n]\s*/,
	          // we need to look ahead to make sure that we actually have an
	          // attribute coming up so we don't steal a comma from a potential
	          // "value" container
	          //
	          // NOTE: this might not work how you think.  We don't actually always
	          // enter this mode and stay.  Instead it might merely match `,
	          // <comments up next>` and then immediately end after the , because it
	          // fails to find any actual attrs. But this still does the job because
	          // it prevents the value contain rule from grabbing this instead and
	          // prevening this rule from firing when we actually DO have keys.
	          lookahead(concat$1(
	            // we also need to allow for multiple possible comments inbetween
	            // the first key:value pairing
	            /(((\/\/.*$)|(\/\*(\*[^/]|[^*])*\*\/))\s*)*/,
	            IDENT_RE$1$1 + '\\s*:'))),
	        relevance: 0,
	        contains: [
	          {
	            className: 'attr',
	            begin: IDENT_RE$1$1 + lookahead('\\s*:'),
	            relevance: 0
	          }
	        ]
	      },
	      { // "value" container
	        begin: '(' + hljs.RE_STARTERS_RE + '|\\b(case|return|throw)\\b)\\s*',
	        keywords: 'return throw case',
	        contains: [
	          COMMENT,
	          hljs.REGEXP_MODE,
	          {
	            className: 'function',
	            // we have to count the parens to make sure we actually have the
	            // correct bounding ( ) before the =>.  There could be any number of
	            // sub-expressions inside also surrounded by parens.
	            begin: '(\\(' +
	            '[^()]*(\\(' +
	            '[^()]*(\\(' +
	            '[^()]*' +
	            '\\)[^()]*)*' +
	            '\\)[^()]*)*' +
	            '\\)|' + hljs.UNDERSCORE_IDENT_RE + ')\\s*=>',
	            returnBegin: true,
	            end: '\\s*=>',
	            contains: [
	              {
	                className: 'params',
	                variants: [
	                  {
	                    begin: hljs.UNDERSCORE_IDENT_RE,
	                    relevance: 0
	                  },
	                  {
	                    className: null,
	                    begin: /\(\s*\)/,
	                    skip: true
	                  },
	                  {
	                    begin: /\(/,
	                    end: /\)/,
	                    excludeBegin: true,
	                    excludeEnd: true,
	                    keywords: KEYWORDS$1,
	                    contains: PARAMS_CONTAINS
	                  }
	                ]
	              }
	            ]
	          },
	          { // could be a comma delimited list of params to a function call
	            begin: /,/, relevance: 0
	          },
	          {
	            className: '',
	            begin: /\s/,
	            end: /\s*/,
	            skip: true
	          },
	          { // JSX
	            variants: [
	              { begin: FRAGMENT.begin, end: FRAGMENT.end },
	              {
	                begin: XML_TAG.begin,
	                // we carefully check the opening tag to see if it truly
	                // is a tag and not a false positive
	                'on:begin': XML_TAG.isTrulyOpeningTag,
	                end: XML_TAG.end
	              }
	            ],
	            subLanguage: 'xml',
	            contains: [
	              {
	                begin: XML_TAG.begin,
	                end: XML_TAG.end,
	                skip: true,
	                contains: ['self']
	              }
	            ]
	          }
	        ],
	        relevance: 0
	      },
	      {
	        className: 'function',
	        beginKeywords: 'function',
	        end: /[{;]/,
	        excludeEnd: true,
	        keywords: KEYWORDS$1,
	        contains: [
	          'self',
	          hljs.inherit(hljs.TITLE_MODE, { begin: IDENT_RE$1$1 }),
	          PARAMS
	        ],
	        illegal: /%/
	      },
	      {
	        // prevent this from getting swallowed up by function
	        // since they appear "function like"
	        beginKeywords: "while if switch catch for"
	      },
	      {
	        className: 'function',
	        // we have to count the parens to make sure we actually have the correct
	        // bounding ( ).  There could be any number of sub-expressions inside
	        // also surrounded by parens.
	        begin: hljs.UNDERSCORE_IDENT_RE +
	          '\\(' + // first parens
	          '[^()]*(\\(' +
	            '[^()]*(\\(' +
	              '[^()]*' +
	            '\\)[^()]*)*' +
	          '\\)[^()]*)*' +
	          '\\)\\s*\\{', // end parens
	        returnBegin:true,
	        contains: [
	          PARAMS,
	          hljs.inherit(hljs.TITLE_MODE, { begin: IDENT_RE$1$1 }) ]
	      },
	      // hack: prevents detection of keywords in some circumstances
	      // .keyword()
	      // $keyword = x
	      {
	        variants: [
	          { begin: '\\.' + IDENT_RE$1$1 },
	          { begin: '\\$' + IDENT_RE$1$1 }
	        ],
	        relevance: 0
	      },
	      { // ES6 class
	        className: 'class',
	        beginKeywords: 'class',
	        end: /[{;=]/,
	        excludeEnd: true,
	        illegal: /[:"[\]]/,
	        contains: [
	          { beginKeywords: 'extends' },
	          hljs.UNDERSCORE_TITLE_MODE
	        ]
	      },
	      {
	        begin: /\b(?=constructor)/,
	        end: /[{;]/,
	        excludeEnd: true,
	        contains: [
	          hljs.inherit(hljs.TITLE_MODE, { begin: IDENT_RE$1$1 }),
	          'self',
	          PARAMS
	        ]
	      },
	      {
	        begin: '(get|set)\\s+(?=' + IDENT_RE$1$1 + '\\()',
	        end: /\{/,
	        keywords: "get set",
	        contains: [
	          hljs.inherit(hljs.TITLE_MODE, { begin: IDENT_RE$1$1 }),
	          { begin: /\(\)/ }, // eat to avoid empty params
	          PARAMS
	        ]
	      },
	      {
	        begin: /\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`
	      }
	    ]
	  };
	}

	var javascript_1 = javascript;

	var javascript$1 = /*#__PURE__*/Object.freeze({
		default: javascript_1,
		__moduleExports: javascript_1
	});

	/*
	Language: Python
	Description: Python is an interpreted, object-oriented, high-level programming language with dynamic semantics.
	Website: https://www.python.org
	Category: common
	*/

	function python(hljs) {
	  var RESERVED_WORDS = [
	    'and',
	    'as',
	    'assert',
	    'async',
	    'await',
	    'break',
	    'class',
	    'continue',
	    'def',
	    'del',
	    'elif',
	    'else',
	    'except',
	    'finally',
	    'for',
	    '',
	    'from',
	    'global',
	    'if',
	    'import',
	    'in',
	    'is',
	    'lambda',
	    'nonlocal|10',
	    'not',
	    'or',
	    'pass',
	    'raise',
	    'return',
	    'try',
	    'while',
	    'with',
	    'yield' ];

	  var BUILT_INS = [
	    '__import__',
	    'abs',
	    'all',
	    'any',
	    'ascii',
	    'bin',
	    'bool',
	    'breakpoint',
	    'bytearray',
	    'bytes',
	    'callable',
	    'chr',
	    'classmethod',
	    'compile',
	    'complex',
	    'delattr',
	    'dict',
	    'dir',
	    'divmod',
	    'enumerate',
	    'eval',
	    'exec',
	    'filter',
	    'float',
	    'format',
	    'frozenset',
	    'getattr',
	    'globals',
	    'hasattr',
	    'hash',
	    'help',
	    'hex',
	    'id',
	    'input',
	    'int',
	    'isinstance',
	    'issubclass',
	    'iter',
	    'len',
	    'list',
	    'locals',
	    'map',
	    'max',
	    'memoryview',
	    'min',
	    'next',
	    'object',
	    'oct',
	    'open',
	    'ord',
	    'pow',
	    'print',
	    'property',
	    'range',
	    'repr',
	    'reversed',
	    'round',
	    'set',
	    'setattr',
	    'slice',
	    'sorted',
	    'staticmethod',
	    'str',
	    'sum',
	    'super',
	    'tuple',
	    'type',
	    'vars',
	    'zip' ];

	  var LITERALS = [
	    '__debug__',
	    'Ellipsis',
	    'False',
	    'None',
	    'NotImplemented',
	    'True' ];

	  var KEYWORDS = {
	    keyword: RESERVED_WORDS.join(' '),
	    built_in: BUILT_INS.join(' '),
	    literal: LITERALS.join(' ')
	  };

	  var PROMPT = {
	    className: 'meta',  begin: /^(>>>|\.\.\.) /
	  };

	  var SUBST = {
	    className: 'subst',
	    begin: /\{/, end: /\}/,
	    keywords: KEYWORDS,
	    illegal: /#/
	  };

	  var LITERAL_BRACKET = {
	    begin: /\{\{/,
	    relevance: 0
	  };

	  var STRING = {
	    className: 'string',
	    contains: [hljs.BACKSLASH_ESCAPE],
	    variants: [
	      {
	        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?'''/, end: /'''/,
	        contains: [hljs.BACKSLASH_ESCAPE, PROMPT],
	        relevance: 10
	      },
	      {
	        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?"""/, end: /"""/,
	        contains: [hljs.BACKSLASH_ESCAPE, PROMPT],
	        relevance: 10
	      },
	      {
	        begin: /([fF][rR]|[rR][fF]|[fF])'''/, end: /'''/,
	        contains: [hljs.BACKSLASH_ESCAPE, PROMPT, LITERAL_BRACKET, SUBST]
	      },
	      {
	        begin: /([fF][rR]|[rR][fF]|[fF])"""/, end: /"""/,
	        contains: [hljs.BACKSLASH_ESCAPE, PROMPT, LITERAL_BRACKET, SUBST]
	      },
	      {
	        begin: /([uU]|[rR])'/, end: /'/,
	        relevance: 10
	      },
	      {
	        begin: /([uU]|[rR])"/, end: /"/,
	        relevance: 10
	      },
	      {
	        begin: /([bB]|[bB][rR]|[rR][bB])'/, end: /'/
	      },
	      {
	        begin: /([bB]|[bB][rR]|[rR][bB])"/, end: /"/
	      },
	      {
	        begin: /([fF][rR]|[rR][fF]|[fF])'/, end: /'/,
	        contains: [hljs.BACKSLASH_ESCAPE, LITERAL_BRACKET, SUBST]
	      },
	      {
	        begin: /([fF][rR]|[rR][fF]|[fF])"/, end: /"/,
	        contains: [hljs.BACKSLASH_ESCAPE, LITERAL_BRACKET, SUBST]
	      },
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE
	    ]
	  };

	  // https://docs.python.org/3.9/reference/lexical_analysis.html#numeric-literals
	  var digitpart = '[0-9](_?[0-9])*';
	  var pointfloat = "(\\b(" + digitpart + "))?\\.(" + digitpart + ")|\\b(" + digitpart + ")\\.";
	  var NUMBER = {
	    className: 'number', relevance: 0,
	    variants: [
	      // exponentfloat, pointfloat
	      // https://docs.python.org/3.9/reference/lexical_analysis.html#floating-point-literals
	      // optionally imaginary
	      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
	      // Note: no leading \b because floats can start with a decimal point
	      // and we don't want to mishandle e.g. `fn(.5)`,
	      // no trailing \b for pointfloat because it can end with a decimal point
	      // and we don't want to mishandle e.g. `0..hex()`; this should be safe
	      // because both MUST contain a decimal point and so cannot be confused with
	      // the interior part of an identifier
	      { begin: ("(\\b(" + digitpart + ")|(" + pointfloat + "))[eE][+-]?(" + digitpart + ")[jJ]?\\b") },
	      { begin: ("(" + pointfloat + ")[jJ]?") },

	      // decinteger, bininteger, octinteger, hexinteger
	      // https://docs.python.org/3.9/reference/lexical_analysis.html#integer-literals
	      // optionally "long" in Python 2
	      // https://docs.python.org/2.7/reference/lexical_analysis.html#integer-and-long-integer-literals
	      // decinteger is optionally imaginary
	      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
	      { begin: '\\b([1-9](_?[0-9])*|0+(_?0)*)[lLjJ]?\\b' },
	      { begin: '\\b0[bB](_?[01])+[lL]?\\b' },
	      { begin: '\\b0[oO](_?[0-7])+[lL]?\\b' },
	      { begin: '\\b0[xX](_?[0-9a-fA-F])+[lL]?\\b' },

	      // imagnumber (digitpart-based)
	      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
	      { begin: ("\\b(" + digitpart + ")[jJ]\\b") } ]
	  };

	  var PARAMS = {
	    className: 'params',
	    variants: [
	      // Exclude params at functions without params
	      {begin: /\(\s*\)/, skip: true, className: null },
	      {
	        begin: /\(/, end: /\)/, excludeBegin: true, excludeEnd: true,
	        keywords: KEYWORDS,
	        contains: ['self', PROMPT, NUMBER, STRING, hljs.HASH_COMMENT_MODE],
	      } ],
	  };
	  SUBST.contains = [STRING, NUMBER, PROMPT];

	  return {
	    name: 'Python',
	    aliases: ['py', 'gyp', 'ipython'],
	    keywords: KEYWORDS,
	    illegal: /(<\/|->|\?)|=>/,
	    contains: [
	      PROMPT,
	      NUMBER,
	      // eat "if" prior to string so that it won't accidentally be
	      // labeled as an f-string as in:
	      { begin: /\bself\b/, }, // very common convention
	      { beginKeywords: "if", relevance: 0 },
	      STRING,
	      hljs.HASH_COMMENT_MODE,
	      {
	        variants: [
	          {className: 'function', beginKeywords: 'def'},
	          {className: 'class', beginKeywords: 'class'}
	        ],
	        end: /:/,
	        illegal: /[${=;\n,]/,
	        contains: [
	          hljs.UNDERSCORE_TITLE_MODE,
	          PARAMS,
	          {
	            begin: /->/, endsWithParent: true,
	            keywords: 'None'
	          }
	        ]
	      },
	      {
	        className: 'meta',
	        begin: /^[\t ]*@/, end: /(?=#)|$/,
	        contains: [NUMBER, PARAMS, STRING]
	      },
	      {
	        begin: /\b(print|exec)\(/ // don’t highlight keywords-turned-functions in Python 3
	      }
	    ]
	  };
	}

	var python_1 = python;

	var python$1 = /*#__PURE__*/Object.freeze({
		default: python_1,
		__moduleExports: python_1
	});

	/**
	 * @param {string} value
	 * @returns {RegExp}
	 * */

	/**
	 * @param {RegExp | string } re
	 * @returns {string}
	 */
	function source$2(re) {
	  if (!re) { return null; }
	  if (typeof re === "string") { return re; }

	  return re.source;
	}

	/**
	 * @param {RegExp | string } re
	 * @returns {string}
	 */
	function lookahead$1(re) {
	  return concat$2('(?=', re, ')');
	}

	/**
	 * @param {RegExp | string } re
	 * @returns {string}
	 */
	function optional(re) {
	  return concat$2('(', re, ')?');
	}

	/**
	 * @param {...(RegExp | string) } args
	 * @returns {string}
	 */
	function concat$2() {
	  var args = [], len = arguments.length;
	  while ( len-- ) args[ len ] = arguments[ len ];

	  var joined = args.map(function (x) { return source$2(x); }).join("");
	  return joined;
	}

	/**
	 * Any of the passed expresssions may match
	 *
	 * Creates a huge this | this | that | that match
	 * @param {(RegExp | string)[] } args
	 * @returns {string}
	 */
	function either() {
	  var args = [], len = arguments.length;
	  while ( len-- ) args[ len ] = arguments[ len ];

	  var joined = '(' + args.map(function (x) { return source$2(x); }).join("|") + ")";
	  return joined;
	}

	/*
	Language: HTML, XML
	Website: https://www.w3.org/XML/
	Category: common
	*/

	/** @type LanguageFn */
	function xml(hljs) {
	  // Element names can contain letters, digits, hyphens, underscores, and periods
	  var TAG_NAME_RE = concat$2(/[A-Z_]/, optional(/[A-Z0-9_.-]+:/), /[A-Z0-9_.-]*/);
	  var XML_IDENT_RE = '[A-Za-z0-9\\._:-]+';
	  var XML_ENTITIES = {
	    className: 'symbol',
	    begin: '&[a-z]+;|&#[0-9]+;|&#x[a-f0-9]+;'
	  };
	  var XML_META_KEYWORDS = {
	    begin: '\\s',
	    contains: [
	      {
	        className: 'meta-keyword',
	        begin: '#?[a-z_][a-z1-9_-]+',
	        illegal: '\\n'
	      }
	    ]
	  };
	  var XML_META_PAR_KEYWORDS = hljs.inherit(XML_META_KEYWORDS, {
	    begin: '\\(',
	    end: '\\)'
	  });
	  var APOS_META_STRING_MODE = hljs.inherit(hljs.APOS_STRING_MODE, {
	    className: 'meta-string'
	  });
	  var QUOTE_META_STRING_MODE = hljs.inherit(hljs.QUOTE_STRING_MODE, {
	    className: 'meta-string'
	  });
	  var TAG_INTERNALS = {
	    endsWithParent: true,
	    illegal: /</,
	    relevance: 0,
	    contains: [
	      {
	        className: 'attr',
	        begin: XML_IDENT_RE,
	        relevance: 0
	      },
	      {
	        begin: /=\s*/,
	        relevance: 0,
	        contains: [
	          {
	            className: 'string',
	            endsParent: true,
	            variants: [
	              {
	                begin: /"/,
	                end: /"/,
	                contains: [ XML_ENTITIES ]
	              },
	              {
	                begin: /'/,
	                end: /'/,
	                contains: [ XML_ENTITIES ]
	              },
	              {
	                begin: /[^\s"'=<>`]+/
	              }
	            ]
	          }
	        ]
	      }
	    ]
	  };
	  return {
	    name: 'HTML, XML',
	    aliases: [
	      'html',
	      'xhtml',
	      'rss',
	      'atom',
	      'xjb',
	      'xsd',
	      'xsl',
	      'plist',
	      'wsf',
	      'svg'
	    ],
	    case_insensitive: true,
	    contains: [
	      {
	        className: 'meta',
	        begin: '<![a-z]',
	        end: '>',
	        relevance: 10,
	        contains: [
	          XML_META_KEYWORDS,
	          QUOTE_META_STRING_MODE,
	          APOS_META_STRING_MODE,
	          XML_META_PAR_KEYWORDS,
	          {
	            begin: '\\[',
	            end: '\\]',
	            contains: [
	              {
	                className: 'meta',
	                begin: '<![a-z]',
	                end: '>',
	                contains: [
	                  XML_META_KEYWORDS,
	                  XML_META_PAR_KEYWORDS,
	                  QUOTE_META_STRING_MODE,
	                  APOS_META_STRING_MODE
	                ]
	              }
	            ]
	          }
	        ]
	      },
	      hljs.COMMENT(
	        '<!--',
	        '-->',
	        {
	          relevance: 10
	        }
	      ),
	      {
	        begin: '<!\\[CDATA\\[',
	        end: '\\]\\]>',
	        relevance: 10
	      },
	      XML_ENTITIES,
	      {
	        className: 'meta',
	        begin: /<\?xml/,
	        end: /\?>/,
	        relevance: 10
	      },
	      {
	        className: 'tag',
	        /*
	        The lookahead pattern (?=...) ensures that 'begin' only matches
	        '<style' as a single word, followed by a whitespace or an
	        ending braket. The '$' is needed for the lexeme to be recognized
	        by hljs.subMode() that tests lexemes outside the stream.
	        */
	        begin: '<style(?=\\s|>)',
	        end: '>',
	        keywords: {
	          name: 'style'
	        },
	        contains: [ TAG_INTERNALS ],
	        starts: {
	          end: '</style>',
	          returnEnd: true,
	          subLanguage: [
	            'css',
	            'xml'
	          ]
	        }
	      },
	      {
	        className: 'tag',
	        // See the comment in the <style tag about the lookahead pattern
	        begin: '<script(?=\\s|>)',
	        end: '>',
	        keywords: {
	          name: 'script'
	        },
	        contains: [ TAG_INTERNALS ],
	        starts: {
	          end: /<\/script>/,
	          returnEnd: true,
	          subLanguage: [
	            'javascript',
	            'handlebars',
	            'xml'
	          ]
	        }
	      },
	      // we need this for now for jSX
	      {
	        className: 'tag',
	        begin: /<>|<\/>/
	      },
	      // open tag
	      {
	        className: 'tag',
	        begin: concat$2(
	          /</,
	          lookahead$1(concat$2(
	            TAG_NAME_RE,
	            // <tag/>
	            // <tag>
	            // <tag ...
	            either(/\/>/, />/, /\s/)
	          ))
	        ),
	        end: /\/?>/,
	        contains: [
	          {
	            className: 'name',
	            begin: TAG_NAME_RE,
	            relevance: 0,
	            starts: TAG_INTERNALS
	          }
	        ]
	      },
	      // close tag
	      {
	        className: 'tag',
	        begin: concat$2(
	          /<\//,
	          lookahead$1(concat$2(
	            TAG_NAME_RE, />/
	          ))
	        ),
	        contains: [
	          {
	            className: 'name',
	            begin: TAG_NAME_RE,
	            relevance: 0
	          },
	          {
	            begin: />/,
	            relevance: 0
	          }
	        ]
	      }
	    ]
	  };
	}

	var xml_1 = xml;

	var xml$1 = /*#__PURE__*/Object.freeze({
		default: xml_1,
		__moduleExports: xml_1
	});

	/*
	Language: Django
	Description: Django is a high-level Python Web framework that encourages rapid development and clean, pragmatic design.
	Requires: xml.js
	Author: Ivan Sagalaev <maniac@softwaremaniacs.org>
	Contributors: Ilya Baryshev <baryshev@gmail.com>
	Website: https://www.djangoproject.com
	Category: template
	*/

	/** @type LanguageFn */
	function django(hljs) {
	  var FILTER = {
	    begin: /\|[A-Za-z]+:?/,
	    keywords: {
	      name:
	        'truncatewords removetags linebreaksbr yesno get_digit timesince random striptags ' +
	        'filesizeformat escape linebreaks length_is ljust rjust cut urlize fix_ampersands ' +
	        'title floatformat capfirst pprint divisibleby add make_list unordered_list urlencode ' +
	        'timeuntil urlizetrunc wordcount stringformat linenumbers slice date dictsort ' +
	        'dictsortreversed default_if_none pluralize lower join center default ' +
	        'truncatewords_html upper length phone2numeric wordwrap time addslashes slugify first ' +
	        'escapejs force_escape iriencode last safe safeseq truncatechars localize unlocalize ' +
	        'localtime utc timezone'
	    },
	    contains: [
	      hljs.QUOTE_STRING_MODE,
	      hljs.APOS_STRING_MODE
	    ]
	  };

	  return {
	    name: 'Django',
	    aliases: ['jinja'],
	    case_insensitive: true,
	    subLanguage: 'xml',
	    contains: [
	      hljs.COMMENT(/\{%\s*comment\s*%\}/, /\{%\s*endcomment\s*%\}/),
	      hljs.COMMENT(/\{#/, /#\}/),
	      {
	        className: 'template-tag',
	        begin: /\{%/,
	        end: /%\}/,
	        contains: [{
	          className: 'name',
	          begin: /\w+/,
	          keywords: {
	            name:
	                'comment endcomment load templatetag ifchanged endifchanged if endif firstof for ' +
	                'endfor ifnotequal endifnotequal widthratio extends include spaceless ' +
	                'endspaceless regroup ifequal endifequal ssi now with cycle url filter ' +
	                'endfilter debug block endblock else autoescape endautoescape csrf_token empty elif ' +
	                'endwith static trans blocktrans endblocktrans get_static_prefix get_media_prefix ' +
	                'plural get_current_language language get_available_languages ' +
	                'get_current_language_bidi get_language_info get_language_info_list localize ' +
	                'endlocalize localtime endlocaltime timezone endtimezone get_current_timezone ' +
	                'verbatim'
	          },
	          starts: {
	            endsWithParent: true,
	            keywords: 'in by as',
	            contains: [FILTER],
	            relevance: 0
	          }
	        }]
	      },
	      {
	        className: 'template-variable',
	        begin: /\{\{/,
	        end: /\}\}/,
	        contains: [FILTER]
	      }
	    ]
	  };
	}

	var django_1 = django;

	var django$1 = /*#__PURE__*/Object.freeze({
		default: django_1,
		__moduleExports: django_1
	});

	/**
	 * @param {string} value
	 * @returns {RegExp}
	 * */

	/**
	 * @param {RegExp | string } re
	 * @returns {string}
	 */
	function source$3(re) {
	  if (!re) { return null; }
	  if (typeof re === "string") { return re; }

	  return re.source;
	}

	/**
	 * @param {...(RegExp | string) } args
	 * @returns {string}
	 */
	function concat$3() {
	  var args = [], len = arguments.length;
	  while ( len-- ) args[ len ] = arguments[ len ];

	  var joined = args.map(function (x) { return source$3(x); }).join("");
	  return joined;
	}

	/*
	Language: Bash
	Author: vah <vahtenberg@gmail.com>
	Contributrors: Benjamin Pannell <contact@sierrasoftworks.com>
	Website: https://www.gnu.org/software/bash/
	Category: common
	*/

	/** @type LanguageFn */
	function bash(hljs) {
	  var VAR = {};
	  var BRACED_VAR = {
	    begin: /\$\{/,
	    end:/\}/,
	    contains: [
	      "self",
	      {
	        begin: /:-/,
	        contains: [ VAR ]
	      } // default values
	    ]
	  };
	  Object.assign(VAR,{
	    className: 'variable',
	    variants: [
	      {begin: concat$3(/\$[\w\d#@][\w\d_]*/,
	        // negative look-ahead tries to avoid matching patterns that are not
	        // Perl at all like $ident$, @ident@, etc.
	        "(?![\\w\\d])(?![$])") },
	      BRACED_VAR
	    ]
	  });

	  var SUBST = {
	    className: 'subst',
	    begin: /\$\(/, end: /\)/,
	    contains: [hljs.BACKSLASH_ESCAPE]
	  };
	  var HERE_DOC = {
	    begin: /<<-?\s*(?=\w+)/,
	    starts: {
	      contains: [
	        hljs.END_SAME_AS_BEGIN({
	          begin: /(\w+)/,
	          end: /(\w+)/,
	          className: 'string'
	        })
	      ]
	    }
	  };
	  var QUOTE_STRING = {
	    className: 'string',
	    begin: /"/, end: /"/,
	    contains: [
	      hljs.BACKSLASH_ESCAPE,
	      VAR,
	      SUBST
	    ]
	  };
	  SUBST.contains.push(QUOTE_STRING);
	  var ESCAPED_QUOTE = {
	    className: '',
	    begin: /\\"/

	  };
	  var APOS_STRING = {
	    className: 'string',
	    begin: /'/, end: /'/
	  };
	  var ARITHMETIC = {
	    begin: /\$\(\(/,
	    end: /\)\)/,
	    contains: [
	      { begin: /\d+#[0-9a-f]+/, className: "number" },
	      hljs.NUMBER_MODE,
	      VAR
	    ]
	  };
	  var SH_LIKE_SHELLS = [
	    "fish",
	    "bash",
	    "zsh",
	    "sh",
	    "csh",
	    "ksh",
	    "tcsh",
	    "dash",
	    "scsh" ];
	  var KNOWN_SHEBANG = hljs.SHEBANG({
	    binary: ("(" + (SH_LIKE_SHELLS.join("|")) + ")"),
	    relevance: 10
	  });
	  var FUNCTION = {
	    className: 'function',
	    begin: /\w[\w\d_]*\s*\(\s*\)\s*\{/,
	    returnBegin: true,
	    contains: [hljs.inherit(hljs.TITLE_MODE, {begin: /\w[\w\d_]*/})],
	    relevance: 0
	  };

	  return {
	    name: 'Bash',
	    aliases: ['sh', 'zsh'],
	    keywords: {
	      $pattern: /\b[a-z._-]+\b/,
	      keyword:
	        'if then else elif fi for while in do done case esac function',
	      literal:
	        'true false',
	      built_in:
	        // Shell built-ins
	        // http://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html
	        'break cd continue eval exec exit export getopts hash pwd readonly return shift test times ' +
	        'trap umask unset ' +
	        // Bash built-ins
	        'alias bind builtin caller command declare echo enable help let local logout mapfile printf ' +
	        'read readarray source type typeset ulimit unalias ' +
	        // Shell modifiers
	        'set shopt ' +
	        // Zsh built-ins
	        'autoload bg bindkey bye cap chdir clone comparguments compcall compctl compdescribe compfiles ' +
	        'compgroups compquote comptags comptry compvalues dirs disable disown echotc echoti emulate ' +
	        'fc fg float functions getcap getln history integer jobs kill limit log noglob popd print ' +
	        'pushd pushln rehash sched setcap setopt stat suspend ttyctl unfunction unhash unlimit ' +
	        'unsetopt vared wait whence where which zcompile zformat zftp zle zmodload zparseopts zprof ' +
	        'zpty zregexparse zsocket zstyle ztcp'
	    },
	    contains: [
	      KNOWN_SHEBANG, // to catch known shells and boost relevancy
	      hljs.SHEBANG(), // to catch unknown shells but still highlight the shebang
	      FUNCTION,
	      ARITHMETIC,
	      hljs.HASH_COMMENT_MODE,
	      HERE_DOC,
	      QUOTE_STRING,
	      ESCAPED_QUOTE,
	      APOS_STRING,
	      VAR
	    ]
	  };
	}

	var bash_1 = bash;

	var bash$1 = /*#__PURE__*/Object.freeze({
		default: bash_1,
		__moduleExports: bash_1
	});

	/*
	Language: CSS
	Category: common, css
	Website: https://developer.mozilla.org/en-US/docs/Web/CSS
	*/

	/** @type LanguageFn */
	function css(hljs) {
	  var FUNCTION_LIKE = {
	    begin: /[\w-]+\(/, returnBegin: true,
	    contains: [
	      {
	        className: 'built_in',
	        begin: /[\w-]+/
	      },
	      {
	        begin: /\(/, end: /\)/,
	        contains: [
	          hljs.APOS_STRING_MODE,
	          hljs.QUOTE_STRING_MODE,
	          hljs.CSS_NUMBER_MODE ]
	      }
	    ]
	  };
	  var ATTRIBUTE = {
	    className: 'attribute',
	    begin: /\S/, end: ':', excludeEnd: true,
	    starts: {
	      endsWithParent: true, excludeEnd: true,
	      contains: [
	        FUNCTION_LIKE,
	        hljs.CSS_NUMBER_MODE,
	        hljs.QUOTE_STRING_MODE,
	        hljs.APOS_STRING_MODE,
	        hljs.C_BLOCK_COMMENT_MODE,
	        {
	          className: 'number', begin: '#[0-9A-Fa-f]+'
	        },
	        {
	          className: 'meta', begin: '!important'
	        }
	      ]
	    }
	  };
	  var AT_IDENTIFIER = '@[a-z-]+'; // @font-face
	  var AT_MODIFIERS = "and or not only";
	  var AT_PROPERTY_RE = /@-?\w[\w]*(-\w+)*/; // @-webkit-keyframes
	  var IDENT_RE = '[a-zA-Z-][a-zA-Z0-9_-]*';
	  var RULE = {
	    begin: /([*]\s?)?(?:[A-Z_.\-\\]+|--[a-zA-Z0-9_-]+)\s*(\/\*\*\/)?:/, returnBegin: true, end: ';', endsWithParent: true,
	    contains: [
	      ATTRIBUTE
	    ]
	  };

	  return {
	    name: 'CSS',
	    case_insensitive: true,
	    illegal: /[=|'\$]/,
	    contains: [
	      hljs.C_BLOCK_COMMENT_MODE,
	      {
	        className: 'selector-id', begin: /#[A-Za-z0-9_-]+/
	      },
	      {
	        className: 'selector-class', begin: '\\.' + IDENT_RE
	      },
	      {
	        className: 'selector-attr',
	        begin: /\[/, end: /\]/,
	        illegal: '$',
	        contains: [
	          hljs.APOS_STRING_MODE,
	          hljs.QUOTE_STRING_MODE ]
	      },
	      {
	        className: 'selector-pseudo',
	        begin: /:(:)?[a-zA-Z0-9_+()"'.-]+/
	      },
	      // matching these here allows us to treat them more like regular CSS
	      // rules so everything between the {} gets regular rule highlighting,
	      // which is what we want for page and font-face
	      {
	        begin: '@(page|font-face)',
	        lexemes: AT_IDENTIFIER,
	        keywords: '@page @font-face'
	      },
	      {
	        begin: '@', end: '[{;]', // at_rule eating first "{" is a good thing
	                                 // because it doesn’t let it to be parsed as
	                                 // a rule set but instead drops parser into
	                                 // the default mode which is how it should be.
	        illegal: /:/, // break on Less variables @var: ...
	        returnBegin: true,
	        contains: [
	          {
	            className: 'keyword',
	            begin: AT_PROPERTY_RE
	          },
	          {
	            begin: /\s/, endsWithParent: true, excludeEnd: true,
	            relevance: 0,
	            keywords: AT_MODIFIERS,
	            contains: [
	              {
	                begin: /[a-z-]+:/,
	                className:"attribute"
	              },
	              hljs.APOS_STRING_MODE,
	              hljs.QUOTE_STRING_MODE,
	              hljs.CSS_NUMBER_MODE
	            ]
	          }
	        ]
	      },
	      {
	        className: 'selector-tag', begin: IDENT_RE,
	        relevance: 0
	      },
	      {
	        begin: /\{/, end: /\}/,
	        illegal: /\S/,
	        contains: [
	          hljs.C_BLOCK_COMMENT_MODE,
	          { begin: /;/ }, // empty ; rule
	          RULE ]
	      }
	    ]
	  };
	}

	var css_1 = css;

	var css$1 = /*#__PURE__*/Object.freeze({
		default: css_1,
		__moduleExports: css_1
	});

	/**
	 * @param {string} value
	 * @returns {RegExp}
	 * */

	/**
	 * @param {RegExp | string } re
	 * @returns {string}
	 */
	function source$4(re) {
	  if (!re) { return null; }
	  if (typeof re === "string") { return re; }

	  return re.source;
	}

	/**
	 * @param {...(RegExp | string) } args
	 * @returns {string}
	 */
	function concat$4() {
	  var args = [], len = arguments.length;
	  while ( len-- ) args[ len ] = arguments[ len ];

	  var joined = args.map(function (x) { return source$4(x); }).join("");
	  return joined;
	}

	/*
	Language: Markdown
	Requires: xml.js
	Author: John Crepezzi <john.crepezzi@gmail.com>
	Website: https://daringfireball.net/projects/markdown/
	Category: common, markup
	*/

	function markdown(hljs) {
	  var INLINE_HTML = {
	    begin: /<\/?[A-Za-z_]/,
	    end: '>',
	    subLanguage: 'xml',
	    relevance: 0
	  };
	  var HORIZONTAL_RULE = {
	    begin: '^[-\\*]{3,}',
	    end: '$'
	  };
	  var CODE = {
	    className: 'code',
	    variants: [
	      // TODO: fix to allow these to work with sublanguage also
	      {
	        begin: '(`{3,})[^`](.|\\n)*?\\1`*[ ]*'
	      },
	      {
	        begin: '(~{3,})[^~](.|\\n)*?\\1~*[ ]*'
	      },
	      // needed to allow markdown as a sublanguage to work
	      {
	        begin: '```',
	        end: '```+[ ]*$'
	      },
	      {
	        begin: '~~~',
	        end: '~~~+[ ]*$'
	      },
	      {
	        begin: '`.+?`'
	      },
	      {
	        begin: '(?=^( {4}|\\t))',
	        // use contains to gobble up multiple lines to allow the block to be whatever size
	        // but only have a single open/close tag vs one per line
	        contains: [
	          {
	            begin: '^( {4}|\\t)',
	            end: '(\\n)$'
	          }
	        ],
	        relevance: 0
	      }
	    ]
	  };
	  var LIST = {
	    className: 'bullet',
	    begin: '^[ \t]*([*+-]|(\\d+\\.))(?=\\s+)',
	    end: '\\s+',
	    excludeEnd: true
	  };
	  var LINK_REFERENCE = {
	    begin: /^\[[^\n]+\]:/,
	    returnBegin: true,
	    contains: [
	      {
	        className: 'symbol',
	        begin: /\[/,
	        end: /\]/,
	        excludeBegin: true,
	        excludeEnd: true
	      },
	      {
	        className: 'link',
	        begin: /:\s*/,
	        end: /$/,
	        excludeBegin: true
	      }
	    ]
	  };
	  var URL_SCHEME = /[A-Za-z][A-Za-z0-9+.-]*/;
	  var LINK = {
	    variants: [
	      // too much like nested array access in so many languages
	      // to have any real relevance
	      {
	        begin: /\[.+?\]\[.*?\]/,
	        relevance: 0
	      },
	      // popular internet URLs
	      {
	        begin: /\[.+?\]\(((data|javascript|mailto):|(?:http|ftp)s?:\/\/).*?\)/,
	        relevance: 2
	      },
	      {
	        begin: concat$4(/\[.+?\]\(/, URL_SCHEME, /:\/\/.*?\)/),
	        relevance: 2
	      },
	      // relative urls
	      {
	        begin: /\[.+?\]\([./?&#].*?\)/,
	        relevance: 1
	      },
	      // whatever else, lower relevance (might not be a link at all)
	      {
	        begin: /\[.+?\]\(.*?\)/,
	        relevance: 0
	      }
	    ],
	    returnBegin: true,
	    contains: [
	      {
	        className: 'string',
	        relevance: 0,
	        begin: '\\[',
	        end: '\\]',
	        excludeBegin: true,
	        returnEnd: true
	      },
	      {
	        className: 'link',
	        relevance: 0,
	        begin: '\\]\\(',
	        end: '\\)',
	        excludeBegin: true,
	        excludeEnd: true
	      },
	      {
	        className: 'symbol',
	        relevance: 0,
	        begin: '\\]\\[',
	        end: '\\]',
	        excludeBegin: true,
	        excludeEnd: true
	      }
	    ]
	  };
	  var BOLD = {
	    className: 'strong',
	    contains: [],
	    variants: [
	      {
	        begin: /_{2}/,
	        end: /_{2}/
	      },
	      {
	        begin: /\*{2}/,
	        end: /\*{2}/
	      }
	    ]
	  };
	  var ITALIC = {
	    className: 'emphasis',
	    contains: [],
	    variants: [
	      {
	        begin: /\*(?!\*)/,
	        end: /\*/
	      },
	      {
	        begin: /_(?!_)/,
	        end: /_/,
	        relevance: 0
	      }
	    ]
	  };
	  BOLD.contains.push(ITALIC);
	  ITALIC.contains.push(BOLD);

	  var CONTAINABLE = [
	    INLINE_HTML,
	    LINK
	  ];

	  BOLD.contains = BOLD.contains.concat(CONTAINABLE);
	  ITALIC.contains = ITALIC.contains.concat(CONTAINABLE);

	  CONTAINABLE = CONTAINABLE.concat(BOLD, ITALIC);

	  var HEADER = {
	    className: 'section',
	    variants: [
	      {
	        begin: '^#{1,6}',
	        end: '$',
	        contains: CONTAINABLE
	      },
	      {
	        begin: '(?=^.+?\\n[=-]{2,}$)',
	        contains: [
	          {
	            begin: '^[=-]*$'
	          },
	          {
	            begin: '^',
	            end: "\\n",
	            contains: CONTAINABLE
	          }
	        ]
	      }
	    ]
	  };

	  var BLOCKQUOTE = {
	    className: 'quote',
	    begin: '^>\\s+',
	    contains: CONTAINABLE,
	    end: '$'
	  };

	  return {
	    name: 'Markdown',
	    aliases: [
	      'md',
	      'mkdown',
	      'mkd'
	    ],
	    contains: [
	      HEADER,
	      INLINE_HTML,
	      LIST,
	      BOLD,
	      ITALIC,
	      BLOCKQUOTE,
	      CODE,
	      HORIZONTAL_RULE,
	      LINK,
	      LINK_REFERENCE
	    ]
	  };
	}

	var markdown_1 = markdown;

	var markdown$1 = /*#__PURE__*/Object.freeze({
		default: markdown_1,
		__moduleExports: markdown_1
	});

	/*
	Language: Diff
	Description: Unified and context diff
	Author: Vasily Polovnyov <vast@whiteants.net>
	Website: https://www.gnu.org/software/diffutils/
	Category: common
	*/

	/** @type LanguageFn */
	function diff(hljs) {
	  return {
	    name: 'Diff',
	    aliases: ['patch'],
	    contains: [
	      {
	        className: 'meta',
	        relevance: 10,
	        variants: [
	          {
	            begin: /^@@ +-\d+,\d+ +\+\d+,\d+ +@@/
	          },
	          {
	            begin: /^\*\*\* +\d+,\d+ +\*\*\*\*$/
	          },
	          {
	            begin: /^--- +\d+,\d+ +----$/
	          }
	        ]
	      },
	      {
	        className: 'comment',
	        variants: [
	          {
	            begin: /Index: /,
	            end: /$/
	          },
	          {
	            begin: /^index/,
	            end: /$/
	          },
	          {
	            begin: /={3,}/,
	            end: /$/
	          },
	          {
	            begin: /^-{3}/,
	            end: /$/
	          },
	          {
	            begin: /^\*{3} /,
	            end: /$/
	          },
	          {
	            begin: /^\+{3}/,
	            end: /$/
	          },
	          {
	            begin: /^\*{15}$/
	          },
	          {
	            begin: /^diff --git/,
	            end: /$/
	          }
	        ]
	      },
	      {
	        className: 'addition',
	        begin: /^\+/,
	        end: /$/
	      },
	      {
	        className: 'deletion',
	        begin: /^-/,
	        end: /$/
	      },
	      {
	        className: 'addition',
	        begin: /^!/,
	        end: /$/
	      }
	    ]
	  };
	}

	var diff_1 = diff;

	var diff$1 = /*#__PURE__*/Object.freeze({
		default: diff_1,
		__moduleExports: diff_1
	});

	/*
	Language: JSON
	Description: JSON (JavaScript Object Notation) is a lightweight data-interchange format.
	Author: Ivan Sagalaev <maniac@softwaremaniacs.org>
	Website: http://www.json.org
	Category: common, protocols
	*/

	function json(hljs) {
	  var LITERALS = {
	    literal: 'true false null'
	  };
	  var ALLOWED_COMMENTS = [
	    hljs.C_LINE_COMMENT_MODE,
	    hljs.C_BLOCK_COMMENT_MODE
	  ];
	  var TYPES = [
	    hljs.QUOTE_STRING_MODE,
	    hljs.C_NUMBER_MODE
	  ];
	  var VALUE_CONTAINER = {
	    end: ',',
	    endsWithParent: true,
	    excludeEnd: true,
	    contains: TYPES,
	    keywords: LITERALS
	  };
	  var OBJECT = {
	    begin: /\{/,
	    end: /\}/,
	    contains: [
	      {
	        className: 'attr',
	        begin: /"/,
	        end: /"/,
	        contains: [hljs.BACKSLASH_ESCAPE],
	        illegal: '\\n'
	      },
	      hljs.inherit(VALUE_CONTAINER, {
	        begin: /:/
	      })
	    ].concat(ALLOWED_COMMENTS),
	    illegal: '\\S'
	  };
	  var ARRAY = {
	    begin: '\\[',
	    end: '\\]',
	    contains: [hljs.inherit(VALUE_CONTAINER)], // inherit is a workaround for a bug that makes shared modes with endsWithParent compile only the ending of one of the parents
	    illegal: '\\S'
	  };
	  TYPES.push(OBJECT, ARRAY);
	  ALLOWED_COMMENTS.forEach(function(rule) {
	    TYPES.push(rule);
	  });
	  return {
	    name: 'JSON',
	    contains: TYPES,
	    keywords: LITERALS,
	    illegal: '\\S'
	  };
	}

	var json_1 = json;

	var json$1 = /*#__PURE__*/Object.freeze({
		default: json_1,
		__moduleExports: json_1
	});

	/*
	Language: Less
	Description: It's CSS, with just a little more.
	Author:   Max Mikhailov <seven.phases.max@gmail.com>
	Website: http://lesscss.org
	Category: common, css
	*/

	function less(hljs) {
	  var IDENT_RE        = '[\\w-]+'; // yes, Less identifiers may begin with a digit
	  var INTERP_IDENT_RE = '(' + IDENT_RE + '|@\\{' + IDENT_RE + '\\})';

	  /* Generic Modes */

	  var RULES = [], VALUE = []; // forward def. for recursive modes

	  var STRING_MODE = function(c) { return {
	    // Less strings are not multiline (also include '~' for more consistent coloring of "escaped" strings)
	    className: 'string', begin: '~?' + c + '.*?' + c
	  };};

	  var IDENT_MODE = function(name, begin, relevance) { return {
	    className: name, begin: begin, relevance: relevance
	  };};

	  var PARENS_MODE = {
	    // used only to properly balance nested parens inside mixin call, def. arg list
	    begin: '\\(', end: '\\)', contains: VALUE, relevance: 0
	  };

	  // generic Less highlighter (used almost everywhere except selectors):
	  VALUE.push(
	    hljs.C_LINE_COMMENT_MODE,
	    hljs.C_BLOCK_COMMENT_MODE,
	    STRING_MODE("'"),
	    STRING_MODE('"'),
	    hljs.CSS_NUMBER_MODE, // fixme: it does not include dot for numbers like .5em :(
	    {
	      begin: '(url|data-uri)\\(',
	      starts: {className: 'string', end: '[\\)\\n]', excludeEnd: true}
	    },
	    IDENT_MODE('number', '#[0-9A-Fa-f]+\\b'),
	    PARENS_MODE,
	    IDENT_MODE('variable', '@@?' + IDENT_RE, 10),
	    IDENT_MODE('variable', '@\\{'  + IDENT_RE + '\\}'),
	    IDENT_MODE('built_in', '~?`[^`]*?`'), // inline javascript (or whatever host language) *multiline* string
	    { // @media features (it’s here to not duplicate things in AT_RULE_MODE with extra PARENS_MODE overriding):
	      className: 'attribute', begin: IDENT_RE + '\\s*:', end: ':', returnBegin: true, excludeEnd: true
	    },
	    {
	      className: 'meta',
	      begin: '!important'
	    }
	  );

	  var VALUE_WITH_RULESETS = VALUE.concat({
	    begin: /\{/, end: /\}/, contains: RULES
	  });

	  var MIXIN_GUARD_MODE = {
	    beginKeywords: 'when', endsWithParent: true,
	    contains: [{beginKeywords: 'and not'}].concat(VALUE) // using this form to override VALUE’s 'function' match
	  };

	  /* Rule-Level Modes */

	  var RULE_MODE = {
	    begin: INTERP_IDENT_RE + '\\s*:', returnBegin: true, end: '[;}]',
	    relevance: 0,
	    contains: [
	      {
	        className: 'attribute',
	        begin: INTERP_IDENT_RE, end: ':', excludeEnd: true,
	        starts: {
	          endsWithParent: true, illegal: '[<=$]',
	          relevance: 0,
	          contains: VALUE
	        }
	      }
	    ]
	  };

	  var AT_RULE_MODE = {
	    className: 'keyword',
	    begin: '@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\b',
	    starts: {end: '[;{}]', returnEnd: true, contains: VALUE, relevance: 0}
	  };

	  // variable definitions and calls
	  var VAR_RULE_MODE = {
	    className: 'variable',
	    variants: [
	      // using more strict pattern for higher relevance to increase chances of Less detection.
	      // this is *the only* Less specific statement used in most of the sources, so...
	      // (we’ll still often loose to the css-parser unless there's '//' comment,
	      // simply because 1 variable just can't beat 99 properties :)
	      {begin: '@' + IDENT_RE + '\\s*:', relevance: 15},
	      {begin: '@' + IDENT_RE}
	    ],
	    starts: {end: '[;}]', returnEnd: true, contains: VALUE_WITH_RULESETS}
	  };

	  var SELECTOR_MODE = {
	    // first parse unambiguous selectors (i.e. those not starting with tag)
	    // then fall into the scary lookahead-discriminator variant.
	    // this mode also handles mixin definitions and calls
	    variants: [{
	      begin: '[\\.#:&\\[>]', end: '[;{}]'  // mixin calls end with ';'
	      }, {
	      begin: INTERP_IDENT_RE, end: /\{/
	    }],
	    returnBegin: true,
	    returnEnd:   true,
	    illegal: '[<=\'$"]',
	    relevance: 0,
	    contains: [
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      MIXIN_GUARD_MODE,
	      IDENT_MODE('keyword',  'all\\b'),
	      IDENT_MODE('variable', '@\\{'  + IDENT_RE + '\\}'),     // otherwise it’s identified as tag
	      IDENT_MODE('selector-tag',  INTERP_IDENT_RE + '%?', 0), // '%' for more consistent coloring of @keyframes "tags"
	      IDENT_MODE('selector-id', '#' + INTERP_IDENT_RE),
	      IDENT_MODE('selector-class', '\\.' + INTERP_IDENT_RE, 0),
	      IDENT_MODE('selector-tag',  '&', 0),
	      {className: 'selector-attr', begin: '\\[', end: '\\]'},
	      {className: 'selector-pseudo', begin: /:(:)?[a-zA-Z0-9_\-+()"'.]+/},
	      {begin: '\\(', end: '\\)', contains: VALUE_WITH_RULESETS}, // argument list of parametric mixins
	      {begin: '!important'} // eat !important after mixin call or it will be colored as tag
	    ]
	  };

	  RULES.push(
	    hljs.C_LINE_COMMENT_MODE,
	    hljs.C_BLOCK_COMMENT_MODE,
	    AT_RULE_MODE,
	    VAR_RULE_MODE,
	    RULE_MODE,
	    SELECTOR_MODE
	  );

	  return {
	    name: 'Less',
	    case_insensitive: true,
	    illegal: '[=>\'/<($"]',
	    contains: RULES
	  };
	}

	var less_1 = less;

	var less$1 = /*#__PURE__*/Object.freeze({
		default: less_1,
		__moduleExports: less_1
	});

	/*
	Language: Nginx config
	Author: Peter Leonov <gojpeg@yandex.ru>
	Contributors: Ivan Sagalaev <maniac@softwaremaniacs.org>
	Category: common, config
	Website: https://www.nginx.com
	*/

	function nginx(hljs) {
	  var VAR = {
	    className: 'variable',
	    variants: [
	      {
	        begin: /\$\d+/
	      },
	      {
	        begin: /\$\{/,
	        end: /\}/
	      },
	      {
	        begin: /[$@]/ + hljs.UNDERSCORE_IDENT_RE
	      }
	    ]
	  };
	  var DEFAULT = {
	    endsWithParent: true,
	    keywords: {
	      $pattern: '[a-z/_]+',
	      literal:
	        'on off yes no true false none blocked debug info notice warn error crit ' +
	        'select break last permanent redirect kqueue rtsig epoll poll /dev/poll'
	    },
	    relevance: 0,
	    illegal: '=>',
	    contains: [
	      hljs.HASH_COMMENT_MODE,
	      {
	        className: 'string',
	        contains: [
	          hljs.BACKSLASH_ESCAPE,
	          VAR
	        ],
	        variants: [
	          {
	            begin: /"/,
	            end: /"/
	          },
	          {
	            begin: /'/,
	            end: /'/
	          }
	        ]
	      },
	      // this swallows entire URLs to avoid detecting numbers within
	      {
	        begin: '([a-z]+):/',
	        end: '\\s',
	        endsWithParent: true,
	        excludeEnd: true,
	        contains: [ VAR ]
	      },
	      {
	        className: 'regexp',
	        contains: [
	          hljs.BACKSLASH_ESCAPE,
	          VAR
	        ],
	        variants: [
	          {
	            begin: "\\s\\^",
	            end: "\\s|\\{|;",
	            returnEnd: true
	          },
	          // regexp locations (~, ~*)
	          {
	            begin: "~\\*?\\s+",
	            end: "\\s|\\{|;",
	            returnEnd: true
	          },
	          // *.example.com
	          {
	            begin: "\\*(\\.[a-z\\-]+)+"
	          },
	          // sub.example.*
	          {
	            begin: "([a-z\\-]+\\.)+\\*"
	          }
	        ]
	      },
	      // IP
	      {
	        className: 'number',
	        begin: '\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(:\\d{1,5})?\\b'
	      },
	      // units
	      {
	        className: 'number',
	        begin: '\\b\\d+[kKmMgGdshdwy]*\\b',
	        relevance: 0
	      },
	      VAR
	    ]
	  };

	  return {
	    name: 'Nginx config',
	    aliases: [ 'nginxconf' ],
	    contains: [
	      hljs.HASH_COMMENT_MODE,
	      {
	        begin: hljs.UNDERSCORE_IDENT_RE + '\\s+\\{',
	        returnBegin: true,
	        end: /\{/,
	        contains: [
	          {
	            className: 'section',
	            begin: hljs.UNDERSCORE_IDENT_RE
	          }
	        ],
	        relevance: 0
	      },
	      {
	        begin: hljs.UNDERSCORE_IDENT_RE + '\\s',
	        end: ';|\\{',
	        returnBegin: true,
	        contains: [
	          {
	            className: 'attribute',
	            begin: hljs.UNDERSCORE_IDENT_RE,
	            starts: DEFAULT
	          }
	        ],
	        relevance: 0
	      }
	    ],
	    illegal: '[^\\s\\}]'
	  };
	}

	var nginx_1 = nginx;

	var nginx$1 = /*#__PURE__*/Object.freeze({
		default: nginx_1,
		__moduleExports: nginx_1
	});

	/*
	Language: SCSS
	Description: Scss is an extension of the syntax of CSS.
	Author: Kurt Emch <kurt@kurtemch.com>
	Website: https://sass-lang.com
	Category: common, css
	*/
	function scss(hljs) {
	  var AT_IDENTIFIER = '@[a-z-]+'; // @font-face
	  var AT_MODIFIERS = "and or not only";
	  var IDENT_RE = '[a-zA-Z-][a-zA-Z0-9_-]*';
	  var VARIABLE = {
	    className: 'variable',
	    begin: '(\\$' + IDENT_RE + ')\\b'
	  };
	  var HEXCOLOR = {
	    className: 'number', begin: '#[0-9A-Fa-f]+'
	  };
	  var DEF_INTERNALS = {
	    className: 'attribute',
	    begin: '[A-Z\\_\\.\\-]+', end: ':',
	    excludeEnd: true,
	    illegal: '[^\\s]',
	    starts: {
	      endsWithParent: true, excludeEnd: true,
	      contains: [
	        HEXCOLOR,
	        hljs.CSS_NUMBER_MODE,
	        hljs.QUOTE_STRING_MODE,
	        hljs.APOS_STRING_MODE,
	        hljs.C_BLOCK_COMMENT_MODE,
	        {
	          className: 'meta', begin: '!important'
	        }
	      ]
	    }
	  };
	  return {
	    name: 'SCSS',
	    case_insensitive: true,
	    illegal: '[=/|\']',
	    contains: [
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      {
	        className: 'selector-id', begin: '#[A-Za-z0-9_-]+',
	        relevance: 0
	      },
	      {
	        className: 'selector-class', begin: '\\.[A-Za-z0-9_-]+',
	        relevance: 0
	      },
	      {
	        className: 'selector-attr', begin: '\\[', end: '\\]',
	        illegal: '$'
	      },
	      {
	        className: 'selector-tag', // begin: IDENT_RE, end: '[,|\\s]'
	        begin: '\\b(a|abbr|acronym|address|area|article|aside|audio|b|base|big|blockquote|body|br|button|canvas|caption|cite|code|col|colgroup|command|datalist|dd|del|details|dfn|div|dl|dt|em|embed|fieldset|figcaption|figure|footer|form|frame|frameset|(h[1-6])|head|header|hgroup|hr|html|i|iframe|img|input|ins|kbd|keygen|label|legend|li|link|map|mark|meta|meter|nav|noframes|noscript|object|ol|optgroup|option|output|p|param|pre|progress|q|rp|rt|ruby|samp|script|section|select|small|span|strike|strong|style|sub|sup|table|tbody|td|textarea|tfoot|th|thead|time|title|tr|tt|ul|var|video)\\b',
	        relevance: 0
	      },
	      {
	        className: 'selector-pseudo',
	        begin: ':(visited|valid|root|right|required|read-write|read-only|out-range|optional|only-of-type|only-child|nth-of-type|nth-last-of-type|nth-last-child|nth-child|not|link|left|last-of-type|last-child|lang|invalid|indeterminate|in-range|hover|focus|first-of-type|first-line|first-letter|first-child|first|enabled|empty|disabled|default|checked|before|after|active)'
	      },
	      {
	        className: 'selector-pseudo',
	        begin: '::(after|before|choices|first-letter|first-line|repeat-index|repeat-item|selection|value)'
	      },
	      VARIABLE,
	      {
	        className: 'attribute',
	        begin: '\\b(src|z-index|word-wrap|word-spacing|word-break|width|widows|white-space|visibility|vertical-align|unicode-bidi|transition-timing-function|transition-property|transition-duration|transition-delay|transition|transform-style|transform-origin|transform|top|text-underline-position|text-transform|text-shadow|text-rendering|text-overflow|text-indent|text-decoration-style|text-decoration-line|text-decoration-color|text-decoration|text-align-last|text-align|tab-size|table-layout|right|resize|quotes|position|pointer-events|perspective-origin|perspective|page-break-inside|page-break-before|page-break-after|padding-top|padding-right|padding-left|padding-bottom|padding|overflow-y|overflow-x|overflow-wrap|overflow|outline-width|outline-style|outline-offset|outline-color|outline|orphans|order|opacity|object-position|object-fit|normal|none|nav-up|nav-right|nav-left|nav-index|nav-down|min-width|min-height|max-width|max-height|mask|marks|margin-top|margin-right|margin-left|margin-bottom|margin|list-style-type|list-style-position|list-style-image|list-style|line-height|letter-spacing|left|justify-content|initial|inherit|ime-mode|image-orientation|image-resolution|image-rendering|icon|hyphens|height|font-weight|font-variant-ligatures|font-variant|font-style|font-stretch|font-size-adjust|font-size|font-language-override|font-kerning|font-feature-settings|font-family|font|float|flex-wrap|flex-shrink|flex-grow|flex-flow|flex-direction|flex-basis|flex|filter|empty-cells|display|direction|cursor|counter-reset|counter-increment|content|column-width|column-span|column-rule-width|column-rule-style|column-rule-color|column-rule|column-gap|column-fill|column-count|columns|color|clip-path|clip|clear|caption-side|break-inside|break-before|break-after|box-sizing|box-shadow|box-decoration-break|bottom|border-width|border-top-width|border-top-style|border-top-right-radius|border-top-left-radius|border-top-color|border-top|border-style|border-spacing|border-right-width|border-right-style|border-right-color|border-right|border-radius|border-left-width|border-left-style|border-left-color|border-left|border-image-width|border-image-source|border-image-slice|border-image-repeat|border-image-outset|border-image|border-color|border-collapse|border-bottom-width|border-bottom-style|border-bottom-right-radius|border-bottom-left-radius|border-bottom-color|border-bottom|border|background-size|background-repeat|background-position|background-origin|background-image|background-color|background-clip|background-attachment|background-blend-mode|background|backface-visibility|auto|animation-timing-function|animation-play-state|animation-name|animation-iteration-count|animation-fill-mode|animation-duration|animation-direction|animation-delay|animation|align-self|align-items|align-content)\\b',
	        illegal: '[^\\s]'
	      },
	      {
	        begin: '\\b(whitespace|wait|w-resize|visible|vertical-text|vertical-ideographic|uppercase|upper-roman|upper-alpha|underline|transparent|top|thin|thick|text|text-top|text-bottom|tb-rl|table-header-group|table-footer-group|sw-resize|super|strict|static|square|solid|small-caps|separate|se-resize|scroll|s-resize|rtl|row-resize|ridge|right|repeat|repeat-y|repeat-x|relative|progress|pointer|overline|outside|outset|oblique|nowrap|not-allowed|normal|none|nw-resize|no-repeat|no-drop|newspaper|ne-resize|n-resize|move|middle|medium|ltr|lr-tb|lowercase|lower-roman|lower-alpha|loose|list-item|line|line-through|line-edge|lighter|left|keep-all|justify|italic|inter-word|inter-ideograph|inside|inset|inline|inline-block|inherit|inactive|ideograph-space|ideograph-parenthesis|ideograph-numeric|ideograph-alpha|horizontal|hidden|help|hand|groove|fixed|ellipsis|e-resize|double|dotted|distribute|distribute-space|distribute-letter|distribute-all-lines|disc|disabled|default|decimal|dashed|crosshair|collapse|col-resize|circle|char|center|capitalize|break-word|break-all|bottom|both|bolder|bold|block|bidi-override|below|baseline|auto|always|all-scroll|absolute|table|table-cell)\\b'
	      },
	      {
	        begin: ':', end: ';',
	        contains: [
	          VARIABLE,
	          HEXCOLOR,
	          hljs.CSS_NUMBER_MODE,
	          hljs.QUOTE_STRING_MODE,
	          hljs.APOS_STRING_MODE,
	          {
	            className: 'meta', begin: '!important'
	          }
	        ]
	      },
	      // matching these here allows us to treat them more like regular CSS
	      // rules so everything between the {} gets regular rule highlighting,
	      // which is what we want for page and font-face
	      {
	        begin: '@(page|font-face)',
	        lexemes: AT_IDENTIFIER,
	        keywords: '@page @font-face'
	      },
	      {
	        begin: '@', end: '[{;]',
	        returnBegin: true,
	        keywords: AT_MODIFIERS,
	        contains: [
	          {
	            begin: AT_IDENTIFIER,
	            className: "keyword"
	          },
	          VARIABLE,
	          hljs.QUOTE_STRING_MODE,
	          hljs.APOS_STRING_MODE,
	          HEXCOLOR,
	          hljs.CSS_NUMBER_MODE ]
	      }
	    ]
	  };
	}

	var scss_1 = scss;

	var scss$1 = /*#__PURE__*/Object.freeze({
		default: scss_1,
		__moduleExports: scss_1
	});

	/*
	Language: Shell Session
	Requires: bash.js
	Author: TSUYUSATO Kitsune <make.just.on@gmail.com>
	Category: common
	Audit: 2020
	*/

	/** @type LanguageFn */
	function shell(hljs) {
	  return {
	    name: 'Shell Session',
	    aliases: [ 'console' ],
	    contains: [
	      {
	        className: 'meta',
	        // We cannot add \s (spaces) in the regular expression otherwise it will be too broad and produce unexpected result.
	        // For instance, in the following example, it would match "echo /path/to/home >" as a prompt:
	        // echo /path/to/home > t.exe
	        begin: /^\s{0,3}[/~\w\d[\]()@-]*[>%$#]/,
	        starts: {
	          end: /[^\\](?=\s*$)/,
	          subLanguage: 'bash'
	        }
	      }
	    ]
	  };
	}

	var shell_1 = shell;

	var shell$1 = /*#__PURE__*/Object.freeze({
		default: shell_1,
		__moduleExports: shell_1
	});

	/*
	 Language: SQL
	 Contributors: Nikolay Lisienko <info@neor.ru>, Heiko August <post@auge8472.de>, Travis Odom <travis.a.odom@gmail.com>, Vadimtro <vadimtro@yahoo.com>, Benjamin Auder <benjamin.auder@gmail.com>
	 Website: https://en.wikipedia.org/wiki/SQL
	 Category: common
	 */

	function sql(hljs) {
	  var COMMENT_MODE = hljs.COMMENT('--', '$');
	  return {
	    name: 'SQL',
	    case_insensitive: true,
	    illegal: /[<>{}*]/,
	    contains: [
	      {
	        beginKeywords:
	          'begin end start commit rollback savepoint lock alter create drop rename call ' +
	          'delete do handler insert load replace select truncate update set show pragma grant ' +
	          'merge describe use explain help declare prepare execute deallocate release ' +
	          'unlock purge reset change stop analyze cache flush optimize repair kill ' +
	          'install uninstall checksum restore check backup revoke comment values with',
	        end: /;/, endsWithParent: true,
	        keywords: {
	          $pattern: /[\w\.]+/,
	          keyword:
	            'as abort abs absolute acc acce accep accept access accessed accessible account acos action activate add ' +
	            'addtime admin administer advanced advise aes_decrypt aes_encrypt after agent aggregate ali alia alias ' +
	            'all allocate allow alter always analyze ancillary and anti any anydata anydataset anyschema anytype apply ' +
	            'archive archived archivelog are as asc ascii asin assembly assertion associate asynchronous at atan ' +
	            'atn2 attr attri attrib attribu attribut attribute attributes audit authenticated authentication authid ' +
	            'authors auto autoallocate autodblink autoextend automatic availability avg backup badfile basicfile ' +
	            'before begin beginning benchmark between bfile bfile_base big bigfile bin binary_double binary_float ' +
	            'binlog bit_and bit_count bit_length bit_or bit_xor bitmap blob_base block blocksize body both bound ' +
	            'bucket buffer_cache buffer_pool build bulk by byte byteordermark bytes cache caching call calling cancel ' +
	            'capacity cascade cascaded case cast catalog category ceil ceiling chain change changed char_base ' +
	            'char_length character_length characters characterset charindex charset charsetform charsetid check ' +
	            'checksum checksum_agg child choose chr chunk class cleanup clear client clob clob_base clone close ' +
	            'cluster_id cluster_probability cluster_set clustering coalesce coercibility col collate collation ' +
	            'collect colu colum column column_value columns columns_updated comment commit compact compatibility ' +
	            'compiled complete composite_limit compound compress compute concat concat_ws concurrent confirm conn ' +
	            'connec connect connect_by_iscycle connect_by_isleaf connect_by_root connect_time connection ' +
	            'consider consistent constant constraint constraints constructor container content contents context ' +
	            'contributors controlfile conv convert convert_tz corr corr_k corr_s corresponding corruption cos cost ' +
	            'count count_big counted covar_pop covar_samp cpu_per_call cpu_per_session crc32 create creation ' +
	            'critical cross cube cume_dist curdate current current_date current_time current_timestamp current_user ' +
	            'cursor curtime customdatum cycle data database databases datafile datafiles datalength date_add ' +
	            'date_cache date_format date_sub dateadd datediff datefromparts datename datepart datetime2fromparts ' +
	            'day day_to_second dayname dayofmonth dayofweek dayofyear days db_role_change dbtimezone ddl deallocate ' +
	            'declare decode decompose decrement decrypt deduplicate def defa defau defaul default defaults ' +
	            'deferred defi defin define degrees delayed delegate delete delete_all delimited demand dense_rank ' +
	            'depth dequeue des_decrypt des_encrypt des_key_file desc descr descri describ describe descriptor ' +
	            'deterministic diagnostics difference dimension direct_load directory disable disable_all ' +
	            'disallow disassociate discardfile disconnect diskgroup distinct distinctrow distribute distributed div ' +
	            'do document domain dotnet double downgrade drop dumpfile duplicate duration each edition editionable ' +
	            'editions element ellipsis else elsif elt empty enable enable_all enclosed encode encoding encrypt ' +
	            'end end-exec endian enforced engine engines enqueue enterprise entityescaping eomonth error errors ' +
	            'escaped evalname evaluate event eventdata events except exception exceptions exchange exclude excluding ' +
	            'execu execut execute exempt exists exit exp expire explain explode export export_set extended extent external ' +
	            'external_1 external_2 externally extract failed failed_login_attempts failover failure far fast ' +
	            'feature_set feature_value fetch field fields file file_name_convert filesystem_like_logging final ' +
	            'finish first first_value fixed flash_cache flashback floor flush following follows for forall force foreign ' +
	            'form forma format found found_rows freelist freelists freepools fresh from from_base64 from_days ' +
	            'ftp full function general generated get get_format get_lock getdate getutcdate global global_name ' +
	            'globally go goto grant grants greatest group group_concat group_id grouping grouping_id groups ' +
	            'gtid_subtract guarantee guard handler hash hashkeys having hea head headi headin heading heap help hex ' +
	            'hierarchy high high_priority hosts hour hours http id ident_current ident_incr ident_seed identified ' +
	            'identity idle_time if ifnull ignore iif ilike ilm immediate import in include including increment ' +
	            'index indexes indexing indextype indicator indices inet6_aton inet6_ntoa inet_aton inet_ntoa infile ' +
	            'initial initialized initially initrans inmemory inner innodb input insert install instance instantiable ' +
	            'instr interface interleaved intersect into invalidate invisible is is_free_lock is_ipv4 is_ipv4_compat ' +
	            'is_not is_not_null is_used_lock isdate isnull isolation iterate java join json json_exists ' +
	            'keep keep_duplicates key keys kill language large last last_day last_insert_id last_value lateral lax lcase ' +
	            'lead leading least leaves left len lenght length less level levels library like like2 like4 likec limit ' +
	            'lines link list listagg little ln load load_file lob lobs local localtime localtimestamp locate ' +
	            'locator lock locked log log10 log2 logfile logfiles logging logical logical_reads_per_call ' +
	            'logoff logon logs long loop low low_priority lower lpad lrtrim ltrim main make_set makedate maketime ' +
	            'managed management manual map mapping mask master master_pos_wait match matched materialized max ' +
	            'maxextents maximize maxinstances maxlen maxlogfiles maxloghistory maxlogmembers maxsize maxtrans ' +
	            'md5 measures median medium member memcompress memory merge microsecond mid migration min minextents ' +
	            'minimum mining minus minute minutes minvalue missing mod mode model modification modify module monitoring month ' +
	            'months mount move movement multiset mutex name name_const names nan national native natural nav nchar ' +
	            'nclob nested never new newline next nextval no no_write_to_binlog noarchivelog noaudit nobadfile ' +
	            'nocheck nocompress nocopy nocycle nodelay nodiscardfile noentityescaping noguarantee nokeep nologfile ' +
	            'nomapping nomaxvalue nominimize nominvalue nomonitoring none noneditionable nonschema noorder ' +
	            'nopr nopro noprom nopromp noprompt norely noresetlogs noreverse normal norowdependencies noschemacheck ' +
	            'noswitch not nothing notice notnull notrim novalidate now nowait nth_value nullif nulls num numb numbe ' +
	            'nvarchar nvarchar2 object ocicoll ocidate ocidatetime ociduration ociinterval ociloblocator ocinumber ' +
	            'ociref ocirefcursor ocirowid ocistring ocitype oct octet_length of off offline offset oid oidindex old ' +
	            'on online only opaque open operations operator optimal optimize option optionally or oracle oracle_date ' +
	            'oradata ord ordaudio orddicom orddoc order ordimage ordinality ordvideo organization orlany orlvary ' +
	            'out outer outfile outline output over overflow overriding package pad parallel parallel_enable ' +
	            'parameters parent parse partial partition partitions pascal passing password password_grace_time ' +
	            'password_lock_time password_reuse_max password_reuse_time password_verify_function patch path patindex ' +
	            'pctincrease pctthreshold pctused pctversion percent percent_rank percentile_cont percentile_disc ' +
	            'performance period period_add period_diff permanent physical pi pipe pipelined pivot pluggable plugin ' +
	            'policy position post_transaction pow power pragma prebuilt precedes preceding precision prediction ' +
	            'prediction_cost prediction_details prediction_probability prediction_set prepare present preserve ' +
	            'prior priority private private_sga privileges procedural procedure procedure_analyze processlist ' +
	            'profiles project prompt protection public publishingservername purge quarter query quick quiesce quota ' +
	            'quotename radians raise rand range rank raw read reads readsize rebuild record records ' +
	            'recover recovery recursive recycle redo reduced ref reference referenced references referencing refresh ' +
	            'regexp_like register regr_avgx regr_avgy regr_count regr_intercept regr_r2 regr_slope regr_sxx regr_sxy ' +
	            'reject rekey relational relative relaylog release release_lock relies_on relocate rely rem remainder rename ' +
	            'repair repeat replace replicate replication required reset resetlogs resize resource respect restore ' +
	            'restricted result result_cache resumable resume retention return returning returns reuse reverse revoke ' +
	            'right rlike role roles rollback rolling rollup round row row_count rowdependencies rowid rownum rows ' +
	            'rtrim rules safe salt sample save savepoint sb1 sb2 sb4 scan schema schemacheck scn scope scroll ' +
	            'sdo_georaster sdo_topo_geometry search sec_to_time second seconds section securefile security seed segment select ' +
	            'self semi sequence sequential serializable server servererror session session_user sessions_per_user set ' +
	            'sets settings sha sha1 sha2 share shared shared_pool short show shrink shutdown si_averagecolor ' +
	            'si_colorhistogram si_featurelist si_positionalcolor si_stillimage si_texture siblings sid sign sin ' +
	            'size size_t sizes skip slave sleep smalldatetimefromparts smallfile snapshot some soname sort soundex ' +
	            'source space sparse spfile split sql sql_big_result sql_buffer_result sql_cache sql_calc_found_rows ' +
	            'sql_small_result sql_variant_property sqlcode sqldata sqlerror sqlname sqlstate sqrt square standalone ' +
	            'standby start starting startup statement static statistics stats_binomial_test stats_crosstab ' +
	            'stats_ks_test stats_mode stats_mw_test stats_one_way_anova stats_t_test_ stats_t_test_indep ' +
	            'stats_t_test_one stats_t_test_paired stats_wsr_test status std stddev stddev_pop stddev_samp stdev ' +
	            'stop storage store stored str str_to_date straight_join strcmp strict string struct stuff style subdate ' +
	            'subpartition subpartitions substitutable substr substring subtime subtring_index subtype success sum ' +
	            'suspend switch switchoffset switchover sync synchronous synonym sys sys_xmlagg sysasm sysaux sysdate ' +
	            'sysdatetimeoffset sysdba sysoper system system_user sysutcdatetime table tables tablespace tablesample tan tdo ' +
	            'template temporary terminated tertiary_weights test than then thread through tier ties time time_format ' +
	            'time_zone timediff timefromparts timeout timestamp timestampadd timestampdiff timezone_abbr ' +
	            'timezone_minute timezone_region to to_base64 to_date to_days to_seconds todatetimeoffset trace tracking ' +
	            'transaction transactional translate translation treat trigger trigger_nestlevel triggers trim truncate ' +
	            'try_cast try_convert try_parse type ub1 ub2 ub4 ucase unarchived unbounded uncompress ' +
	            'under undo unhex unicode uniform uninstall union unique unix_timestamp unknown unlimited unlock unnest unpivot ' +
	            'unrecoverable unsafe unsigned until untrusted unusable unused update updated upgrade upped upper upsert ' +
	            'url urowid usable usage use use_stored_outlines user user_data user_resources users using utc_date ' +
	            'utc_timestamp uuid uuid_short validate validate_password_strength validation valist value values var ' +
	            'var_samp varcharc vari varia variab variabl variable variables variance varp varraw varrawc varray ' +
	            'verify version versions view virtual visible void wait wallet warning warnings week weekday weekofyear ' +
	            'wellformed when whene whenev wheneve whenever where while whitespace window with within without work wrapped ' +
	            'xdb xml xmlagg xmlattributes xmlcast xmlcolattval xmlelement xmlexists xmlforest xmlindex xmlnamespaces ' +
	            'xmlpi xmlquery xmlroot xmlschema xmlserialize xmltable xmltype xor year year_to_month years yearweek',
	          literal:
	            'true false null unknown',
	          built_in:
	            'array bigint binary bit blob bool boolean char character date dec decimal float int int8 integer interval number ' +
	            'numeric real record serial serial8 smallint text time timestamp tinyint varchar varchar2 varying void'
	        },
	        contains: [
	          {
	            className: 'string',
	            begin: '\'', end: '\'',
	            contains: [{begin: '\'\''}]
	          },
	          {
	            className: 'string',
	            begin: '"', end: '"',
	            contains: [{begin: '""'}]
	          },
	          {
	            className: 'string',
	            begin: '`', end: '`'
	          },
	          hljs.C_NUMBER_MODE,
	          hljs.C_BLOCK_COMMENT_MODE,
	          COMMENT_MODE,
	          hljs.HASH_COMMENT_MODE
	        ]
	      },
	      hljs.C_BLOCK_COMMENT_MODE,
	      COMMENT_MODE,
	      hljs.HASH_COMMENT_MODE
	    ]
	  };
	}

	var sql_1 = sql;

	var sql$1 = /*#__PURE__*/Object.freeze({
		default: sql_1,
		__moduleExports: sql_1
	});

	var hljs = ( core$1 && core ) || core$1;

	var require$$0 = ( javascript$1 && javascript_1 ) || javascript$1;

	var require$$1 = ( python$1 && python_1 ) || python$1;

	var require$$2 = ( xml$1 && xml_1 ) || xml$1;

	var require$$3 = ( django$1 && django_1 ) || django$1;

	var require$$4 = ( bash$1 && bash_1 ) || bash$1;

	var require$$5 = ( css$1 && css_1 ) || css$1;

	var require$$6 = ( markdown$1 && markdown_1 ) || markdown$1;

	var require$$7 = ( diff$1 && diff_1 ) || diff$1;

	var require$$8 = ( json$1 && json_1 ) || json$1;

	var require$$9 = ( less$1 && less_1 ) || less$1;

	var require$$10 = ( nginx$1 && nginx_1 ) || nginx$1;

	var require$$11 = ( scss$1 && scss_1 ) || scss$1;

	var require$$12 = ( shell$1 && shell_1 ) || shell$1;

	var require$$13 = ( sql$1 && sql_1 ) || sql$1;

	hljs.registerLanguage('javascript', require$$0);
	hljs.registerLanguage('python', require$$1);
	hljs.registerLanguage('xml', require$$2);
	hljs.registerLanguage('django', require$$3);
	hljs.registerLanguage('bash', require$$4);
	hljs.registerLanguage('css', require$$5);
	hljs.registerLanguage('markdown', require$$6);
	hljs.registerLanguage('diff', require$$7);
	hljs.registerLanguage('json', require$$8);
	hljs.registerLanguage('less', require$$9);
	hljs.registerLanguage('nginx', require$$10);
	hljs.registerLanguage('scss', require$$11);
	hljs.registerLanguage('shell', require$$12);
	hljs.registerLanguage('sql', require$$13);

	var syntax_highlight = hljs;

	// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors

	frappe.provide("website");
	frappe.provide("frappe.awesome_bar_path");
	window.cur_frm = null;

	$.extend(frappe, {
		boot: {
			lang: 'en'
		},
		_assets_loaded: [],
		require: async function(links, callback) {
			if (typeof (links) === 'string') {
				links = [links];
			}
			for (var i = 0, list = links; i < list.length; i += 1) {
				var link = list[i];

				await this.add_asset_to_head(link);
			}
			callback && callback();
		},
		add_asset_to_head: function add_asset_to_head(link) {
			return new Promise(function (resolve) {
				if (frappe._assets_loaded.includes(link)) { return resolve(); }
				var el;
				if(link.split('.').pop() === 'js') {
					el = document.createElement('script');
					el.type = 'text/javascript';
					el.src = link;
				} else {
					el = document.createElement('link');
					el.type = 'text/css';
					el.rel = 'stylesheet';
					el.href = link;
				}
				document.getElementsByTagName('head')[0].appendChild(el);
				el.onload = function () {
					frappe._assets_loaded.push(link);
					resolve();
				};
			});
		},
		hide_message: function() {
			$('.message-overlay').remove();
		},
		call: function(opts) {
			// opts = {"method": "PYTHON MODULE STRING", "args": {}, "callback": function(r) {}}
			if (typeof arguments[0]==='string') {
				opts = {
					method: arguments[0],
					args: arguments[1],
					callback: arguments[2]
				};
			}

			frappe.prepare_call(opts);
			if(opts.freeze) {
				frappe.freeze();
			}
			return $.ajax({
				type: opts.type || "POST",
				url: "/",
				data: opts.args,
				dataType: "json",
				headers: { "X-Frappe-CSRF-Token": frappe.csrf_token, "X-Frappe-CMD": (opts.args && opts.args.cmd  || '') || '' },
				statusCode: opts.statusCode || {
					404: function() {
						frappe.msgprint(__("Not found"));
					},
					403: function() {
						frappe.msgprint(__("Not permitted"));
					},
					200: function(data) {
						if(opts.callback)
							{ opts.callback(data); }
						if(opts.success)
							{ opts.success(data); }
					}
				}
			}).always(function(data) {
				if(opts.freeze) {
					frappe.unfreeze();
				}

				// executed before statusCode functions
				if(data.responseText) {
					try {
						data = JSON.parse(data.responseText);
					} catch (e) {
						data = {};
					}
				}
				frappe.process_response(opts, data);
			});
		},
		prepare_call: function(opts) {
			if(opts.btn) {
				$(opts.btn).prop("disabled", true);
			}

			if(opts.msg) {
				$(opts.msg).toggle(false);
			}

			if(!opts.args) { opts.args = {}; }

			// method
			if(opts.method) {
				opts.args.cmd = opts.method;
			}

			$.each(opts.args, function(key, val) {
				if (typeof val != "string" && val !== null) {
					opts.args[key] = JSON.stringify(val);
				}
			});

			if(!opts.no_spinner) ;
		},
		process_response: function(opts, data) {
			//if(!opts.no_spinner) NProgress.done();

			if(opts.btn) {
				$(opts.btn).prop("disabled", false);
			}

			if (data._server_messages) {
				var server_messages = JSON.parse(data._server_messages || '[]');
				server_messages.map(function (msg) {
					// temp fix for messages sent as dict
					try {
						return JSON.parse(msg);
					} catch (e) {
						return msg;
					}
				}).join('<br>');

				if(opts.error_msg) {
					$(opts.error_msg).html(server_messages).toggle(true);
				} else {
					frappe.msgprint(server_messages);
				}
			}

			if(data.exc) {
				// if(opts.btn) {
				// 	$(opts.btn).addClass($(opts.btn).is('button') || $(opts.btn).hasClass('btn') ? "btn-danger" : "text-danger");
				// 	setTimeout(function() { $(opts.btn).removeClass("btn-danger text-danger"); }, 1000);
				// }
				try {
					var err = JSON.parse(data.exc);
					if($.isArray(err)) {
						err = err.join("\n");
					}
					console.error ? console.error(err) : console.log(err);
				} catch(e) {
					console.log(data.exc);
				}

			}
			if(opts.msg && data.message) {
				$(opts.msg).html(data.message).toggle(true);
			}

			if(opts.always) {
				opts.always(data);
			}
		},
		show_message: function(text, icon) {
			if(!icon) { icon="fa fa-refresh fa-spin"; }
			frappe.hide_message();
			$('<div class="message-overlay"></div>')
				.html('<div class="content"><i class="'+icon+' text-muted"></i><br>'
					+text+'</div>').appendTo(document.body);
		},
		send_message: function(opts, btn) {
			return frappe.call({
				type: "POST",
				method: "frappe.www.contact.send_message",
				btn: btn,
				args: opts,
				callback: opts.callback
			});
		},
		has_permission: function(doctype, docname, perm_type, callback) {
			return frappe.call({
				type: "GET",
				method: "frappe.client.has_permission",
				no_spinner: true,
				args: {doctype: doctype, docname: docname, perm_type: perm_type},
				callback: function(r) {
					if(!r.exc && r.message.has_permission) {
						if(callback) {
							return callback(r);
						}
					}
				}
			});
		},
		render_user: function() {
			if (frappe.is_user_logged_in()) {
				$(".btn-login-area").toggle(false);
				$(".logged-in").toggle(true);
				$(".user-image").attr("src", frappe.get_cookie("user_image"));

				$('.user-image-wrapper').html(frappe.avatar(null, 'avatar-medium', null, null, null, true));
				$('.user-image-sidebar').html(frappe.avatar(null, 'avatar-medium', null, null, null, true));
				$('.user-image-myaccount').html(frappe.avatar(null, 'avatar-large', null, null, null, true));
			}
		},
		freeze_count: 0,
		freeze: function(msg) {
			// blur
			if(!$('#freeze').length) {
				var freeze = $('<div id="freeze" class="modal-backdrop fade"></div>')
					.appendTo("body");

				freeze.html(repl('<div class="freeze-message-container"><div class="freeze-message">%(msg)s</div></div>',
					{msg: msg || ""}));

				setTimeout(function() {
					freeze.addClass("in");
				}, 1);

			} else {
				$("#freeze").addClass("in");
			}
			frappe.freeze_count++;
		},
		unfreeze: function() {
			if(!frappe.freeze_count) { return; } // anything open?
			frappe.freeze_count--;
			if(!frappe.freeze_count) {
				var freeze = $('#freeze').removeClass("in");
				setTimeout(function() {
					if(!frappe.freeze_count) {
						freeze.remove();
					}
				}, 150);
			}
		},

		trigger_ready: function() {
			frappe.ready_events.forEach(function(fn) {
				fn();
			});
		},

		highlight_code_blocks: function() {
			syntax_highlight.initHighlighting();
		},
		bind_filters: function() {
			// set in select
			$(".filter").each(function() {
				var key = $(this).attr("data-key");
				var val = frappe.utils.get_url_arg(key).replace(/\+/g, " ");

				if(val) { $(this).val(val); }
			});

			// search url
			var search = function() {
				var args = {};
				$(".filter").each(function() {
					var val = $(this).val();
					if(val) { args[$(this).attr("data-key")] = val; }
				});

				window.location.href = location.pathname + "?" + $.param(args);
			};

			$(".filter").on("change", function() {
				search();
			});
		},
		bind_navbar_search: function() {
			frappe.get_navbar_search().on("keypress", function(e) {
				var val = $(this).val();
				if(e.which===13 && val) {
					$(this).val("").blur();
					frappe.do_search(val);
					return false;
				}
			});
		},
		do_search: function(val) {
			var path = (frappe.awesome_bar_path && frappe.awesome_bar_path[location.pathname]
				|| window.search_path || location.pathname);

			window.location.href = path + "?txt=" + encodeURIComponent(val);
		},
		set_search_path: function(path) {
			frappe.awesome_bar_path[location.pathname] = path;
		},
		make_navbar_active: function() {
			var pathname = window.location.pathname;
			$(".navbar-nav a.active").removeClass("active");
			$(".navbar-nav a").each(function() {
				var href = $(this).attr("href");
				if(href===pathname) {
					$(this).addClass("active");
					return false;
				}
			});
		},
		get_navbar_search: function() {
			return $(".navbar .search, .sidebar .search");
		},
		is_user_logged_in: function() {
			return frappe.get_cookie("user_id") !== "Guest" && frappe.session.user !== "Guest";
		},
		add_switch_to_desk: function() {
			$('.switch-to-desk').removeClass('hidden');
		},
		add_link_to_headings: function() {
			$('.doc-content .from-markdown').find('h2, h3, h4, h5, h6').each(function (i, $heading) {
				var id = $heading.id;
				var $a = $('<a class="no-underline">')
					.prop('href', '#' + id)
					.attr('aria-hidden', 'true')
					.html("\n\t\t\t\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"width: 0.8em; height: 0.8em;\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\"\n\t\t\t\t\t\tstroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-link\">\n\t\t\t\t\t\t<path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path>\n\t\t\t\t\t\t<path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path>\n\t\t\t\t\t</svg>\n\t\t\t\t");
				$($heading).append($a);
			});
		},
		setup_lazy_images: function() {
			// Use IntersectionObserver to only load images that are visible in the viewport
			// Fallback for browsers that don't support it
			// To use this feature, instead of adding an img tag, add
			// <div class="website-image-lazy" data-class="img-class" data-src="image.jpg" data-alt="image"></div>

			function replace_with_image(target) {
				var $target = $(target);
				var attrs = $target.data();
				var data_string = Object.keys(attrs)
					.map(function (key) { return (key + "=\"" + (attrs[key]) + "\""); })
					.join(' ');
				$target.replaceWith(("<img " + data_string + ">"));
			}

			if (!window.IntersectionObserver) {
				$('.website-image-lazy').each(function (_, el) {
					replace_with_image(el);
				});
				return;
			}

			var io = new IntersectionObserver(
				function (entries) {
					entries.forEach(function (e) {
						if (e.intersectionRatio > 0) {
							io.unobserve(e.target);
							replace_with_image(e.target);
						}
					});
				}, {
					threshold: [0, 0.2, 0.4, 0.6],
				});

			$('.website-image-lazy').each(function (_, el) {
				// Start observing an element
				io.observe(el);
			});
		},
		show_language_picker: function show_language_picker() {
			if (frappe.session.user === 'Guest' && window.show_language_picker) {
				frappe.call("frappe.translate.get_all_languages", {
					with_language_name: true
				}).then(function (res) {
					var language_list = res.message;
					var language = frappe.get_cookie('preferred_language');
					var language_codes = [];
					var language_switcher = $("#language-switcher .form-control");
					language_list.forEach(function (language_doc) {
						language_codes.push(language_doc.language_code);
						language_switcher
							.append(
								$("<option></option>")
									.attr("value", language_doc.language_code)
									.text(language_doc.language_name)
							);
					});
					$("#language-switcher").removeClass('hide');
					language = language || (language_codes.includes(navigator.language) ? navigator.language : 'en');
					language_switcher.val(language);
					document.documentElement.lang = language;
					language_switcher.change(function () {
						var lang = language_switcher.val();
						frappe.call("frappe.translate.set_preferred_language_cookie", {
							"preferred_language": lang
						}).then(function () {
							window.location.reload();
						});
					});
				});
			}
		}
	});

	frappe.setup_search = function (target, search_scope) {
		if (typeof target === "string") {
			target = $(target);
		}

		var $search_input = $("<div class=\"dropdown\" id=\"dropdownMenuSearch\">\n\t\t\t<input type=\"search\" class=\"form-control\" placeholder=\"Search the docs (Press / to focus)\" />\n\t\t\t<div class=\"overflow-hidden shadow dropdown-menu w-100\" aria-labelledby=\"dropdownMenuSearch\">\n\t\t\t</div>\n\t\t\t<div class=\"search-icon\">\n\t\t\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-search\">\n\t\t\t\t\t<circle cx=\"11\" cy=\"11\" r=\"8\"></circle>\n\t\t\t\t\t<line x1=\"21\" y1=\"21\" x2=\"16.65\" y2=\"16.65\"></line>\n\t\t\t\t</svg>\n\t\t\t</div>\n\t\t</div>");

		target.empty();
		$search_input.appendTo(target);

		// let $dropdown = $search_input.find('.dropdown');
		var $dropdown_menu = $search_input.find('.dropdown-menu');
		var $input = $search_input.find('input');
		var dropdownItems;
		var offsetIndex = 0;

		$(document).on('keypress', function (e) {
			if ($(e.target).is('textarea, input, select')) {
				return;
			}
			if (e.key === '/') {
				e.preventDefault();
				$input.focus();
			}
		});

		$input.on('input', frappe.utils.debounce(function () {
			if (!$input.val()) {
				clear_dropdown();
				return;
			}

			frappe.call({
				method: 'frappe.search.web_search',
				args: {
					scope: search_scope || null,
					query: $input.val(),
					limit: 5
				}
			}).then(function (r) {
				var results = r.message || [];
				var dropdown_html;
				if (results.length == 0) {
					dropdown_html = "<div class=\"dropdown-item\">No results found</div>";
				} else {
					dropdown_html = results.map(function (r) {
						return ("<a class=\"dropdown-item\" href=\"/" + (r.path) + "\">\n\t\t\t\t\t\t<h6>" + (r.title_highlights || r.title) + "</h6>\n\t\t\t\t\t\t<div style=\"white-space: normal;\">" + (r.content_highlights) + "</div>\n\t\t\t\t\t</a>");
					}).join('');
				}
				$dropdown_menu.html(dropdown_html);
				$dropdown_menu.addClass('show');
				dropdownItems = $dropdown_menu.find(".dropdown-item");
			});
		}, 500));

		$input.on('focus', function () {
			if (!$input.val()) {
				clear_dropdown();
			} else {
				$input.trigger('input');
			}
		});

		$input.keydown(function(e) {
			// up: 38, down: 40
			if (e.which == 40) {
				navigate(0);
			}
		});

		$dropdown_menu.keydown(function(e) {
			// up: 38, down: 40
			if (e.which == 38) {
				navigate(-1);
			} else if (e.which == 40) {
				navigate(1);
			} else if (e.which == 27) {
				setTimeout(function () {
					clear_dropdown();
				}, 300);
			}
		});

		// Clear dropdown when clicked
		$(window).click(function() {
			clear_dropdown();
		});

		$search_input.click(function(event) {
			event.stopPropagation();
		});

		// Navigate the list
		var navigate = function(diff) {
			offsetIndex += diff;

			if (offsetIndex >= dropdownItems.length)
				{ offsetIndex = 0; }
			if (offsetIndex < 0)
				{ offsetIndex = dropdownItems.length - 1; }
			$input.off('blur');
			dropdownItems.eq(offsetIndex).focus();
		};

		function clear_dropdown() {
			offsetIndex = 0;
			$dropdown_menu.html('');
			$dropdown_menu.removeClass('show');
			dropdownItems = undefined;
		}

		// Remove focus state on hover
		$dropdown_menu.mouseover(function() {
			dropdownItems.blur();
		});
	};


	// Utility functions
	window.valid_email = function(id) {
		// eslint-disable-next-line
		// copied regex from frappe/utils.js validate_type
		return /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/.test(id.toLowerCase());
	};

	window.validate_email = valid_email;

	window.cstr = function(s) {
		return s==null ? '' : s+'';
	};

	window.is_null = function is_null(v) {
		if(v===null || v===undefined || cstr(v).trim()==="") { return true; }
	};

	window.is_html = function is_html(txt) {
		if(txt.indexOf("<br>")==-1 && txt.indexOf("<p")==-1
			&& txt.indexOf("<img")==-1 && txt.indexOf("<div")==-1) {
			return false;
		}
		return true;
	};

	window.ask_to_login = function ask_to_login() {
		if(!frappe.is_user_logged_in()) {
			if(localStorage) {
				localStorage.setItem("last_visited",
					window.location.href.replace(window.location.origin, ""));
			}
			window.location.href = "login";
		}
	};

	// check if logged in?
	$(document).ready(function() {
		window.full_name = frappe.get_cookie("full_name");
		var logged_in = frappe.is_user_logged_in();
		$("#website-login").toggleClass("hide", logged_in ? true : false);
		$("#website-post-login").toggleClass("hide", logged_in ? false : true);
		$(".logged-in").toggleClass("hide", logged_in ? false : true);

		frappe.bind_navbar_search();

		// switch to app link
		if(frappe.get_cookie("system_user")==="yes" && logged_in) {
			frappe.add_switch_to_desk();
		}

		frappe.render_user();
		frappe.setup_lazy_images();

		$(document).trigger("page-change");
	});

	$(document).on("page-change", function() {
		$(document).trigger("apply_permissions");
		$('.dropdown-toggle').dropdown();

		//multilevel dropdown fix
		$('.dropdown-menu .dropdown-submenu .dropdown-toggle').on('click', function(e) {
			e.stopPropagation();
			$(this).parent().parent().parent().addClass('open');
		});

		$.extend(frappe, frappe.get_cookies());
		frappe.session = {'user': frappe.user_id};

		frappe.datetime.refresh_when();
		frappe.trigger_ready();
		frappe.bind_filters();
		frappe.highlight_code_blocks();
		frappe.add_link_to_headings();
		frappe.make_navbar_active();
		// scroll to hash
		if (window.location.hash) {
			var element = document.getElementById(window.location.hash.substring(1));
			element && element.scrollIntoView(true);
		}

	});


	frappe.ready(function() {
		frappe.show_language_picker();
		if (window.is_chat_enabled) {
			frappe.require(['/assets/js/moment-bundle.min.js', "/assets/css/frappe-chat-web.css", "/assets/frappe/js/lib/socket.io.min.js"], function () {
				frappe.require('/assets/js/chat.js', function () {
					frappe.chat.setup();
				});
			});
		}
		frappe.socketio.init(window.socketio_port);
	});

	frappe.socketio = {
		open_tasks: {},
		open_docs: [],
		emit_queue: [],
		init: function(port) {
			if ( port === void 0 ) port = 3000;

			if (!window.io) {
				return;
			}

			if (frappe.boot.disable_async) {
				return;
			}

			if (frappe.socketio.socket) {
				return;
			}

			//Enable secure option when using HTTPS
			if (window.location.protocol == "https:") {
				frappe.socketio.socket = io.connect(frappe.socketio.get_host(port), {secure: true});
			}
			else if (window.location.protocol == "http:") {
				frappe.socketio.socket = io.connect(frappe.socketio.get_host(port));
			}
			else if (window.location.protocol == "file:") {
				frappe.socketio.socket = io.connect(window.localStorage.server);
			}

			if (!frappe.socketio.socket) {
				console.log("Unable to connect to " + frappe.socketio.get_host(port));
				return;
			}

			frappe.socketio.socket.on('msgprint', function(message) {
				frappe.msgprint(message);
			});

			frappe.socketio.socket.on('eval_js', function(message) {
				eval(message);
			});

			frappe.socketio.socket.on('progress', function(data) {
				if(data.progress) {
					data.percent = flt(data.progress[0]) / data.progress[1] * 100;
				}
				if(data.percent) {
					if(data.percent==100) {
						frappe.hide_progress();
					} else {
						frappe.show_progress(data.title || __("Progress"), data.percent, 100, data.description);
					}
				}
			});

			frappe.socketio.setup_listeners();
			frappe.socketio.setup_reconnect();

			$(document).on('form-load form-rename', function(e, frm) {
				if (frm.is_new()) {
					return;
				}

				for (var i=0, l=frappe.socketio.open_docs.length; i<l; i++) {
					var d = frappe.socketio.open_docs[i];
					if (frm.doctype==d.doctype && frm.docname==d.name) {
						// already subscribed
						return false;
					}
				}

				frappe.socketio.doc_subscribe(frm.doctype, frm.docname);
			});

			$(document).on("form-refresh", function(e, frm) {
				if (frm.is_new()) {
					return;
				}

				frappe.socketio.doc_open(frm.doctype, frm.docname);
			});

			$(document).on('form-unload', function(e, frm) {
				if (frm.is_new()) {
					return;
				}

				// frappe.socketio.doc_unsubscribe(frm.doctype, frm.docname);
				frappe.socketio.doc_close(frm.doctype, frm.docname);
			});

			$(document).on('form-typing', function(e, frm) {
				frappe.socketio.form_typing(frm.doctype, frm.docname);
			});

			$(document).on('form-stopped-typing', function(e, frm) {
				frappe.socketio.form_stopped_typing(frm.doctype, frm.docname);
			});

			window.addEventListener('beforeunload', function () {
				if (!cur_frm || cur_frm.is_new()) {
					return;
				}

				// if tab/window is closed, notify other users
				if (cur_frm.doc) {
					frappe.socketio.doc_close(cur_frm.doctype, cur_frm.docname);
				}
			});
		},
		get_host: function(port) {
			if ( port === void 0 ) port = 3000;

			var host = window.location.origin;
			if(window.dev_server) {
				var parts = host.split(":");
				port = frappe.boot.socketio_port || port.toString() || '3000';
				if(parts.length > 2) {
					host = parts[0] + ":" + parts[1];
				}
				host = host + ":" + port;
			}
			return host;
		},
		subscribe: function(task_id, opts) {
			// TODO DEPRECATE

			frappe.socketio.socket.emit('task_subscribe', task_id);
			frappe.socketio.socket.emit('progress_subscribe', task_id);

			frappe.socketio.open_tasks[task_id] = opts;
		},
		task_subscribe: function(task_id) {
			frappe.socketio.socket.emit('task_subscribe', task_id);
		},
		task_unsubscribe: function(task_id) {
			frappe.socketio.socket.emit('task_unsubscribe', task_id);
		},
		doc_subscribe: function(doctype, docname) {
			if (frappe.flags.doc_subscribe) {
				console.log('throttled');
				return;
			}

			frappe.flags.doc_subscribe = true;

			// throttle to 1 per sec
			setTimeout(function() { frappe.flags.doc_subscribe = false; }, 1000);

			frappe.socketio.socket.emit('doc_subscribe', doctype, docname);
			frappe.socketio.open_docs.push({doctype: doctype, docname: docname});
		},
		doc_unsubscribe: function(doctype, docname) {
			frappe.socketio.socket.emit('doc_unsubscribe', doctype, docname);
			frappe.socketio.open_docs = $.filter(frappe.socketio.open_docs, function(d) {
				if(d.doctype===doctype && d.name===docname) {
					return null;
				} else {
					return d;
				}
			});
		},
		doc_open: function(doctype, docname) {
			// notify that the user has opened this doc, if not already notified
			if (!frappe.socketio.last_doc
				|| (frappe.socketio.last_doc[0] != doctype || frappe.socketio.last_doc[1] != docname)) {
				frappe.socketio.socket.emit('doc_open', doctype, docname);

				frappe.socketio.last_doc &&
					frappe.socketio.doc_close(frappe.socketio.last_doc[0], frappe.socketio.last_doc[1]);
			}
			frappe.socketio.last_doc = [doctype, docname];
		},
		doc_close: function(doctype, docname) {
			// notify that the user has closed this doc
			frappe.socketio.socket.emit('doc_close', doctype, docname);

			// if the doc is closed the user has also stopped typing
			frappe.socketio.socket.emit('doc_typing_stopped', doctype, docname);
		},
		form_typing: function(doctype, docname) {
			// notifiy that the user is typing on the doc
			frappe.socketio.socket.emit('doc_typing', doctype, docname);
		},
		form_stopped_typing: function(doctype, docname) {
			// notifiy that the user has stopped typing
			frappe.socketio.socket.emit('doc_typing_stopped', doctype, docname);
		},
		setup_listeners: function() {
			frappe.socketio.socket.on('task_status_change', function(data) {
				frappe.socketio.process_response(data, data.status.toLowerCase());
			});
			frappe.socketio.socket.on('task_progress', function(data) {
				frappe.socketio.process_response(data, "progress");
			});
		},
		setup_reconnect: function() {
			// subscribe again to open_tasks
			frappe.socketio.socket.on("connect", function() {
				// wait for 5 seconds before subscribing again
				// because it takes more time to start python server than nodejs server
				// and we use validation requests to python server for subscribing
				setTimeout(function() {
					$.each(frappe.socketio.open_tasks, function(task_id, opts) {
						frappe.socketio.subscribe(task_id, opts);
					});

					// re-connect open docs
					$.each(frappe.socketio.open_docs, function(d) {
						if(locals[d.doctype] && locals[d.doctype][d.name]) {
							frappe.socketio.doc_subscribe(d.doctype, d.name);
						}
					});

					if (cur_frm && cur_frm.doc) {
						frappe.socketio.doc_open(cur_frm.doc.doctype, cur_frm.doc.name);
					}
				}, 5000);
			});
		},
		process_response: function(data, method) {
			if(!data) {
				return;
			}

			// success
			var opts = frappe.socketio.open_tasks[data.task_id];
			if(opts[method]) {
				opts[method](data);
			}

			// "callback" is std frappe term
			if(method==="success") {
				if(opts.callback) { opts.callback(data); }
			}

			// always
			frappe.request.cleanup(opts, data);
			if(opts.always) {
				opts.always(data);
			}

			// error
			if(data.status_code && data.status_code > 400 && opts.error) {
				opts.error(data);
			}
		}
	};

	frappe.provide("frappe.realtime");
	frappe.realtime.on = function(event, callback) {
		frappe.socketio.socket && frappe.socketio.socket.on(event, callback);
	};

	frappe.realtime.off = function(event, callback) {
		frappe.socketio.socket && frappe.socketio.socket.off(event, callback);
	};

	frappe.realtime.publish = function(event, message) {
		if(frappe.socketio.socket) {
			frappe.socketio.socket.emit(event, message);
		}
	};

	exports.__moduleExports = _class;

	return exports;

}({}));
//# sourceMappingURL=frappe-web.min.js.map
