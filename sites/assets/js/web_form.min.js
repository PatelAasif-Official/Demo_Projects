(function () {
	'use strict';

	// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
	// MIT License. See license.txt

	frappe.provide('frappe.datetime');

	frappe.defaultDateFormat = "YYYY-MM-DD";
	frappe.defaultTimeFormat = "HH:mm:ss";
	frappe.defaultDatetimeFormat = frappe.defaultDateFormat + " " + frappe.defaultTimeFormat;
	moment.defaultFormat = frappe.defaultDateFormat;

	frappe.provide("frappe.datetime");

	$.extend(frappe.datetime, {
		convert_to_user_tz: function(date, format) {
			// format defaults to true
			if(frappe.sys_defaults.time_zone) {
				var date_obj = moment.tz(date, frappe.sys_defaults.time_zone).local();
			} else {
				var date_obj = moment(date);
			}

			return (format===false) ? date_obj : date_obj.format(frappe.defaultDatetimeFormat);
		},

		convert_to_system_tz: function(date, format) {
			// format defaults to true

			if(frappe.sys_defaults.time_zone) {
				var date_obj = moment(date).tz(frappe.sys_defaults.time_zone);
			} else {
				var date_obj = moment(date);
			}

			return (format===false) ? date_obj : date_obj.format(frappe.defaultDatetimeFormat);
		},

		is_timezone_same: function() {
			if(frappe.sys_defaults.time_zone) {
				return moment().tz(frappe.sys_defaults.time_zone).utcOffset() === moment().utcOffset();
			} else {
				return true;
			}
		},

		str_to_obj: function(d) {
			return moment(d, frappe.defaultDatetimeFormat)._d;
		},

		obj_to_str: function(d) {
			return moment(d).locale("en").format();
		},

		obj_to_user: function(d) {
			return moment(d).format(frappe.datetime.get_user_date_fmt().toUpperCase());
		},

		get_diff: function(d1, d2) {
			return moment(d1).diff(d2, "days");
		},

		get_hour_diff: function(d1, d2) {
			return moment(d1).diff(d2, "hours");
		},

		get_day_diff: function(d1, d2) {
			return moment(d1).diff(d2, "days");
		},

		add_days: function(d, days) {
			return moment(d).add(days, "days").format();
		},

		add_months: function(d, months) {
			return moment(d).add(months, "months").format();
		},

		week_start: function() {
			return moment().startOf("week").format();
		},

		week_end: function() {
			return moment().endOf("week").format();
		},

		month_start: function() {
			return moment().startOf("month").format();
		},

		month_end: function() {
			return moment().endOf("month").format();
		},

		quarter_start: function() {
			return moment().startOf("quarter").format();
		},

		quarter_end: function() {
			return moment().endOf("quarter").format();
		},

		year_start: function(){
			return moment().startOf("year").format();
		},

		year_end: function(){
			return moment().endOf("year").format();
		},

		get_user_time_fmt: function() {
			return frappe.sys_defaults && frappe.sys_defaults.time_format || "HH:mm:ss";
		},

		get_user_date_fmt: function() {
			return frappe.sys_defaults && frappe.sys_defaults.date_format || "yyyy-mm-dd";
		},

		get_user_fmt: function() {  // For backwards compatibility only
			return frappe.sys_defaults && frappe.sys_defaults.date_format || "yyyy-mm-dd";
		},

		str_to_user: function(val, only_time) {
			if ( only_time === void 0 ) only_time = false;

			if(!val) { return ""; }

			var user_time_fmt = frappe.datetime.get_user_time_fmt();
			if(only_time) {
				return moment(val, frappe.defaultTimeFormat)
					.format(user_time_fmt);
			}

			var user_date_fmt = frappe.datetime.get_user_date_fmt().toUpperCase();
			if(typeof val !== "string" || val.indexOf(" ")===-1) {
				return moment(val).format(user_date_fmt);
			} else {
				return moment(val, "YYYY-MM-DD HH:mm:ss").format(user_date_fmt + " " + user_time_fmt);
			}
		},

		get_datetime_as_string: function(d) {
			return moment(d).format("YYYY-MM-DD HH:mm:ss");
		},

		user_to_str: function(val, only_time) {
			if ( only_time === void 0 ) only_time = false;


			var user_time_fmt = frappe.datetime.get_user_time_fmt();
			if(only_time) {
				return moment(val, user_time_fmt)
					.format(frappe.defaultTimeFormat);
			}

			var user_fmt = frappe.datetime.get_user_date_fmt().toUpperCase();
			var system_fmt = "YYYY-MM-DD";

			if(val.indexOf(" ")!==-1) {
				user_fmt += " " + user_time_fmt;
				system_fmt += " HH:mm:ss";
			}

			// user_fmt.replace("YYYY", "YY")? user might only input 2 digits of the year, which should also be parsed
			return moment(val, [user_fmt.replace("YYYY", "YY"),
				user_fmt]).locale("en").format(system_fmt);
		},

		user_to_obj: function(d) {
			return frappe.datetime.str_to_obj(frappe.datetime.user_to_str(d));
		},

		global_date_format: function(d) {
			var m = moment(d);
			if(m._f && m._f.indexOf("HH")!== -1) {
				return m.format("Do MMMM YYYY, h:mma")
			} else {
				return m.format('Do MMMM YYYY');
			}
		},

		now_date: function(as_obj) {
			if ( as_obj === void 0 ) as_obj = false;

			return frappe.datetime._date(frappe.defaultDateFormat, as_obj);
		},

		now_time: function(as_obj) {
			if ( as_obj === void 0 ) as_obj = false;

			return frappe.datetime._date(frappe.defaultTimeFormat, as_obj);
		},

		now_datetime: function(as_obj) {
			if ( as_obj === void 0 ) as_obj = false;

			return frappe.datetime._date(frappe.defaultDatetimeFormat, as_obj);
		},

		_date: function(format, as_obj) {
			if ( as_obj === void 0 ) as_obj = false;

			var time_zone = frappe.sys_defaults && frappe.sys_defaults.time_zone;
			var date;
			if (time_zone) {
				date = moment.tz(time_zone);
			} else {
				date = moment();
			}
			if (as_obj) {
				return frappe.datetime.moment_to_date_obj(date);
			} else {
				return date.format(format);
			}
		},

		moment_to_date_obj: function(moment) {
			var date_obj = new Date();
			var date_array = moment.toArray();
			date_obj.setFullYear(date_array[0]);
			date_obj.setMonth(date_array[1]);
			date_obj.setDate(date_array[2]);
			date_obj.setHours(date_array[3]);
			date_obj.setMinutes(date_array[4]);
			date_obj.setSeconds(date_array[5]);
			date_obj.setMilliseconds(date_array[6]);
			return date_obj;
		},

		nowdate: function() {
			return frappe.datetime.now_date();
		},

		get_today: function() {
			return frappe.datetime.now_date();
		},

		get_time: function (timestamp) {
			// return time with AM/PM
			return moment(timestamp).format('hh:mm A');
		},

		validate: function(d) {
			return moment(d, [
				frappe.defaultDateFormat,
				frappe.defaultDatetimeFormat,
				frappe.defaultTimeFormat
			], true).isValid();
		},

	});

	// Proxy for dateutil and get_today
	Object.defineProperties(window, {
		'dateutil': {
			get: function() {
				console.warn('Please use `frappe.datetime` instead of `dateutil`. It will be deprecated soon.');
				return frappe.datetime;
			}
		},
		'date': {
			get: function() {
				console.warn('Please use `frappe.datetime` instead of `date`. It will be deprecated soon.');
				return frappe.datetime;
			}
		},
		'get_today': {
			get: function() {
				console.warn('Please use `frappe.datetime.get_today` instead of `get_today`. It will be deprecated soon.');
				return frappe.datetime.get_today;
			}
		}
	});

	frappe.provide("frappe.ui");
	frappe.provide("frappe.views");
	frappe.provide("frappe.web_form_list");

	class WebFormList {
		constructor(opts) {
			Object.assign(this, opts);
			frappe.web_form_list = this;
			this.wrapper = document.getElementById("datatable");
			this.make_actions();
			this.make_filters();
			$('.link-btn').remove();
		}

		refresh() {
			var this$1 = this;

			if (this.table) {
				Array.from(this.table.tBodies).forEach(function (tbody) { return tbody.remove(); });
				var check = document.getElementById('select-all');
				check.checked = false;
			}
			this.rows = [];
			this.page_length = 20;
			this.web_list_start = 0;

			frappe.run_serially([
				function () { return this$1.get_list_view_fields(); },
				function () { return this$1.get_data(); },
				function () { return this$1.make_table(); },
				function () { return this$1.create_more(); }
			]);
		}

		make_filters() {
			var this$1 = this;

			this.filters = {};
			this.filter_input = [];
			var filter_area = document.getElementById('list-filters');

			frappe.call('frappe.website.doctype.web_form.web_form.get_web_form_filters', {
				web_form_name: this.web_form_name
			}).then(function (response) {
				var fields = response.message;
				fields.forEach(function (field) {
					var col = document.createElement('div.col-sm-4');
					col.classList.add('col', 'col-sm-3');
					filter_area.appendChild(col);
					if (field.default) { this$1.add_filter(field.fieldname, field.default, field.fieldtype); }

					var input = frappe.ui.form.make_control({
						df: {
							fieldtype: field.fieldtype,
							fieldname: field.fieldname,
							options: field.options,
							only_select: true,
							label: __(field.label),
							onchange: function (event) {
								$('#more').remove();
								this$1.add_filter(field.fieldname, input.value, field.fieldtype);
								this$1.refresh();
							}
						},
						parent: col,
						value: field.default,
						render_input: 1,
					});
					this$1.filter_input.push(input);
				});
				this$1.refresh();
			});
		}

		add_filter(field, value, fieldtype) {
			if (!value) {
				delete this.filters[field];
			} else {
				if (fieldtype === 'Data') { value = ['like', value + '%']; }
				Object.assign(this.filters, Object.fromEntries([[field, value]]));
			}
		}

		get_list_view_fields() {
			var this$1 = this;

			return frappe
				.call({
					method:
						"frappe.website.doctype.web_form.web_form.get_in_list_view_fields",
					args: { doctype: this.doctype }
				})
				.then(function (response) { return (this$1.fields_list = response.message); });
		}

		fetch_data() {
			return frappe.call({
				method: "frappe.www.list.get_list_data",
				args: Object.assign({}, {doctype: this.doctype,
					fields: this.fields_list.map(function (df) { return df.fieldname; }),
					limit_start: this.web_list_start,
					web_form_name: this.web_form_name},
					this.filters)
			});
		}

		async get_data() {
			var response = await this.fetch_data();
			this.data = await response.message;
		}

		more() {
			var this$1 = this;

			this.web_list_start += this.page_length;
			this.fetch_data().then(function (res) {
				if (res.message.length === 0) {
					frappe.msgprint(__("No more items to display"));
				}
				this$1.append_rows(res.message);
			});

		}

		make_table() {
			this.columns = this.fields_list.map(function (df) {
				return {
					label: df.label,
					fieldname: df.fieldname,
					fieldtype: df.fieldtype
				};
			});

			if (!this.table) {
				this.table = document.createElement("table");
				this.table.classList.add("table");
				this.make_table_head();
			}

			this.append_rows(this.data);

			this.wrapper.appendChild(this.table);
		}

		make_table_head() {
			var this$1 = this;

			// Create Heading
			var thead = this.table.createTHead();
			thead.style.backgroundColor = "#f7fafc";
			thead.style.color = "#8d99a6";
			var row = thead.insertRow();

			var th = document.createElement("th");

			var checkbox = document.createElement("input");
			checkbox.type = "checkbox";
			checkbox.id = "select-all";
			checkbox.onclick = function (event) { return this$1.toggle_select_all(event.target.checked); };

			th.appendChild(checkbox);
			row.appendChild(th);

			add_heading(row, __("Sr"));
			this.columns.forEach(function (col) {
				add_heading(row, __(col.label));
			});

			function add_heading(row, label) {
				var th = document.createElement("th");
				th.innerText = label;
				row.appendChild(th);
			}
		}

		append_rows(row_data) {
			var this$1 = this;

			var tbody = this.table.childNodes[1] || this.table.createTBody();
			row_data.forEach(function (data_item) {
				var row_element = tbody.insertRow();
				row_element.setAttribute("id", data_item.name);

				var row = new frappe.ui.WebFormListRow({
					row: row_element,
					doc: data_item,
					columns: this$1.columns,
					serial_number: this$1.rows.length + 1,
					events: {
						onEdit: function () { return this$1.open_form(data_item.name); },
						onSelect: function () { return this$1.toggle_delete(); }
					}
				});

				this$1.rows.push(row);
			});
		}

		make_actions() {
			var this$1 = this;

			var actions = document.querySelector(".list-view-actions");

			frappe.has_permission(this.doctype, "", "delete", function () {
				this$1.addButton(actions, "delete-rows", "danger", true, "Delete", function () { return this$1.delete_rows(); }
				);
			});

			this.addButton(
				actions,
				"new",
				"primary",
				false,
				"New",
				function () { return (window.location.href = window.location.pathname + "?new=1"); }
			);
		}

		addButton(wrapper, id, type, hidden, name, action) {
			if (document.getElementById(id)) { return; }
			var button = document.createElement("button");
			if (type == "secondary") {
				button.classList.add(
					"btn",
					"btn-secondary",
					"btn-sm",
					"ml-2",
					"text-white"
				);
			}
			else if (type == "danger") {
				button.classList.add(
					"btn",
					"btn-danger",
					"button-delete",
					"btn-sm",
					"ml-2"
				);
			}
			else {
				button.classList.add("btn", "btn-primary", "btn-sm", "ml-2");
			}

			button.id = id;
			button.innerText = name;
			button.hidden = hidden;

			button.onclick = action;
			wrapper.appendChild(button);
		}

		create_more() {
			var this$1 = this;

			if (this.rows.length >= this.page_length) {
				var footer = document.querySelector(".list-view-footer");
				this.addButton(footer, "more", "secondary", false, "More", function () { return this$1.more(); });
			}
		}

		toggle_select_all(checked) {
			this.rows.forEach(function (row) { return row.toggle_select(checked); });
		}

		open_form(name) {
			window.location.href = window.location.pathname + "?name=" + name;
		}

		get_selected() {
			return this.rows.filter(function (row) { return row.is_selected(); });
		}

		toggle_delete() {
			if (!this.settings.allow_delete) { return }
			var btn = document.getElementById("delete-rows");
			btn.hidden = !this.get_selected().length;
		}

		delete_rows() {
			var this$1 = this;

			if (!this.settings.allow_delete) { return }
			frappe
				.call({
					type: "POST",
					method:
						"frappe.website.doctype.web_form.web_form.delete_multiple",
					args: {
						web_form_name: this.web_form_name,
						docnames: this.get_selected().map(function (row) { return row.doc.name; })
					}
				})
				.then(function () {
					this$1.refresh();
					this$1.toggle_delete();
				});
		}
	}
	frappe.ui.WebFormListRow = class WebFormListRow {
		constructor(ref) {
		var row = ref.row;
		var doc = ref.doc;
		var columns = ref.columns;
		var serial_number = ref.serial_number;
		var events = ref.events;
		var options = ref.options;

			Object.assign(this, { row: row, doc: doc, columns: columns, serial_number: serial_number, events: events });
			this.make_row();
		}

		make_row() {
			var this$1 = this;

			// Add Checkboxes
			var cell = this.row.insertCell();

			this.checkbox = document.createElement("input");
			this.checkbox.type = "checkbox";
			this.checkbox.onclick = function (event) {
				this$1.toggle_select(event.target.checked);
				event.stopImmediatePropagation();
			};

			cell.appendChild(this.checkbox);

			// Add Serial Number
			var serialNo = this.row.insertCell();
			serialNo.innerText = this.serial_number;

			this.columns.forEach(function (field) {
				var cell = this$1.row.insertCell();
				var formatter = frappe.form.get_formatter(field.fieldtype);
				cell.innerHTML = this$1.doc[field.fieldname] &&
					__(formatter(this$1.doc[field.fieldname], field, {only_value: 1}, this$1.doc)) || "";
			});

			this.row.onclick = function () { return this$1.events.onEdit(); };
			this.row.style.cursor = "pointer";
		}

		toggle_select(checked) {
			this.checkbox.checked = checked;
			this.events.onSelect(checked);
		}

		is_selected() {
			return this.checkbox.checked;
		}
	};

	frappe.provide('frappe.utils');
	/**
	 * Simple EventEmitterMixin which uses jQuery's event system
	 */
	var EventEmitterMixin = {
		init: function init() {
			this.jq = jQuery({});
		},

		trigger: function trigger(evt, data) {
			!this.jq && this.init();
			this.jq.trigger(evt, data);
		},

		once: function once(evt, handler) {
			!this.jq && this.init();
			this.jq.one(evt, function (e, data) { return handler(data); });
		},

		on: function on(evt, handler) {
			!this.jq && this.init();
			this.jq.bind(evt, function (e, data) { return handler(data); });
		},

		off: function off(evt, handler) {
			!this.jq && this.init();
			this.jq.unbind(evt, function (e, data) { return handler(data); });
		}
	};

	frappe.utils.make_event_emitter = function(object) {
		Object.assign(object, EventEmitterMixin);
		return object;
	};

	frappe.provide("frappe.ui");
	frappe.provide("frappe.web_form");

	class WebForm extends frappe.ui.FieldGroup {
		constructor(opts) {
			super();
			Object.assign(this, opts);
			frappe.web_form = this;
			frappe.web_form.events = {};
			Object.assign(frappe.web_form.events, EventEmitterMixin);
		}

		prepare(web_form_doc, doc) {
			Object.assign(this, web_form_doc);
			this.fields = web_form_doc.web_form_fields;
			this.doc = doc;
		}

		make() {
			super.make();
			this.set_field_values();
			if (this.introduction_text) { this.set_form_description(this.introduction_text); }
			if (this.allow_print && !this.is_new) { this.setup_print_button(); }
			if (this.allow_delete && !this.is_new) { this.setup_delete_button(); }
			if (this.is_new) { this.setup_cancel_button(); }
			this.setup_primary_action();
			$(".link-btn").remove();

			// webform client script
			frappe.init_client_script && frappe.init_client_script();
			frappe.web_form.events.trigger('after_load');
			this.after_load && this.after_load();
		}

		on(fieldname, handler) {
			var field = this.fields_dict[fieldname];
			field.df.change = function () {
				handler(field, field.value);
			};
		}

		set_field_values() {
			if (this.doc.name) { this.set_values(this.doc); }
			else { return; }
		}

		set_default_values() {
			var values = frappe.utils.get_query_params();
			delete values.new;
			this.set_values(values);
		}

		set_form_description(intro) {
			var intro_wrapper = document.getElementById('introduction');
			intro_wrapper.innerHTML = intro;
		}

		add_button(name, type, action, wrapper_class) {
			if ( wrapper_class === void 0 ) wrapper_class=".web-form-actions";

			var button = document.createElement("button");
			button.classList.add("btn", "btn-" + type, "btn-sm", "ml-2");
			button.innerHTML = name;
			button.onclick = action;
			document.querySelector(wrapper_class).appendChild(button);
		}

		add_button_to_footer(name, type, action) {
			this.add_button(name, type, action, '.web-form-footer');
		}

		add_button_to_header(name, type, action) {
			this.add_button(name, type, action, '.web-form-actions');
		}

		setup_primary_action() {
			var this$1 = this;

			this.add_button_to_header(this.button_label || "Save", "primary", function () { return this$1.save(); }
			);

			this.add_button_to_footer(this.button_label || "Save", "primary", function () { return this$1.save(); }
			);
		}

		setup_cancel_button() {
			var this$1 = this;

			this.add_button_to_header(__("Cancel"), "light", function () { return this$1.cancel(); });
		}

		setup_delete_button() {
			var this$1 = this;

			frappe.has_permission(this.doc_type, "", "delete", function () {
				this$1.add_button_to_header(
					frappe.utils.icon('delete'),
					"danger",
					function () { return this$1.delete(); }
				);
			});
		}

		setup_print_button() {
			var this$1 = this;

			this.add_button_to_header(
				frappe.utils.icon('print'),
				"light",
				function () { return this$1.print(); }
			);
		}

		save() {
			var this$1 = this;

			var is_new = this.is_new;
			if (this.validate && !this.validate()) {
				frappe.throw(__("Couldn't save, please check the data you have entered"), __("Validation Error"));
			}

			// validation hack: get_values will check for missing data
			var doc_values = super.get_values(this.allow_incomplete);

			if (!doc_values) { return; }

			if (window.saving) { return; }
			var for_payment = Boolean(this.accept_payment && !this.doc.paid);

			Object.assign(this.doc, doc_values);
			this.doc.doctype = this.doc_type;
			this.doc.web_form_name = this.name;

			// Save
			window.saving = true;
			frappe.form_dirty = false;

			frappe.call({
				type: "POST",
				method: "frappe.website.doctype.web_form.web_form.accept",
				args: {
					data: this.doc,
					web_form: this.name,
					docname: this.doc.name,
					for_payment: for_payment
				},
				callback: function (response) {
					// Check for any exception in response
					if (!response.exc) {
						// Success
						this$1.handle_success(response.message);
						frappe.web_form.events.trigger('after_save');
						this$1.after_save && this$1.after_save();
						// args doctype and docname added to link doctype in file manager
						if (is_new) {
							frappe.call({
								type: 'POST',
								method: "frappe.handler.upload_file",
								args: {
									file_url: response.message.attachment,
									doctype: response.message.doctype,
									docname: response.message.name
								}
							});
						}
					}
				},
				always: function() {
					window.saving = false;
				}
			});
			return true;
		}

		delete() {
			frappe.call({
				type: "POST",
				method: "frappe.website.doctype.web_form.web_form.delete",
				args: {
					web_form_name: this.name,
					docname: this.doc.name
				}
			});
		}

		print() {
			window.open(("/printview?\n\t\t\tdoctype=" + (this.doc_type) + "\n\t\t\t&name=" + (this.doc.name) + "\n\t\t\t&format=" + (this.print_format || "Standard")), '_blank');
		}

		cancel() {
			window.location.href = window.location.pathname;
		}

		handle_success(data) {
			var this$1 = this;

			if (this.accept_payment && !this.doc.paid) {
				window.location.href = data;
			}

			var success_dialog = new frappe.ui.Dialog({
				title: __("Saved Successfully"),
				secondary_action: function () {
					if (this$1.success_url) {
						window.location.href = this$1.success_url;
					} else if(this$1.login_required) {
						window.location.href =
							window.location.pathname + "?name=" + data.name;
					}
				}
			});

			success_dialog.show();
			var success_message =
				this.success_message || __("Your information has been submitted");
			success_dialog.set_message(success_message);
		}
	}

	frappe.ready(function() {
		var query_params = frappe.utils.get_query_params();
		var wrapper = $(".web-form-wrapper");
		var is_list = parseInt(wrapper.data('is-list')) || query_params.is_list;
		var webform_doctype = wrapper.data('web-form-doctype');
		var webform_name = wrapper.data('web-form');
		var login_required = parseInt(wrapper.data('login-required'));
		var allow_delete = parseInt(wrapper.data('allow-delete'));
		var doc_name = query_params.name || '';
		var is_new = query_params.new;

		if (login_required) { show_login_prompt(); }
		else if (is_list) { show_grid(); }
		else { show_form(webform_doctype, webform_name, is_new); }

		document.querySelector("body").style.display = "block";

		function show_login_prompt() {
			var login_required = new frappe.ui.Dialog({
				title: __("Not Permitted"),
				primary_action_label: __("Login"),
				primary_action: function () {
					window.location.replace('/login?redirect-to=' + window.location.pathname);
				}
			});
			login_required.set_message(__("You are not permitted to access this page."));
			login_required.show();
		}

		function show_grid() {
			new WebFormList({
				parent: wrapper,
				doctype: webform_doctype,
				web_form_name: webform_name,
				settings: {
					allow_delete: allow_delete
				}
			});
		}

		function show_form() {
			var web_form = new WebForm({
				parent: wrapper,
				is_new: is_new,
				web_form_name: webform_name,
			});

			get_data().then(function (r) {
				var data = setup_fields(r.message);
				var web_form_doc = data.web_form;

				if (web_form_doc.name && web_form_doc.allow_edit === 0) {
					if (!window.location.href.includes("?new=1")) {
						window.location.replace(window.location.pathname + "?new=1");
					}
				}
				var doc = r.message.doc || build_doc(r.message);
				web_form.prepare(web_form_doc, r.message.doc && web_form_doc.allow_edit === 1 ? r.message.doc : {});
				web_form.make();
				web_form.set_default_values();
			});

			function build_doc(form_data) {
				var doc = {};
				form_data.web_form.web_form_fields.forEach(function (df) {
					if (df.default) { return doc[df.fieldname] = df.default; }
				});
				return doc;
			}

			function get_data() {
				return frappe.call({
					method: "frappe.website.doctype.web_form.web_form.get_form_data",
					args: {
						doctype: webform_doctype,
						docname: doc_name,
						web_form_name: webform_name
					},
					freeze: true
				});
			}

			function setup_fields(form_data) {
				form_data.web_form.web_form_fields.map(function (df) {
					df.is_web_form = true;
					if (df.fieldtype === "Table") {
						df.get_data = function () {
							var data = [];
							if (form_data.doc) {
								data = form_data.doc[df.fieldname];
							}
							return data;
						};

						df.fields = form_data[df.fieldname];
						$.each(df.fields || [], function(_i, field) {
							if (field.fieldtype === "Link") {
								field.only_select = true;
							}
							field.is_web_form = true;
						});

						if (df.fieldtype === "Attach") {
							df.is_private = true;
						}

						delete df.parent;
						delete df.parentfield;
						delete df.parenttype;
						delete df.doctype;

						return df;
					}
					if (df.fieldtype === "Link") {
						df.only_select = true;
					}
					if (["Attach", "Attach Image"].includes(df.fieldtype)) {
						if (typeof df.options !== "object") {
							df.options = {};
						}
						df.options.disable_file_browser = true;
					}
				});

				return form_data;
			}
		}
	});

}());
//# sourceMappingURL=web_form.min.js.map
