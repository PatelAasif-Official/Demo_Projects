(function () {
	'use strict';

	// Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and Contributors
	// MIT License. See license.txt

	class BaseTimeline {
		constructor(opts) {
			Object.assign(this, opts);
			this.make();
		}

		make() {
			this.timeline_wrapper = $("<div class=\"new-timeline\">");
			this.wrapper = this.timeline_wrapper;
			this.timeline_items_wrapper = $("<div class=\"timeline-items\">");
			this.timeline_actions_wrapper = $("\n\t\t\t<div class=\"timeline-actions\">\n\t\t\t\t<div class=\"timeline-dot\"></div>\n\t\t\t</div>\n\t\t");

			this.timeline_wrapper.append(this.timeline_actions_wrapper);
			this.timeline_actions_wrapper.hide();
			this.timeline_wrapper.append(this.timeline_items_wrapper);

			this.parent.replaceWith(this.timeline_wrapper);
			this.timeline_items = [];
		}

		refresh() {
			this.render_timeline_items();
		}

		add_action_button(label, action, icon, btn_class) {
			if ( icon === void 0 ) icon=null;
			if ( btn_class === void 0 ) btn_class=null;

			var icon_element = icon ? frappe.utils.icon(icon, 'xs') : null;
			this.timeline_actions_wrapper.show();
			var action_btn = $(("<button class=\"btn btn-xs " + (btn_class || 'btn-default') + " action-btn\">\n\t\t\t" + icon_element + "\n\t\t\t" + label + "\n\t\t</button>"));
			action_btn.click(action);
			this.timeline_actions_wrapper.append(action_btn);
			return action_btn;
		}

		render_timeline_items() {
			var this$1 = this;

			this.timeline_items_wrapper.empty();
			this.timeline_items = [];
			this.doc_info = this.frm && this.frm.get_docinfo() || {};
			var response = this.prepare_timeline_contents();
			if (response instanceof Promise) {
				response.then(function () {
					this$1.timeline_items.sort(function (item1, item2) { return new Date(item2.creation) - new Date(item1.creation); });
					this$1.timeline_items.forEach(this$1.add_timeline_item.bind(this$1));
				});
			} else {
				this.timeline_items.sort(function (item1, item2) { return new Date(item2.creation) - new Date(item1.creation); });
				this.timeline_items.forEach(this.add_timeline_item.bind(this));
			}
		}

		prepare_timeline_contents() {
			//
		}

		add_timeline_item(item, append_at_the_end) {
			if ( append_at_the_end === void 0 ) append_at_the_end=false;

			var timeline_item = this.get_timeline_item(item);
			if (append_at_the_end) {
				this.timeline_items_wrapper.append(timeline_item);
			} else {
				this.timeline_items_wrapper.prepend(timeline_item);
			}
			return timeline_item;
		}

		add_timeline_items(items, append_at_the_end) {
			var this$1 = this;
			if ( append_at_the_end === void 0 ) append_at_the_end=false;

			items.forEach(function (item) { return this$1.add_timeline_item(item, append_at_the_end); });
		}

		get_timeline_item(item) {
			// item can have content*, creation*,
			// timeline_badge, icon, icon_size,
			// hide_timestamp, is_card
			var timeline_item = $("<div class=\"timeline-item\">");
			timeline_item.attr({
				"data-doctype": item.doctype,
				"data-name": item.name,
			});
			if (item.icon) {
				timeline_item.append(("\n\t\t\t\t<div class=\"timeline-badge\" title='" + (item.title || frappe.utils.to_title_case(item.icon)) + "'>\n\t\t\t\t\t" + (frappe.utils.icon(item.icon, item.icon_size || 'md')) + "\n\t\t\t\t</div>\n\t\t\t"));
			} else if (item.timeline_badge) {
				timeline_item.append(item.timeline_badge);
			} else {
				timeline_item.append("<div class=\"timeline-dot\">");
			}

			timeline_item.append(("<div class=\"timeline-content " + (item.is_card ? 'frappe-card' : '') + "\">"));
			timeline_item.find('.timeline-content').append(item.content);
			if (!item.hide_timestamp && !item.is_card) {
				timeline_item.find('.timeline-content').append(("<span> - " + (comment_when(item.creation)) + "</span>"));
			}
			return timeline_item;
		}
	}

	frappe.provide('frappe.energy_points');

	class UserProfile {
		constructor(wrapper) {
		var this$1 = this;

			this.wrapper = $(wrapper);
			this.page = frappe.ui.make_app_page({
				parent: wrapper,
			});
			this.sidebar = this.wrapper.find('.layout-side-section');
			this.main_section = this.wrapper.find('.layout-main-section');
			this.wrapper.bind('show', function () {
				this$1.show();
			});
		}

		show() {
			var this$1 = this;

			var route = frappe.get_route();
			this.user_id = route[1] || frappe.session.user;

			//validate if user
			if (route.length > 1) {
				frappe.dom.freeze(__('Loading user profile') + '...');
				frappe.db.exists('User', this.user_id).then(function (exists) {
					frappe.dom.unfreeze();
					if (exists) {
						this$1.make_user_profile();
					} else {
						frappe.msgprint(__('User does not exist'));
					}
				});
			} else {
				frappe.set_route('user-profile', frappe.session.user);
			}
		}

		make_user_profile() {
			this.user = frappe.user_info(this.user_id);
			this.page.set_title(this.user.fullname);
			this.setup_user_search();
			this.main_section.empty().append(frappe.render_template('user_profile'));
			this.energy_points = 0;
			this.review_points = 0;
			this.rank = 0;
			this.month_rank = 0;
			this.render_user_details();
			this.render_points_and_rank();
			this.render_heatmap();
			this.render_line_chart();
			this.render_percentage_chart('type', 'Type Distribution');
			this.create_percentage_chart_filters();
			this.setup_user_activity_timeline();
		}

		setup_user_search() {
			var this$1 = this;

			this.$user_search_button = this.page.set_secondary_action(
				__('Change User'),
				function () { return this$1.show_user_search_dialog(); },
				{ icon: 'change', size: 'sm' }
			);
		}

		show_user_search_dialog() {
			var this$1 = this;

			var dialog = new frappe.ui.Dialog({
				title: __('Change User'),
				fields: [
					{
						fieldtype: 'Link',
						fieldname: 'user',
						options: 'User',
						label: __('User'),
					}
				],
				primary_action_label: __('Go'),
				primary_action: function (ref) {
					var user = ref.user;

					dialog.hide();
					this$1.user_id = user;
					this$1.make_user_profile();
				}
			});
			dialog.show();
		}

		render_heatmap() {
			this.heatmap = new frappe.Chart('.performance-heatmap', {
				type: 'heatmap',
				countLabel: 'Energy Points',
				data: {},
				discreteDomains: 1,
				radius: 3,
				height: 150
			});
			this.update_heatmap_data();
			this.create_heatmap_chart_filters();
		}

		update_heatmap_data(date_from) {
			var this$1 = this;

			frappe.xcall('frappe.desk.page.user_profile.user_profile.get_energy_points_heatmap_data', {
				user: this.user_id,
				date: date_from || frappe.datetime.year_start(),
			}).then(function (r) {
				this$1.heatmap.update({ dataPoints: r });
			});
		}


		render_line_chart() {
			this.line_chart_filters = [
				['Energy Point Log', 'user', '=', this.user_id, false],
				['Energy Point Log', 'type', '!=', 'Review', false]
			];

			this.line_chart_config = {
				timespan: 'Last Month',
				time_interval: 'Daily',
				type: 'Line',
				value_based_on: 'points',
				chart_type: 'Sum',
				document_type: 'Energy Point Log',
				name: 'Energy Points',
				width: 'half',
				based_on: 'creation'
			};

			this.line_chart = new frappe.Chart('.performance-line-chart', {
				type: 'line',
				height: 200,
				data: {
					labels: [],
					datasets: [{}]
				},
				colors: ['purple'],
				axisOptions: {
					xIsSeries: 1
				}
			});
			this.update_line_chart_data();
			this.create_line_chart_filters();
		}

		update_line_chart_data() {
			var this$1 = this;

			this.line_chart_config.filters_json = JSON.stringify(this.line_chart_filters);

			frappe.xcall('frappe.desk.doctype.dashboard_chart.dashboard_chart.get', {
				chart: this.line_chart_config,
				no_cache: 1,
			}).then(function (chart) {
				this$1.line_chart.update(chart);
			});
		}

		// eslint-disable-next-line no-unused-vars
		render_percentage_chart(field, title) {
			var this$1 = this;

			frappe.xcall('frappe.desk.page.user_profile.user_profile.get_energy_points_percentage_chart_data', {
				user: this.user_id,
				field: field
			}).then(function (chart) {
				if (chart.labels.length) {
					this$1.percentage_chart = new frappe.Chart('.performance-percentage-chart', {
						type: 'percentage',
						data: {
							labels: chart.labels,
							datasets: chart.datasets
						},
						truncateLegends: 1,
						barOptions: {
							height: 11,
							depth: 1
						},
						height: 200,
						maxSlices: 8,
						colors: ['purple', 'blue', 'cyan', 'teal', 'pink', 'red', 'orange', 'yellow'],
					});
				} else {
					this$1.wrapper.find('.percentage-chart-container').hide();
				}
			});
		}

		create_line_chart_filters() {
			var this$1 = this;

			var filters = [
				{
					label: 'All',
					options: ['All', 'Auto', 'Criticism', 'Appreciation', 'Revert'],
					action: function (selected_item) {
						if (selected_item === 'All') {
							this$1.line_chart_filters = [
								['Energy Point Log', 'user', '=', this$1.user_id, false],
								['Energy Point Log', 'type', '!=', 'Review', false]
							];
						} else {
							this$1.line_chart_filters[1] = ['Energy Point Log', 'type', '=', selected_item, false];
						}
						this$1.update_line_chart_data();
					}
				},
				{
					label: 'Last Month',
					options: ['Last Week', 'Last Month', 'Last Quarter', 'Last Year'],
					action: function (selected_item) {
						this$1.line_chart_config.timespan = selected_item;
						this$1.update_line_chart_data();
					}
				},
				{
					label: 'Daily',
					options: ['Daily', 'Weekly', 'Monthly'],
					action: function (selected_item) {
						this$1.line_chart_config.time_interval = selected_item;
						this$1.update_line_chart_data();
					}
				} ];
			frappe.dashboard_utils.render_chart_filters(filters, 'chart-filter', '.line-chart-options', 1);
		}

		create_percentage_chart_filters() {
			var this$1 = this;

			var filters = [
				{
					label: 'Type',
					options: ['Type', 'Reference Doctype', 'Rule'],
					fieldnames: ['type', 'reference_doctype', 'rule'],
					action: function (selected_item, fieldname) {
						var title = selected_item + ' Distribution';
						this$1.render_percentage_chart(fieldname, title);
					}
				} ];
			frappe.dashboard_utils.render_chart_filters(filters, 'chart-filter', '.percentage-chart-options');
		}

		create_heatmap_chart_filters() {
			var this$1 = this;

			var filters = [
				{
					label: frappe.dashboard_utils.get_year(frappe.datetime.now_date()),
					options: frappe.dashboard_utils.get_years_since_creation(frappe.boot.user.creation),
					action: function (selected_item) {
						this$1.update_heatmap_data(frappe.datetime.obj_to_str(selected_item));
					}
				} ];
			frappe.dashboard_utils.render_chart_filters(filters, 'chart-filter', '.heatmap-options');
		}


		edit_profile() {
			var this$1 = this;

			var edit_profile_dialog = new frappe.ui.Dialog({
				title: __('Edit Profile'),
				fields: [
					{
						fieldtype: 'Attach Image',
						fieldname: 'user_image',
						label: 'Profile Image',
					},
					{
						fieldtype: 'Data',
						fieldname: 'interest',
						label: 'Interests',
					},
					{
						fieldtype: 'Column Break'
					},
					{
						fieldtype: 'Data',
						fieldname: 'location',
						label: 'Location',
					},
					{
						fieldtype: 'Section Break',
						fieldname: 'Interest',
					},
					{
						fieldtype: 'Small Text',
						fieldname: 'bio',
						label: 'Bio',
					}
				],
				primary_action: function (values) {
					edit_profile_dialog.disable_primary_action();
					frappe.xcall('frappe.desk.page.user_profile.user_profile.update_profile_info', {
						profile_info: values
					}).then(function (user) {
						user.image = user.user_image;
						this$1.user = Object.assign(values, user);
						edit_profile_dialog.hide();
						this$1.render_user_details();
					}).finally(function () {
						edit_profile_dialog.enable_primary_action();
					});
				},
				primary_action_label: __('Save')
			});

			edit_profile_dialog.set_values({
				user_image: this.user.image,
				location: this.user.location,
				interest: this.user.interest,
				bio: this.user.bio
			});
			edit_profile_dialog.show();
		}

		render_user_details() {
			this.sidebar.empty().append(frappe.render_template('user_profile_sidebar', {
				user_image: this.user.image,
				user_abbr: this.user.abbr,
				user_location: this.user.location,
				user_interest: this.user.interest,
				user_bio: this.user.bio,
			}));

			this.setup_user_profile_links();
		}

		setup_user_profile_links() {
			var this$1 = this;

			if (this.user_id !== frappe.session.user) {
				this.wrapper.find('.profile-links').hide();
			} else {
				this.wrapper.find('.edit-profile-link').on('click', function () {
					this$1.edit_profile();
				});

				this.wrapper.find('.user-settings-link').on('click', function () {
					this$1.go_to_user_settings();
				});
			}
		}

		get_user_rank() {
			var this$1 = this;

			return frappe.xcall('frappe.desk.page.user_profile.user_profile.get_user_rank', {
				user: this.user_id,
			}).then(function (r) {
				if (r.monthly_rank.length) { this$1.month_rank = r.monthly_rank[0]; }
				if (r.all_time_rank.length) { this$1.rank = r.all_time_rank[0]; }
			});
		}

		get_user_points() {
			var this$1 = this;

			return frappe.xcall(
				'frappe.social.doctype.energy_point_log.energy_point_log.get_user_energy_and_review_points',
				{
					user: this.user_id,
				}
			).then(function (r) {
				if (r[this$1.user_id]) {
					this$1.energy_points = r[this$1.user_id].energy_points;
					this$1.review_points = r[this$1.user_id].review_points;
				}
			});
		}

		render_points_and_rank() {
			var this$1 = this;

			var $profile_details = this.wrapper.find('.user-stats');
			var $profile_details_wrapper = this.wrapper.find('.user-stats-detail');

			var _get_stat_dom = function (value, label, icon) {
				return ("<div class=\"user-stats-item mt-4\">\n\t\t\t\t" + (frappe.utils.icon(icon, "lg", "no-stroke")) + "\n\t\t\t\t<div>\n\t\t\t\t\t<div class=\"stat-value\">" + value + "</div>\n\t\t\t\t\t<div class=\"stat-label\">" + label + "</div>\n\t\t\t\t</div>\n\t\t\t</div>");
			};

			this.get_user_rank().then(function () {
				this$1.get_user_points().then(function () {
					var html = $(("\n\t\t\t\t\t" + (_get_stat_dom(this$1.energy_points, __('Energy Points'), "color-energy-points")) + "\n\t\t\t\t\t" + (_get_stat_dom(this$1.review_points, __('Review Points'), "color-review-points")) + "\n\t\t\t\t\t" + (_get_stat_dom(this$1.rank, __('Rank'), "color-rank")) + "\n\t\t\t\t\t" + (_get_stat_dom(this$1.month_rank, __('Monthly Rank'), "color-monthly-rank")) + "\n\t\t\t\t"));

					$profile_details.append(html);
					$profile_details_wrapper.removeClass("hide");
				});
			});
		}

		go_to_user_settings() {
			frappe.set_route('Form', 'User', this.user_id);
		}

		setup_user_activity_timeline() {
			this.user_activity_timeline = new UserProfileTimeline({
				parent: this.wrapper.find('.recent-activity-list'),
				footer: this.wrapper.find('.recent-activity-footer'),
				user: this.user_id
			});

			this.user_activity_timeline.refresh();
		}
	}

	class UserProfileTimeline extends BaseTimeline {
		make() {
			super.make();
			this.activity_start = 0;
			this.activity_limit = 20;
			this.setup_show_more_activity();
		}
		prepare_timeline_contents() {
			var this$1 = this;

			return this.get_user_activity_data().then(function (activities) {
				if (!activities.length) {
					this$1.show_more_button.hide();
					this$1.timeline_wrapper.html(("<div>" + (__('No activities to show')) + "</div>"));
					return;
				}
				this$1.show_more_button.toggle(activities.length === this$1.activity_limit);
				this$1.timeline_items = activities.map(function (activity) { return this$1.get_activity_timeline_item(activity); });
			});
		}

		get_user_activity_data() {
			return frappe.xcall('frappe.desk.page.user_profile.user_profile.get_energy_points_list', {
				start: this.activity_start,
				limit: this.activity_limit,
				user: this.user
			});
		}

		get_activity_timeline_item(data) {
			var icon = data.type == 'Appreciation' ? 'clap': data.type == 'Criticism' ? 'criticize': null;
			return {
				icon: icon,
				creation: data.creation,
				is_card: true,
				content: frappe.energy_points.format_history_log(data),
			};
		}

		setup_show_more_activity() {
			var this$1 = this;

			this.show_more_button = $(("<a class=\"show-more-activity-btn\">" + (__('Show More Activity')) + "</a>"));
			this.show_more_button.hide();
			this.footer.append(this.show_more_button);
			this.show_more_button.on('click', function () { return this$1.show_more_activity(); });
		}

		show_more_activity() {
			var this$1 = this;

			this.activity_start += this.activity_limit;
			this.get_user_activity_data().then(function (activities) {
				if (!activities.length || activities.length < this$1.activity_limit) {
					this$1.show_more_button.hide();
				}
				var timeline_items = activities.map(function (activity) { return this$1.get_activity_timeline_item(activity); });
				timeline_items.map(function (item) { return this$1.add_timeline_item(item, true); });
			});
		}
	}

	frappe.provide('frappe.ui');
	frappe.ui.UserProfile = UserProfile;

}());
//# sourceMappingURL=user_profile_controller.min.js.map
