(function () {
	'use strict';

	var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var onscan = createCommonjsModule(function (module, exports) {
	(function (global, factory) {
	    module.exports = factory();
	}(commonjsGlobal, (function () {
		var onScan = {	
			
			/**
			 * 
			 * @param DomElement oDomElement
			 * @param Object oOptions
			 * @return self
			 */
			attachTo: function(oDomElement, oOptions) {
		
				if(oDomElement.scannerDetectionData !== undefined){
					throw new Error("onScan.js is already initialized for DOM element " + oDomElement);
				}
		
				var oDefaults = {
					onScan: function(sScanned, iQty){}, // Callback after detection of a successfull scanning:  function(){sScancode, iCount)}()
					onScanError: function(oDebug){}, // Callback after detection of a unsuccessfull scanning (scanned string in parameter)
					onKeyProcess: function(sChar, oEvent){}, // Callback after receiving and processing a char (scanned char in parameter)
					onKeyDetect: function(iKeyCode, oEvent){}, // Callback after detecting a keyDown (key char in parameter) - in contrast to onKeyProcess, this fires for non-character keys like tab, arrows, etc. too!
					onPaste: function(sPasted, oEvent){}, // Callback after receiving a value on paste, no matter if it is a valid code or not
					keyCodeMapper: function(oEvent) {return onScan.decodeKeyEvent(oEvent)}, // Custom function to decode a keydown event into a character. Must return decoded character or NULL if the given event should not be processed.
					onScanButtonLongPress: function(){}, // Callback after detection of a successfull scan while the scan button was pressed and held down
					scanButtonKeyCode:false, // Key code of the scanner hardware button (if the scanner button a acts as a key itself) 
					scanButtonLongPressTime:500, // How long (ms) the hardware button should be pressed, until a callback gets executed
					timeBeforeScanTest:100, // Wait duration (ms) after keypress event to check if scanning is finished
					avgTimeByChar:30, // Average time (ms) between 2 chars. Used to do difference between keyboard typing and scanning
					minLength:6, // Minimum length for a scanning
					suffixKeyCodes:[9,13], // Chars to remove and means end of scanning
					prefixKeyCodes:[], // Chars to remove and means start of scanning
					ignoreIfFocusOn:false, // do not handle scans if the currently focused element matches this selector or object
					stopPropagation:false, // Stop immediate propagation on keypress event
					preventDefault:false, // Prevent default action on keypress event
					captureEvents:false, // Get the events before any listeners deeper in the DOM
					reactToKeydown:true, // look for scan input in keyboard events
					reactToPaste:false, // look for scan input in paste events
					singleScanQty: 1, // Quantity of Items put out to onScan in a single scan
				};
										
				oOptions = this._mergeOptions(oDefaults, oOptions);
		
				// initializing options and variables on DomElement
				oDomElement.scannerDetectionData = {
						options: oOptions,
						vars:{
							firstCharTime: 0,
							lastCharTime: 0,
							accumulatedString: '',
							testTimer: false,
							longPressTimeStart: 0,
							longPressed: false
						}
					
				};
				
				// initializing handlers (based on settings)
				if (oOptions.reactToPaste === true){
					oDomElement.addEventListener("paste", this._handlePaste, oOptions.captureEvents);
				}
				if (oOptions.scanButtonKeyCode !== false){
					oDomElement.addEventListener("keyup", this._handleKeyUp, oOptions.captureEvents);
				}
				if (oOptions.reactToKeydown === true || oOptions.scanButtonKeyCode !== false){	
					oDomElement.addEventListener("keydown", this._handleKeyDown, oOptions.captureEvents);
				}
				return this;
			},
			
			/**
			 * 
			 * @param DomElement oDomElement
			 * @return void
			 */
			detachFrom: function(oDomElement) {
				// detaching all used events
				if (oDomElement.scannerDetectionData.options.reactToPaste){
					oDomElement.removeEventListener("paste", this._handlePaste);
				}
				if (oDomElement.scannerDetectionData.options.scanButtonKeyCode !== false){
					oDomElement.removeEventListener("keyup", this._handleKeyUp);
				}
				oDomElement.removeEventListener("keydown", this._handleKeyDown);
				
				// clearing data off DomElement
				oDomElement.scannerDetectionData = undefined; 
				return;
			},
			
			/**
			 * 
			 * @param DomElement oDomElement
			 * @return Object
			 */
			getOptions: function(oDomElement){
				return oDomElement.scannerDetectionData.options;			
			},
		
			/**
			 * 
			 * @param DomElement oDomElement
			 * @param Object oOptions
			 * @return self
			 */
			setOptions: function(oDomElement, oOptions){
				// check if some handlers need to be changed based on possible option changes
				switch (oDomElement.scannerDetectionData.options.reactToPaste){
					case true: 
						if (oOptions.reactToPaste === false){
							oDomElement.removeEventListener("paste", this._handlePaste);
						}
						break;
					case false:
						if (oOptions.reactToPaste === true){
							oDomElement.addEventListener("paste", this._handlePaste);
						}
						break;
				}
				
				switch (oDomElement.scannerDetectionData.options.scanButtonKeyCode){
					case false:
						if (oOptions.scanButtonKeyCode !== false){
							oDomElement.addEventListener("keyup", this._handleKeyUp);
						}
						break;
					default: 
						if (oOptions.scanButtonKeyCode === false){
							oDomElement.removeEventListener("keyup", this._handleKeyUp);
						}
						break;
				}
				
				// merge old and new options
				oDomElement.scannerDetectionData.options = this._mergeOptions(oDomElement.scannerDetectionData.options, oOptions);
			
				// reinitiallize
				this._reinitialize(oDomElement);
				return this;
			},
			
			/**
			 * Transforms key codes into characters.
			 * 
			 * By default, only the follwing key codes are taken into account
			 * - 48-90 (letters and regular numbers)
			 * - 96-105 (numeric keypad numbers)
			 * - 106-111 (numeric keypad operations)
			 * 
			 * All other keys will yield empty strings!
			 * 
			 * The above keycodes will be decoded using the KeyboardEvent.key property on modern
			 * browsers. On older browsers the method will fall back to String.fromCharCode()
			 * putting the result to upper/lower case depending on KeyboardEvent.shiftKey if
			 * it is set.
			 * 
			 * @param KeyboardEvent oEvent
			 * @return string
			 */
			decodeKeyEvent : function (oEvent) {
				var iCode = this._getNormalizedKeyNum(oEvent);
				switch (true) {
					case iCode >= 48 && iCode <= 90: // numbers and letters
					case iCode >= 106 && iCode <= 111: // operations on numeric keypad (+, -, etc.)
						if (oEvent.key !== undefined && oEvent.key !== '') {
							return oEvent.key;
						}
					
						var sDecoded = String.fromCharCode(iCode);
						switch (oEvent.shiftKey) {
							case false: sDecoded = sDecoded.toLowerCase(); break;
							case true: sDecoded = sDecoded.toUpperCase(); break;
						}
						return sDecoded;
					case iCode >= 96 && iCode <= 105: // numbers on numeric keypad
						return 0+(iCode-96);
				}
				return '';
			},
			
			/**
			 * Simulates a scan of the provided code.
		     *
			 * The scan code can be defined as
			 * - a string - in this case no keyCode decoding is done and the code is merely validated
			 * against constraints like minLenght, etc.
			 * - an array of keyCodes (e.g. `[70,71,80]`) - will produce `keydown` events with corresponding
			 * `keyCode` properties. NOTE: these events will have empty `key` properties, so decoding may
			 * yield different results than with native events.
			 * - an array of objects (e.g. `[{keyCode: 70, key: "F", shiftKey: true}, {keyCode: 71, key: "g"}]`) -
			 * this way almost any event can be simulated, but it's a lot of work to do.
			 *
			 * @param DomElement oDomElement
			 * @param string|array mStringOrArray
			 * @return self
			 */
			simulate: function(oDomElement, mStringOrArray){
				this._reinitialize(oDomElement);
				if (Array.isArray(mStringOrArray)){
					mStringOrArray.forEach(function(mKey){
						var oEventProps = {};
						if( (typeof mKey === "object" || typeof mKey === 'function') && (mKey !== null) ) {
							oEventProps = mKey;
						} else {
							oEventProps.keyCode = parseInt(mKey);
						}
						var oEvent = new KeyboardEvent('keydown', oEventProps);
						document.dispatchEvent(oEvent);
					});
				} else {
					this._validateScanCode(oDomElement, mStringOrArray);
				}
				return this;
			},
			
			/**
			 * @private
			 * @param DomElement oDomElement
			 * @return void
			 */
			_reinitialize: function(oDomElement){
				var oVars = oDomElement.scannerDetectionData.vars;
				oVars.firstCharTime = 0;
				oVars.lastCharTime = 0;
				oVars.accumulatedString = '';
				return;
			},
			
			/**
			 * @private
			 * @param DomElement oDomElement
		     * @return boolean
			 */
			_isFocusOnIgnoredElement: function(oDomElement){
				
				var ignoreSelectors = oDomElement.scannerDetectionData.options.ignoreIfFocusOn;
		
		        if(!ignoreSelectors){
					return false;
				}
			
				var oFocused = document.activeElement;
				
				// checks if ignored element is an array, and if so it checks if one of the elements of it is an active one
				if (Array.isArray(ignoreSelectors)){
					for(var i=0; i<ignoreSelectors.length; i++){
						if(oFocused.matches(ignoreSelectors[i]) === true){
							return true;
						}
					}
				// if the option consists of an single element, it only checks this one
				} else if (oFocused.matches(ignoreSelectors)){
					return true;					
				}
				
				// if the active element is not listed in the ignoreIfFocusOn option, return false
			    return false;
		    },
			
		    /**
		     * Validates the scan code accumulated by the given DOM element and fires the respective events.
		     * 
		     * @private
		     * @param DomElement oDomElement
		     * @return boolean
		     */
			_validateScanCode: function(oDomElement, sScanCode){
				var oScannerData = oDomElement.scannerDetectionData;			
				var oOptions = oScannerData.options;
				var iSingleScanQty = oScannerData.options.singleScanQty;
				var iFirstCharTime = oScannerData.vars.firstCharTime;
				var iLastCharTime = oScannerData.vars.lastCharTime;
				var oScanError = {};
		        var oEvent;
		        
				switch(true){
					
					// detect codes that are too short
					case (sScanCode.length < oOptions.minLength):
						oScanError = {
							message: "Receieved code is shorter then minimal length"
						};
						break;
						
					// detect codes that were entered too slow	
					case ((iLastCharTime - iFirstCharTime) > (sScanCode.length * oOptions.avgTimeByChar)):
						oScanError = {
							message: "Receieved code was not entered in time"
						};				
						break;
						
					// if a code was not filtered out earlier it is valid	
					default:
						oOptions.onScan.call(oDomElement, sScanCode, iSingleScanQty);
						oEvent = new CustomEvent(
							'scan',
							{	
								detail: { 
									scanCode: sScanCode,
									qty: iSingleScanQty
								}
							}
						);
						oDomElement.dispatchEvent(oEvent);
						onScan._reinitialize(oDomElement);
						return true;
				}
				
				// If an error occurred (otherwise the method would return earlier) create an object for errordetection
				oScanError.scanCode = sScanCode;
				oScanError.scanDuration = iLastCharTime - iFirstCharTime;
				oScanError.avgTimeByChar = oOptions.avgTimeByChar;
				oScanError.minLength = oOptions.minLength;
				
				oOptions.onScanError.call(oDomElement, oScanError);
				
				oEvent = new CustomEvent(
					'scanError', 
					{detail: oScanError}
				);
				oDomElement.dispatchEvent(oEvent);
				
				onScan._reinitialize(oDomElement);
				return false;
		    },
		
		    /**
		     * @private
		     * @param Object oDefaults
		     * @param Object oOptions
		     * @return Object
		     */
			_mergeOptions: function(oDefaults, oOptions){
				var oExtended = {};
				var prop;
				for (prop in oDefaults){
					if (Object.prototype.hasOwnProperty.call(oDefaults, prop)){
						oExtended[prop] = oDefaults[prop];
					}
				}			
				for (prop in oOptions){
					if (Object.prototype.hasOwnProperty.call(oOptions, prop)){
						oExtended[prop] = oOptions[prop];
					}
				}			
				return oExtended;
			},
		
			/**
			 * @private
			 * @param KeyboardEvent e
			 * @return int
			 * @see https://www.w3schools.com/jsref/event_key_keycode.asp
			 */
			_getNormalizedKeyNum: function(e){
				return e.which || e.keyCode;
			},
		
		
			/**
			 * @private
			 * @param KeyboardEvent e
			 * @return void
			 */
			_handleKeyDown: function(e){
				var iKeyCode = onScan._getNormalizedKeyNum(e);
				var oOptions = this.scannerDetectionData.options;
				var oVars = this.scannerDetectionData.vars;
				var bScanFinished = false;
				
				if (oOptions.onKeyDetect.call(this, iKeyCode, e) === false) {
					return;
				}		
				
				if (onScan._isFocusOnIgnoredElement(this)){
					return;
				}
							
		        // If it's just the button of the scanner, ignore it and wait for the real input
			    if(oOptions.scanButtonKeyCode !== false && iKeyCode==oOptions.scanButtonKeyCode) {
					
					// if the button was first pressed, start a timeout for the callback, which gets interrupted if the scanbutton gets released
					if (!oVars.longPressed){
						oVars.longPressTimer = setTimeout( oOptions.onScanButtonLongPress, oOptions.scanButtonLongPressTime, this);
						oVars.longPressed = true;
					}
		
					return;
		        }
				
				switch(true){
					// If it's not the first character and we encounter a terminating character, trigger scan process
					case (oVars.firstCharTime && oOptions.suffixKeyCodes.indexOf(iKeyCode)!==-1):
						e.preventDefault();
						e.stopImmediatePropagation();
						bScanFinished=true;
						break;
						
					// If it's the first character and we encountered one of the starting characters, don't process the scan	
					case (!oVars.firstCharTime && oOptions.prefixKeyCodes.indexOf(iKeyCode)!==-1):
						e.preventDefault();
						e.stopImmediatePropagation();
						bScanFinished=false;
						break;
						
					// Otherwise, just add the character to the scan string we're building	
					default:
						var character = oOptions.keyCodeMapper.call(this, e);
						if (character === null){
							return;
						}
						oVars.accumulatedString += character;
						
						if (oOptions.preventDefault) {
							e.preventDefault();
						}
						if (oOptions.stopPropagation) {
							e.stopImmediatePropagation();
						}
						
						bScanFinished=false;
						break;
				}
		        
				if(!oVars.firstCharTime){
					oVars.firstCharTime=Date.now();
				}
				
				oVars.lastCharTime=Date.now();
		
				if(oVars.testTimer){ 
					clearTimeout(oVars.testTimer);
				}
				
				if(bScanFinished){
					onScan._validateScanCode(this, oVars.accumulatedString);
					oVars.testTimer=false;
				} else {
					oVars.testTimer=setTimeout(onScan._validateScanCode, oOptions.timeBeforeScanTest, this, oVars.accumulatedString);
				}
		
				oOptions.onKeyProcess.call(this, character, e);
				return;
			},
			
			/**
			 * @private
			 * @param Event e
			 * @return void
			 */
			_handlePaste: function(e){
		
				var oOptions = this.scannerDetectionData.options;
				var oVars = this.scannerDetectionData.vars;
				var sPasteString = (event.clipboardData || window.clipboardData).getData('text');
				
				// if the focus is on an ignored element, abort
				if (onScan._isFocusOnIgnoredElement(this)){
					return;
				}
				
				e.preventDefault();

				if (oOptions.stopPropagation) {
					e.stopImmediatePropagation();
				}
							
				oOptions.onPaste.call(this, sPasteString, event);
				
				oVars.firstCharTime = 0;
				oVars.lastCharTime = 0;
				
				// validate the string
				onScan._validateScanCode(this, sPasteString);
				return;
			},
			
			/**
			 * @private
			 * @param KeyboardEvent e
			 * @return void
			 */
			_handleKeyUp: function(e){
				// if the focus is on an ignored element, abort
				if (onScan._isFocusOnIgnoredElement(this)){
					return;
				}
				
				var iKeyCode = onScan._getNormalizedKeyNum(e);
				
				// if hardware key is not being pressed anymore stop the timeout and reset
				if (iKeyCode == this.scannerDetectionData.options.scanButtonKeyCode){
					clearTimeout(this.scannerDetectionData.vars.longPressTimer);
					this.scannerDetectionData.vars.longPressed = false;
				}
				return;
			},
			
			/**
			 * Returns TRUE the scanner is currently in the middle of a scan sequence.
			 * 
			 * @param DomElement
			 * @return boolean
			 */
			isScanInProgressFor: function(oDomElement) {
				return oDomElement.scannerDetectionData.vars.firstCharTime > 0;
			},
			
			/**
			 * Returns TRUE if onScan is attached to the given DOM element and FALSE otherwise.
			 * 
			 * @param DomElement
			 * @return boolean
			 */
			isAttachedTo: function(oDomElement) {
				return (oDomElement.scannerDetectionData !== undefined);
			}
		};
		
		return onScan;
	})));
	});

	erpnext.PointOfSale.ItemSelector = class {
		// eslint-disable-next-line no-unused-vars
		constructor(ref) {
		var frm = ref.frm;
		var wrapper = ref.wrapper;
		var events = ref.events;
		var pos_profile = ref.pos_profile;
		var settings = ref.settings;

			this.wrapper = wrapper;
			this.events = events;
			this.pos_profile = pos_profile;
			this.hide_images = settings.hide_images;
			this.auto_add_item = settings.auto_add_item_to_cart;

			this.inti_component();
		}

		inti_component() {
			this.prepare_dom();
			this.make_search_bar();
			this.load_items_data();
			this.bind_events();
			this.attach_shortcuts();
		}

		prepare_dom() {
			this.wrapper.append(
				"<section class=\"items-selector\">\n\t\t\t\t<div class=\"filter-section\">\n\t\t\t\t\t<div class=\"label\">All Items</div>\n\t\t\t\t\t<div class=\"search-field\"></div>\n\t\t\t\t\t<div class=\"item-group-field\"></div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"items-container\"></div>\n\t\t\t</section>"
			);

			this.$component = this.wrapper.find('.items-selector');
			this.$items_container = this.$component.find('.items-container');
		}

		async load_items_data() {
			var this$1 = this;

			if (!this.item_group) {
				var res = await frappe.db.get_value("Item Group", {lft: 1, is_group: 1}, "name");
				this.parent_item_group = res.message.name;
			}
			if (!this.price_list) {
				var res$1 = await frappe.db.get_value("POS Profile", this.pos_profile, "selling_price_list");
				this.price_list = res$1.message.selling_price_list;
			}

			this.get_items({}).then(function (ref) {
				var message = ref.message;

				this$1.render_item_list(message.items);
			});
		}

		get_items(ref) {
			var start = ref.start; if ( start === void 0 ) start = 0;
			var page_length = ref.page_length; if ( page_length === void 0 ) page_length = 40;
			var search_term = ref.search_term; if ( search_term === void 0 ) search_term = '';

			var doc = this.events.get_frm().doc;
			var price_list = (doc && doc.selling_price_list) || this.price_list;
			var ref$1 = this;
			var item_group = ref$1.item_group;
			var pos_profile = ref$1.pos_profile;

			!item_group && (item_group = this.parent_item_group);

			return frappe.call({
				method: "erpnext.selling.page.point_of_sale.point_of_sale.get_items",
				freeze: true,
				args: { start: start, page_length: page_length, price_list: price_list, item_group: item_group, search_term: search_term, pos_profile: pos_profile },
			});
		}


		render_item_list(items) {
			var this$1 = this;

			this.$items_container.html('');

			items.forEach(function (item) {
				var item_html = this$1.get_item_html(item);
				this$1.$items_container.append(item_html);
			});
		}

		get_item_html(item) {
			var me = this;
			// eslint-disable-next-line no-unused-vars
			var item_image = item.item_image;
			var serial_no = item.serial_no;
			var batch_no = item.batch_no;
			var barcode = item.barcode;
			var actual_qty = item.actual_qty;
			var stock_uom = item.stock_uom;
			var price_list_rate = item.price_list_rate;
			var indicator_color = actual_qty > 10 ? "green" : actual_qty <= 0 ? "red" : "orange";
			var precision = flt(price_list_rate, 2) % 1 != 0 ? 2 : 0;

			var qty_to_display = actual_qty;

			if (Math.round(qty_to_display) > 999) {
				qty_to_display = Math.round(qty_to_display)/1000;
				qty_to_display = qty_to_display.toFixed(1) + 'K';
			}

			function get_item_image_html() {
				if (!me.hide_images && item_image) {
					return ("<div class=\"item-qty-pill\">\n\t\t\t\t\t\t\t<span class=\"indicator-pill whitespace-nowrap " + indicator_color + "\">" + qty_to_display + "</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"flex items-center justify-center h-32 border-b-grey text-6xl text-grey-100\">\n\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\tonerror=\"cur_pos.item_selector.handle_broken_image(this)\"\n\t\t\t\t\t\t\t\tclass=\"h-full\" src=\"" + item_image + "\"\n\t\t\t\t\t\t\t\talt=\"" + (frappe.get_abbr(item.item_name)) + "\"\n\t\t\t\t\t\t\t\tstyle=\"object-fit: cover;\">\n\t\t\t\t\t\t</div>");
				} else {
					return ("<div class=\"item-qty-pill\">\n\t\t\t\t\t\t\t<span class=\"indicator-pill whitespace-nowrap " + indicator_color + "\">" + qty_to_display + "</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"item-display abbr\">" + (frappe.get_abbr(item.item_name)) + "</div>");
				}
			}

			return (
				("<div class=\"item-wrapper\"\n\t\t\t\tdata-item-code=\"" + (escape(item.item_code)) + "\" data-serial-no=\"" + (escape(serial_no)) + "\"\n\t\t\t\tdata-batch-no=\"" + (escape(batch_no)) + "\" data-uom=\"" + (escape(stock_uom)) + "\"\n\t\t\t\tdata-rate=\"" + (escape(price_list_rate)) + "\"\n\t\t\t\ttitle=\"" + (item.item_name) + "\">\n\n\t\t\t\t" + (get_item_image_html()) + "\n\n\t\t\t\t<div class=\"item-detail\">\n\t\t\t\t\t<div class=\"item-name\">\n\t\t\t\t\t\t" + (frappe.ellipsis(item.item_name, 18)) + "\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"item-rate\">" + (format_currency(price_list_rate, item.currency, precision) || 0) + "</div>\n\t\t\t\t</div>\n\t\t\t</div>")
			);
		}

		handle_broken_image($img) {
			var item_abbr = $($img).attr('alt');
			$($img).parent().replaceWith(("<div class=\"item-display abbr\">" + item_abbr + "</div>"));
		}

		make_search_bar() {
			var me = this;
			var doc = me.events.get_frm().doc;
			this.$component.find('.search-field').html('');
			this.$component.find('.item-group-field').html('');

			this.search_field = frappe.ui.form.make_control({
				df: {
					label: __('Search'),
					fieldtype: 'Data',
					placeholder: __('Search by item code, serial number or barcode')
				},
				parent: this.$component.find('.search-field'),
				render_input: true,
			});
			this.item_group_field = frappe.ui.form.make_control({
				df: {
					label: __('Item Group'),
					fieldtype: 'Link',
					options: 'Item Group',
					placeholder: __('Select item group'),
					onchange: function() {
						me.item_group = this.value;
						!me.item_group && (me.item_group = me.parent_item_group);
						me.filter_items();
					},
					get_query: function () {
						return {
							query: 'erpnext.selling.page.point_of_sale.point_of_sale.item_group_query',
							filters: {
								pos_profile: doc ? doc.pos_profile : ''
							}
						};
					},
				},
				parent: this.$component.find('.item-group-field'),
				render_input: true,
			});
			this.search_field.toggle_label(false);
			this.item_group_field.toggle_label(false);
		}

		set_search_value(value) {
			$(this.search_field.$input[0]).val(value).trigger("input");
		}

		bind_events() {
			var this$1 = this;

			var me = this;
			window.onScan = onscan;

			onscan.decodeKeyEvent = function (oEvent) {
				var iCode = this._getNormalizedKeyNum(oEvent);
				switch (true) {
					case iCode >= 48 && iCode <= 90: // numbers and letters
					case iCode >= 106 && iCode <= 111: // operations on numeric keypad (+, -, etc.)
					case (iCode >= 160 && iCode <= 164) || iCode == 170: // ^ ! # $ *
					case iCode >= 186 && iCode <= 194: // (; = , - . / `)
					case iCode >= 219 && iCode <= 222: // ([ \ ] ')
					case iCode == 32: // spacebar
						if (oEvent.key !== undefined && oEvent.key !== '') {
							return oEvent.key;
						}

						var sDecoded = String.fromCharCode(iCode);
						switch (oEvent.shiftKey) {
							case false: sDecoded = sDecoded.toLowerCase(); break;
							case true: sDecoded = sDecoded.toUpperCase(); break;
						}
						return sDecoded;
					case iCode >= 96 && iCode <= 105: // numbers on numeric keypad
						return 0 + (iCode - 96);
				}
				return '';
			};

			onscan.attachTo(document, {
				onScan: function (sScancode) {
					if (this$1.search_field && this$1.$component.is(':visible')) {
						this$1.search_field.set_focus();
						this$1.set_search_value(sScancode);
						this$1.barcode_scanned = true;
					}
				}
			});

			this.$component.on('click', '.item-wrapper', function() {
				var $item = $(this);
				var item_code = unescape($item.attr('data-item-code'));
				var batch_no = unescape($item.attr('data-batch-no'));
				var serial_no = unescape($item.attr('data-serial-no'));
				var uom = unescape($item.attr('data-uom'));
				var rate = unescape($item.attr('data-rate'));

				// escape(undefined) returns "undefined" then unescape returns "undefined"
				batch_no = batch_no === "undefined" ? undefined : batch_no;
				serial_no = serial_no === "undefined" ? undefined : serial_no;
				uom = uom === "undefined" ? undefined : uom;
				rate = rate === "undefined" ? undefined : rate;

				me.events.item_selected({
					field: 'qty',
					value: "+1",
					item: { item_code: item_code, batch_no: batch_no, serial_no: serial_no, uom: uom, rate: rate }
				});
				me.set_search_value('');
			});

			this.search_field.$input.on('input', function (e) {
				clearTimeout(this$1.last_search);
				this$1.last_search = setTimeout(function () {
					var search_term = e.target.value;
					this$1.filter_items({ search_term: search_term });
				}, 300);
			});
		}

		attach_shortcuts() {
			var this$1 = this;

			var ctrl_label = frappe.utils.is_mac() ? '⌘' : 'Ctrl';
			this.search_field.parent.attr("title", (ctrl_label + "+I"));
			frappe.ui.keys.add_shortcut({
				shortcut: "ctrl+i",
				action: function () { return this$1.search_field.set_focus(); },
				condition: function () { return this$1.$component.is(':visible'); },
				description: __("Focus on search input"),
				ignore_inputs: true,
				page: cur_page.page.page
			});
			this.item_group_field.parent.attr("title", (ctrl_label + "+G"));
			frappe.ui.keys.add_shortcut({
				shortcut: "ctrl+g",
				action: function () { return this$1.item_group_field.set_focus(); },
				condition: function () { return this$1.$component.is(':visible'); },
				description: __("Focus on Item Group filter"),
				ignore_inputs: true,
				page: cur_page.page.page
			});

			// for selecting the last filtered item on search
			frappe.ui.keys.on("enter", function () {
				var selector_is_visible = this$1.$component.is(':visible');
				if (!selector_is_visible || this$1.search_field.get_value() === "") { return; }

				if (this$1.items.length == 1) {
					this$1.$items_container.find(".item-wrapper").click();
					frappe.utils.play_sound("submit");
					$(this$1.search_field.$input[0]).val("").trigger("input");
				} else if (this$1.items.length == 0 && this$1.barcode_scanned) {
					// only show alert of barcode is scanned and enter is pressed
					frappe.show_alert({
						message: __("No items found. Scan barcode again."),
						indicator: 'orange'
					});
					frappe.utils.play_sound("error");
					this$1.barcode_scanned = false;
					$(this$1.search_field.$input[0]).val("").trigger("input");
				}
			});
		}

		filter_items(ref) {
			var this$1 = this;
			if ( ref === void 0 ) ref={};
			var search_term = ref.search_term; if ( search_term === void 0 ) search_term = '';

			if (search_term) {
				search_term = search_term.toLowerCase();

				// memoize
				this.search_index = this.search_index || {};
				if (this.search_index[search_term]) {
					var items = this.search_index[search_term];
					this.items = items;
					this.render_item_list(items);
					this.auto_add_item && this.items.length == 1 && this.add_filtered_item_to_cart();
					return;
				}
			}

			this.get_items({ search_term: search_term })
				.then(function (ref) {
					var message = ref.message;

					// eslint-disable-next-line no-unused-vars
					var items = message.items;
					var serial_no = message.serial_no;
					var batch_no = message.batch_no;
					var barcode = message.barcode;
					if (search_term && !barcode) {
						this$1.search_index[search_term] = items;
					}
					this$1.items = items;
					this$1.render_item_list(items);
					this$1.auto_add_item && this$1.items.length == 1 && this$1.add_filtered_item_to_cart();
				});
		}

		add_filtered_item_to_cart() {
			this.$items_container.find(".item-wrapper").click();
		}

		resize_selector(minimize) {
			minimize ?
				this.$component.find('.filter-section').css('grid-template-columns', 'repeat(1, minmax(0, 1fr))') :
				this.$component.find('.filter-section').css('grid-template-columns', 'repeat(12, minmax(0, 1fr))');

			minimize ?
				this.$component.find('.search-field').css('margin', 'var(--margin-sm) 0px') :
				this.$component.find('.search-field').css('margin', '0px var(--margin-sm)');

			minimize ?
				this.$component.css('grid-column', 'span 2 / span 2') :
				this.$component.css('grid-column', 'span 6 / span 6');

			minimize ?
				this.$items_container.css('grid-template-columns', 'repeat(1, minmax(0, 1fr))') :
				this.$items_container.css('grid-template-columns', 'repeat(4, minmax(0, 1fr))');
		}

		toggle_component(show) {
			show ? this.$component.css('display', 'flex') : this.$component.css('display', 'none');
		}
	};

	erpnext.PointOfSale.ItemCart = class {
		constructor(ref) {
		var wrapper = ref.wrapper;
		var events = ref.events;
		var settings = ref.settings;

			this.wrapper = wrapper;
			this.events = events;
			this.customer_info = undefined;
			this.hide_images = settings.hide_images;
			this.allowed_customer_groups = settings.customer_groups;
			this.allow_rate_change = settings.allow_rate_change;
			this.allow_discount_change = settings.allow_discount_change;
			this.init_component();
		}

		init_component() {
			this.prepare_dom();
			this.init_child_components();
			this.bind_events();
			this.attach_shortcuts();
		}

		prepare_dom() {
			this.wrapper.append(
				"<section class=\"customer-cart-container\"></section>"
			);

			this.$component = this.wrapper.find('.customer-cart-container');
		}

		init_child_components() {
			this.init_customer_selector();
			this.init_cart_components();
		}

		init_customer_selector() {
			this.$component.append(
				"<div class=\"customer-section\"></div>"
			);
			this.$customer_section = this.$component.find('.customer-section');
			this.make_customer_selector();
		}

		reset_customer_selector() {
			var frm = this.events.get_frm();
			frm.set_value('customer', '');
			this.make_customer_selector();
			this.customer_field.set_focus();
		}

		init_cart_components() {
			this.$component.append(
				"<div class=\"cart-container\">\n\t\t\t\t<div class=\"abs-cart-container\">\n\t\t\t\t\t<div class=\"cart-label\">Item Cart</div>\n\t\t\t\t\t<div class=\"cart-header\">\n\t\t\t\t\t\t<div class=\"name-header\">Item</div>\n\t\t\t\t\t\t<div class=\"qty-header\">Qty</div>\n\t\t\t\t\t\t<div class=\"rate-amount-header\">Amount</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"cart-items-section\"></div>\n\t\t\t\t\t<div class=\"cart-totals-section\"></div>\n\t\t\t\t\t<div class=\"numpad-section\"></div>\n\t\t\t\t</div>\n\t\t\t</div>"
			);
			this.$cart_container = this.$component.find('.cart-container');

			this.make_cart_totals_section();
			this.make_cart_items_section();
			this.make_cart_numpad();
		}

		make_cart_items_section() {
			this.$cart_header = this.$component.find('.cart-header');
			this.$cart_items_wrapper = this.$component.find('.cart-items-section');

			this.make_no_items_placeholder();
		}

		make_no_items_placeholder() {
			this.$cart_header.css('display', 'none');
			this.$cart_items_wrapper.html(
				"<div class=\"no-item-wrapper\">No items in cart</div>"
			);
		}

		get_discount_icon() {
			return (
				"<svg class=\"discount-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n\t\t\t\t<path d=\"M19 15.6213C19 15.2235 19.158 14.842 19.4393 14.5607L20.9393 13.0607C21.5251 12.4749 21.5251 11.5251 20.9393 10.9393L19.4393 9.43934C19.158 9.15804 19 8.7765 19 8.37868V6.5C19 5.67157 18.3284 5 17.5 5H15.6213C15.2235 5 14.842 4.84196 14.5607 4.56066L13.0607 3.06066C12.4749 2.47487 11.5251 2.47487 10.9393 3.06066L9.43934 4.56066C9.15804 4.84196 8.7765 5 8.37868 5H6.5C5.67157 5 5 5.67157 5 6.5V8.37868C5 8.7765 4.84196 9.15804 4.56066 9.43934L3.06066 10.9393C2.47487 11.5251 2.47487 12.4749 3.06066 13.0607L4.56066 14.5607C4.84196 14.842 5 15.2235 5 15.6213V17.5C5 18.3284 5.67157 19 6.5 19H8.37868C8.7765 19 9.15804 19.158 9.43934 19.4393L10.9393 20.9393C11.5251 21.5251 12.4749 21.5251 13.0607 20.9393L14.5607 19.4393C14.842 19.158 15.2235 19 15.6213 19H17.5C18.3284 19 19 18.3284 19 17.5V15.6213Z\" stroke-miterlimit=\"10\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n\t\t\t\t<path d=\"M15 9L9 15\" stroke-miterlimit=\"10\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n\t\t\t\t<path d=\"M10.5 9.5C10.5 10.0523 10.0523 10.5 9.5 10.5C8.94772 10.5 8.5 10.0523 8.5 9.5C8.5 8.94772 8.94772 8.5 9.5 8.5C10.0523 8.5 10.5 8.94772 10.5 9.5Z\" fill=\"white\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n\t\t\t\t<path d=\"M15.5 14.5C15.5 15.0523 15.0523 15.5 14.5 15.5C13.9477 15.5 13.5 15.0523 13.5 14.5C13.5 13.9477 13.9477 13.5 14.5 13.5C15.0523 13.5 15.5 13.9477 15.5 14.5Z\" fill=\"white\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n\t\t\t</svg>"
			);
		}

		make_cart_totals_section() {
			this.$totals_section = this.$component.find('.cart-totals-section');

			this.$totals_section.append(
				("<div class=\"add-discount-wrapper\">\n\t\t\t\t" + (this.get_discount_icon()) + " Add Discount\n\t\t\t</div>\n\t\t\t<div class=\"net-total-container\">\n\t\t\t\t<div class=\"net-total-label\">Net Total</div>\n\t\t\t\t<div class=\"net-total-value\">0.00</div>\n\t\t\t</div>\n\t\t\t<div class=\"taxes-container\"></div>\n\t\t\t<div class=\"grand-total-container\">\n\t\t\t\t<div>Grand Total</div>\n\t\t\t\t<div>0.00</div>\n\t\t\t</div>\n\t\t\t<div class=\"checkout-btn\">Checkout</div>\n\t\t\t<div class=\"edit-cart-btn\">Edit Cart</div>")
			);

			this.$add_discount_elem = this.$component.find(".add-discount-wrapper");
		}

		make_cart_numpad() {
			this.$numpad_section = this.$component.find('.numpad-section');

			this.number_pad = new erpnext.PointOfSale.NumberPad({
				wrapper: this.$numpad_section,
				events: {
					numpad_event: this.on_numpad_event.bind(this)
				},
				cols: 5,
				keys: [
					[ 1, 2, 3, 'Quantity' ],
					[ 4, 5, 6, 'Discount' ],
					[ 7, 8, 9, 'Rate' ],
					[ '.', 0, 'Delete', 'Remove' ]
				],
				css_classes: [
					[ '', '', '', 'col-span-2' ],
					[ '', '', '', 'col-span-2' ],
					[ '', '', '', 'col-span-2' ],
					[ '', '', '', 'col-span-2 remove-btn' ]
				],
				fieldnames_map: { 'Quantity': 'qty', 'Discount': 'discount_percentage' }
			});

			this.$numpad_section.prepend(
				"<div class=\"numpad-totals\">\n\t\t\t\t<span class=\"numpad-net-total\"></span>\n\t\t\t\t<span class=\"numpad-grand-total\"></span>\n\t\t\t</div>"
			);

			this.$numpad_section.append(
				"<div class=\"numpad-btn checkout-btn\" data-button-value=\"checkout\">Checkout</div>"
			);
		}

		bind_events() {
			var this$1 = this;

			var me = this;
			this.$customer_section.on('click', '.reset-customer-btn', function () {
				me.reset_customer_selector();
			});

			this.$customer_section.on('click', '.close-details-btn', function () {
				me.toggle_customer_info(false);
			});

			this.$customer_section.on('click', '.customer-display', function(e) {
				if ($(e.target).closest('.reset-customer-btn').length) { return; }

				var show = me.$cart_container.is(':visible');
				me.toggle_customer_info(show);
			});

			this.$cart_items_wrapper.on('click', '.cart-item-wrapper', function() {
				var $cart_item = $(this);

				me.toggle_item_highlight(this);

				var payment_section_hidden = !me.$totals_section.find('.edit-cart-btn').is(':visible');
				if (!payment_section_hidden) {
					// payment section is visible
					// edit cart first and then open item details section
					me.$totals_section.find(".edit-cart-btn").click();
				}

				var item_row_name = unescape($cart_item.attr('data-row-name'));
				me.events.cart_item_clicked({ name: item_row_name });
				this.numpad_value = '';
			});

			this.$component.on('click', '.checkout-btn', function() {
				if ($(this).attr('style').indexOf('--blue-500') == -1) { return; }

				me.events.checkout();
				me.toggle_checkout_btn(false);

				me.allow_discount_change && me.$add_discount_elem.removeClass("d-none");
			});

			this.$totals_section.on('click', '.edit-cart-btn', function () {
				this$1.events.edit_cart();
				this$1.toggle_checkout_btn(true);
			});

			this.$component.on('click', '.add-discount-wrapper', function () {
				var can_edit_discount = this$1.$add_discount_elem.find('.edit-discount-btn').length;

				if(!this$1.discount_field || can_edit_discount) { this$1.show_discount_control(); }
			});

			frappe.ui.form.on("POS Invoice", "paid_amount", function (frm) {
				// called when discount is applied
				this$1.update_totals_section(frm);
			});
		}

		attach_shortcuts() {
			var this$1 = this;

			for (var i$1 = 0, list$1 = this.number_pad.keys; i$1 < list$1.length; i$1 += 1) {
				var loop = function () {
					var btn = list[i];

					if (typeof btn !== 'string') { return; } // do not make shortcuts for numbers

					var shortcut_key = "ctrl+" + (frappe.scrub(String(btn))[0]);
					if (btn === 'Delete') { shortcut_key = 'ctrl+backspace'; }
					if (btn === 'Remove') { shortcut_key = 'shift+ctrl+backspace'; }
					if (btn === '.') { shortcut_key = 'ctrl+>'; }

					// to account for fieldname map
					var fieldname = this$1.number_pad.fieldnames[btn] ? this$1.number_pad.fieldnames[btn] :
						typeof btn === 'string' ? frappe.scrub(btn) : btn;

					var shortcut_label = shortcut_key.split('+').map(frappe.utils.to_title_case).join('+');
					shortcut_label = frappe.utils.is_mac() ? shortcut_label.replace('Ctrl', '⌘') : shortcut_label;
					this$1.$numpad_section.find((".numpad-btn[data-button-value=\"" + fieldname + "\"]")).attr("title", shortcut_label);

					frappe.ui.keys.on(("" + shortcut_key), function () {
						var cart_is_visible = this$1.$component.is(":visible");
						if (cart_is_visible && this$1.item_is_selected && this$1.$numpad_section.is(":visible")) {
							this$1.$numpad_section.find((".numpad-btn[data-button-value=\"" + fieldname + "\"]")).click();
						}
					});
				};

				var row = list$1[i$1];

				for (var i = 0, list = row; i < list.length; i += 1) loop();
			}
			var ctrl_label = frappe.utils.is_mac() ? '⌘' : 'Ctrl';
			this.$component.find(".checkout-btn").attr("title", (ctrl_label + "+Enter"));
			frappe.ui.keys.add_shortcut({
				shortcut: "ctrl+enter",
				action: function () { return this$1.$component.find(".checkout-btn").click(); },
				condition: function () { return this$1.$component.is(":visible") && !this$1.$totals_section.find('.edit-cart-btn').is(':visible'); },
				description: __("Checkout Order / Submit Order / New Order"),
				ignore_inputs: true,
				page: cur_page.page.page
			});
			this.$component.find(".edit-cart-btn").attr("title", (ctrl_label + "+E"));
			frappe.ui.keys.on("ctrl+e", function () {
				var item_cart_visible = this$1.$component.is(":visible");
				var checkout_btn_invisible = !this$1.$totals_section.find('.checkout-btn').is('visible');
				if (item_cart_visible && checkout_btn_invisible) {
					this$1.$component.find(".edit-cart-btn").click();
				}
			});
			this.$component.find(".add-discount-wrapper").attr("title", (ctrl_label + "+D"));
			frappe.ui.keys.add_shortcut({
				shortcut: "ctrl+d",
				action: function () { return this$1.$component.find(".add-discount-wrapper").click(); },
				condition: function () { return this$1.$add_discount_elem.is(":visible"); },
				description: __("Add Order Discount"),
				ignore_inputs: true,
				page: cur_page.page.page
			});
			frappe.ui.keys.on("escape", function () {
				var item_cart_visible = this$1.$component.is(":visible");
				if (item_cart_visible && this$1.discount_field && this$1.discount_field.parent.is(":visible")) {
					this$1.discount_field.set_value(0);
				}
			});
		}

		toggle_item_highlight(item) {
			var $cart_item = $(item);
			var item_is_highlighted = $cart_item.attr("style") == "background-color:var(--gray-50);";

			if (!item || item_is_highlighted) {
				this.item_is_selected = false;
				this.$cart_container.find('.cart-item-wrapper').css("background-color", "");
			} else {
				$cart_item.css("background-color", "var(--gray-50)");
				this.item_is_selected = true;
				this.$cart_container.find('.cart-item-wrapper').not(item).css("background-color", "");
			}
		}

		make_customer_selector() {
			this.$customer_section.html("\n\t\t\t<div class=\"customer-field\"></div>\n\t\t");
			var me = this;
			var query = { query: 'erpnext.controllers.queries.customer_query' };
			var allowed_customer_group = this.allowed_customer_groups || [];
			if (allowed_customer_group.length) {
				query.filters = {
					customer_group: ['in', allowed_customer_group]
				};
			}
			this.customer_field = frappe.ui.form.make_control({
				df: {
					label: __('Customer'),
					fieldtype: 'Link',
					options: 'Customer',
					placeholder: __('Search by customer name, phone, email.'),
					get_query: function () { return query; },
					onchange: function() {
						var this$1 = this;

						if (this.value) {
							var frm = me.events.get_frm();
							frappe.dom.freeze();
							frappe.model.set_value(frm.doc.doctype, frm.doc.name, 'customer', this.value);
							frm.script_manager.trigger('customer', frm.doc.doctype, frm.doc.name).then(function () {
								frappe.run_serially([
									function () { return me.fetch_customer_details(this$1.value); },
									function () { return me.events.customer_details_updated(me.customer_info); },
									function () { return me.update_customer_section(); },
									function () { return me.update_totals_section(); },
									function () { return frappe.dom.unfreeze(); }
								]);
							});
						}
					},
				},
				parent: this.$customer_section.find('.customer-field'),
				render_input: true,
			});
			this.customer_field.toggle_label(false);
		}

		fetch_customer_details(customer) {
			var this$1 = this;

			if (customer) {
				return new Promise(function (resolve) {
					frappe.db.get_value('Customer', customer, ["email_id", "mobile_no", "image", "loyalty_program"]).then(function (ref) {
						var message = ref.message;

						var loyalty_program = message.loyalty_program;
						// if loyalty program then fetch loyalty points too
						if (loyalty_program) {
							frappe.call({
								method: "erpnext.accounts.doctype.loyalty_program.loyalty_program.get_loyalty_program_details_with_points",
								args: { customer: customer, loyalty_program: loyalty_program, "silent": true },
								callback: function (r) {
									var ref = r.message;
									var loyalty_points = ref.loyalty_points;
									var conversion_factor = ref.conversion_factor;
									if (!r.exc) {
										this$1.customer_info = Object.assign({}, message, {customer: customer, loyalty_points: loyalty_points, conversion_factor: conversion_factor});
										resolve();
									}
								}
							});
						} else {
							this$1.customer_info = Object.assign({}, message, {customer: customer});
							resolve();
						}
					});
				});
			} else {
				return new Promise(function (resolve) {
					this$1.customer_info = {};
					resolve();
				});
			}
		}

		show_discount_control() {
			this.$add_discount_elem.css({ 'padding': '0px', 'border': 'none' });
			this.$add_discount_elem.html(
				"<div class=\"add-discount-field\"></div>"
			);
			var me = this;
			var frm = me.events.get_frm();
			var discount = frm.doc.additional_discount_percentage;

			this.discount_field = frappe.ui.form.make_control({
				df: {
					label: __('Discount'),
					fieldtype: 'Data',
					placeholder: ( discount ? discount + '%' :  __('Enter discount percentage.') ),
					input_class: 'input-xs',
					onchange: function() {
						if (flt(this.value) != 0) {
							frappe.model.set_value(frm.doc.doctype, frm.doc.name, 'additional_discount_percentage', flt(this.value));
							me.hide_discount_control(this.value);
						} else {
							frappe.model.set_value(frm.doc.doctype, frm.doc.name, 'additional_discount_percentage', 0);
							me.$add_discount_elem.css({
								'border': '1px dashed var(--gray-500)',
								'padding': 'var(--padding-sm) var(--padding-md)'
							});
							me.$add_discount_elem.html(((me.get_discount_icon()) + " Add Discount"));
							me.discount_field = undefined;
						}
					},
				},
				parent: this.$add_discount_elem.find('.add-discount-field'),
				render_input: true,
			});
			this.discount_field.toggle_label(false);
			this.discount_field.set_focus();
		}

		hide_discount_control(discount) {
			if (!discount) {
				this.$add_discount_elem.css({ 'padding': '0px', 'border': 'none' });
				this.$add_discount_elem.html(
					"<div class=\"add-discount-field\"></div>"
				);
			} else {
				this.$add_discount_elem.css({
					'border': '1px dashed var(--dark-green-500)',
					'padding': 'var(--padding-sm) var(--padding-md)'
				});
				this.$add_discount_elem.html(
					("<div class=\"edit-discount-btn\">\n\t\t\t\t\t" + (this.get_discount_icon()) + " Additional&nbsp;" + (String(discount).bold()) + "% discount applied\n\t\t\t\t</div>")
				);
			}
		}

		update_customer_section() {
			var ref = this.customer_info || {};
			var customer = ref.customer;
			var email_id = ref.email_id; if ( email_id === void 0 ) email_id = '';
			var mobile_no = ref.mobile_no; if ( mobile_no === void 0 ) mobile_no = '';
			var image = ref.image;

			if (customer) {
				this.$customer_section.html(
					("<div class=\"customer-details\">\n\t\t\t\t\t<div class=\"customer-display\">\n\t\t\t\t\t\t" + (this.get_customer_image()) + "\n\t\t\t\t\t\t<div class=\"customer-name-desc\">\n\t\t\t\t\t\t\t<div class=\"customer-name\">" + customer + "</div>\n\t\t\t\t\t\t\t" + (get_customer_description()) + "\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"reset-customer-btn\" data-customer=\"" + (escape(customer)) + "\">\n\t\t\t\t\t\t\t<svg width=\"32\" height=\"32\" viewBox=\"0 0 14 14\" fill=\"none\">\n\t\t\t\t\t\t\t\t<path d=\"M4.93764 4.93759L7.00003 6.99998M9.06243 9.06238L7.00003 6.99998M7.00003 6.99998L4.93764 9.06238L9.06243 4.93759\" stroke=\"#8D99A6\"/>\n\t\t\t\t\t\t\t</svg>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>")
				);
			} else {
				// reset customer selector
				this.reset_customer_selector();
			}

			function get_customer_description() {
				if (!email_id && !mobile_no) {
					return "<div class=\"customer-desc\">Click to add email / phone</div>";
				} else if (email_id && !mobile_no) {
					return ("<div class=\"customer-desc\">" + email_id + "</div>");
				} else if (mobile_no && !email_id) {
					return ("<div class=\"customer-desc\">" + mobile_no + "</div>");
				} else {
					return ("<div class=\"customer-desc\">" + email_id + " - " + mobile_no + "</div>");
				}
			}

		}

		get_customer_image() {
			var ref = this.customer_info || {};
			var customer = ref.customer;
			var image = ref.image;
			if (image) {
				return ("<div class=\"customer-image\"><img src=\"" + image + "\" alt=\"" + image + "\"\"></div>");
			} else {
				return ("<div class=\"customer-image customer-abbr\">" + (frappe.get_abbr(customer)) + "</div>");
			}
		}

		update_totals_section(frm) {
			if (!frm) { frm = this.events.get_frm(); }

			this.render_net_total(frm.doc.net_total);
			var grand_total = cint(frappe.sys_defaults.disable_rounded_total) ? frm.doc.grand_total : frm.doc.rounded_total;
			this.render_grand_total(grand_total);

			this.render_taxes(frm.doc.taxes);
		}

		render_net_total(value) {
			var currency = this.events.get_frm().doc.currency;
			this.$totals_section.find('.net-total-container').html(
				("<div>Net Total</div><div>" + (format_currency(value, currency)) + "</div>")
			);

			this.$numpad_section.find('.numpad-net-total').html(
				("<div>Net Total: <span>" + (format_currency(value, currency)) + "</span></div>")
			);
		}

		render_grand_total(value) {
			var currency = this.events.get_frm().doc.currency;
			this.$totals_section.find('.grand-total-container').html(
				("<div>Grand Total</div><div>" + (format_currency(value, currency)) + "</div>")
			);

			this.$numpad_section.find('.numpad-grand-total').html(
				("<div>Grand Total: <span>" + (format_currency(value, currency)) + "</span></div>")
			);
		}

		render_taxes(taxes) {
			if (taxes.length) {
				var currency = this.events.get_frm().doc.currency;
				var taxes_html = taxes.map(function (t) {
					var description = /[0-9]+/.test(t.description) ? t.description : ((t.description) + " @ " + (t.rate) + "%");
					return ("<div class=\"tax-row\">\n\t\t\t\t\t<div class=\"tax-label\">" + description + "</div>\n\t\t\t\t\t<div class=\"tax-value\">" + (format_currency(t.tax_amount_after_discount_amount, currency)) + "</div>\n\t\t\t\t</div>");
				}).join('');
				this.$totals_section.find('.taxes-container').css('display', 'flex').html(taxes_html);
			} else {
				this.$totals_section.find('.taxes-container').css('display', 'none').html('');
			}
		}

		get_cart_item(ref) {
			var name = ref.name;

			var item_selector = ".cart-item-wrapper[data-row-name=\"" + (escape(name)) + "\"]";
			return this.$cart_items_wrapper.find(item_selector);
		}

		get_item_from_frm(item) {
			var doc = this.events.get_frm().doc;
			return doc.items.find(function (i) { return i.name == item.name; });
		}

		update_item_html(item, remove_item) {
			var $item = this.get_cart_item(item);

			if (remove_item) {
				$item && $item.next().remove() && $item.remove();
			} else {
				var item_row = this.get_item_from_frm(item);
				this.render_cart_item(item_row, $item);
			}

			var no_of_cart_items = this.$cart_items_wrapper.find('.cart-item-wrapper').length;
			this.highlight_checkout_btn(no_of_cart_items > 0);

			this.update_empty_cart_section(no_of_cart_items);
		}

		render_cart_item(item_data, $item_to_update) {
			var currency = this.events.get_frm().doc.currency;
			var me = this;

			if (!$item_to_update.length) {
				this.$cart_items_wrapper.append(
					("<div class=\"cart-item-wrapper\" data-row-name=\"" + (escape(item_data.name)) + "\"></div>\n\t\t\t\t<div class=\"seperator\"></div>")
				);
				$item_to_update = this.get_cart_item(item_data);
			}

			$item_to_update.html(
				((get_item_image_html()) + "\n\t\t\t<div class=\"item-name-desc\">\n\t\t\t\t<div class=\"item-name\">\n\t\t\t\t\t" + (item_data.item_name) + "\n\t\t\t\t</div>\n\t\t\t\t" + (get_description_html()) + "\n\t\t\t</div>\n\t\t\t" + (get_rate_discount_html()))
			);

			set_dynamic_rate_header_width();

			function set_dynamic_rate_header_width() {
				var rate_cols = Array.from(me.$cart_items_wrapper.find(".item-rate-amount"));
				me.$cart_header.find(".rate-amount-header").css("width", "");
				me.$cart_items_wrapper.find(".item-rate-amount").css("width", "");
				var max_width = rate_cols.reduce(function (max_width, elm) {
					if ($(elm).width() > max_width)
						{ max_width = $(elm).width(); }
					return max_width;
				}, 0);

				max_width += 1;
				if (max_width == 1) { max_width = ""; }

				me.$cart_header.find(".rate-amount-header").css("width", max_width);
				me.$cart_items_wrapper.find(".item-rate-amount").css("width", max_width);
			}

			function get_rate_discount_html() {
				if (item_data.rate && item_data.amount && item_data.rate !== item_data.amount) {
					return ("\n\t\t\t\t\t<div class=\"item-qty-rate\">\n\t\t\t\t\t\t<div class=\"item-qty\"><span>" + (item_data.qty || 0) + "</span></div>\n\t\t\t\t\t\t<div class=\"item-rate-amount\">\n\t\t\t\t\t\t\t<div class=\"item-rate\">" + (format_currency(item_data.amount, currency)) + "</div>\n\t\t\t\t\t\t\t<div class=\"item-amount\">" + (format_currency(item_data.rate, currency)) + "</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>")
				} else {
					return ("\n\t\t\t\t\t<div class=\"item-qty-rate\">\n\t\t\t\t\t\t<div class=\"item-qty\"><span>" + (item_data.qty || 0) + "</span></div>\n\t\t\t\t\t\t<div class=\"item-rate-amount\">\n\t\t\t\t\t\t\t<div class=\"item-rate\">" + (format_currency(item_data.rate, currency)) + "</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>")
				}
			}

			function get_description_html() {
				if (item_data.description) {
					if (item_data.description.indexOf('<div>') != -1) {
						try {
							item_data.description = $(item_data.description).text();
						} catch (error) {
							item_data.description = item_data.description.replace(/<div>/g, ' ').replace(/<\/div>/g, ' ').replace(/ +/g, ' ');
						}
					}
					item_data.description = frappe.ellipsis(item_data.description, 45);
					return ("<div class=\"item-desc\">" + (item_data.description) + "</div>");
				}
				return "";
			}

			function get_item_image_html() {
				var image = item_data.image;
				var item_name = item_data.item_name;
				if (!me.hide_images && image) {
					return ("\n\t\t\t\t\t<div class=\"item-image\">\n\t\t\t\t\t\t<img\n\t\t\t\t\t\t\tonerror=\"cur_pos.cart.handle_broken_image(this)\"\n\t\t\t\t\t\t\tsrc=\"" + image + "\" alt=\"" + (frappe.get_abbr(item_name)) + "\"\">\n\t\t\t\t\t</div>");
				} else {
					return ("<div class=\"item-image item-abbr\">" + (frappe.get_abbr(item_name)) + "</div>");
				}
			}
		}

		handle_broken_image($img) {
			var item_abbr = $($img).attr('alt');
			$($img).parent().replaceWith(("<div class=\"item-image item-abbr\">" + item_abbr + "</div>"));
		}

		update_selector_value_in_cart_item(selector, value, item) {
			var $item_to_update = this.get_cart_item(item);
			$item_to_update.attr(("data-" + selector), escape(value));
		}

		toggle_checkout_btn(show_checkout) {
			if (show_checkout) {
				this.$totals_section.find('.checkout-btn').css('display', 'flex');
				this.$totals_section.find('.edit-cart-btn').css('display', 'none');
			} else {
				this.$totals_section.find('.checkout-btn').css('display', 'none');
				this.$totals_section.find('.edit-cart-btn').css('display', 'flex');
			}
		}

		highlight_checkout_btn(toggle) {
			if (toggle) {
				this.$add_discount_elem.css('display', 'flex');
				this.$cart_container.find('.checkout-btn').css({
					'background-color': 'var(--blue-500)'
				});
			} else {
				this.$add_discount_elem.css('display', 'none');
				this.$cart_container.find('.checkout-btn').css({
					'background-color': 'var(--blue-200)'
				});
			}
		}

		update_empty_cart_section(no_of_cart_items) {
			var $no_item_element = this.$cart_items_wrapper.find('.no-item-wrapper');

			// if cart has items and no item is present
			no_of_cart_items > 0 && $no_item_element && $no_item_element.remove() && this.$cart_header.css('display', 'flex');

			no_of_cart_items === 0 && !$no_item_element.length && this.make_no_items_placeholder();
		}

		on_numpad_event($btn) {
			var current_action = $btn.attr('data-button-value');
			var action_is_field_edit = ['qty', 'discount_percentage', 'rate'].includes(current_action);
			var action_is_allowed = action_is_field_edit ? (
				(current_action == 'rate' && this.allow_rate_change) ||
				(current_action == 'discount_percentage' && this.allow_discount_change) ||
				(current_action == 'qty')) : true;

			var action_is_pressed_twice = this.prev_action === current_action;
			var first_click_event = !this.prev_action;
			var field_to_edit_changed = this.prev_action && this.prev_action != current_action;

			if (action_is_field_edit) {
				if (!action_is_allowed) {
					var label = current_action == 'rate' ? 'Rate'.bold() : 'Discount'.bold();
					var message = __('Editing {0} is not allowed as per POS Profile settings', [label]);
					frappe.show_alert({
						indicator: 'red',
						message: message
					});
					frappe.utils.play_sound("error");
					return;
				}

				if (first_click_event || field_to_edit_changed) {
					this.prev_action = current_action;
				} else if (action_is_pressed_twice) {
					this.prev_action = undefined;
				}
				this.numpad_value = '';

			} else if (current_action === 'checkout') {
				this.prev_action = undefined;
				this.toggle_item_highlight();
				this.events.numpad_event(undefined, current_action);
				return;
			} else if (current_action === 'remove') {
				this.prev_action = undefined;
				this.toggle_item_highlight();
				this.events.numpad_event(undefined, current_action);
				return;
			} else {
				this.numpad_value = current_action === 'delete' ? this.numpad_value.slice(0, -1) : this.numpad_value + current_action;
				this.numpad_value = this.numpad_value || 0;
			}

			var first_click_event_is_not_field_edit = !action_is_field_edit && first_click_event;

			if (first_click_event_is_not_field_edit) {
				frappe.show_alert({
					indicator: 'red',
					message: __('Please select a field to edit from numpad')
				});
				frappe.utils.play_sound("error");
				return;
			}

			if (flt(this.numpad_value) > 100 && this.prev_action === 'discount_percentage') {
				frappe.show_alert({
					message: __('Discount cannot be greater than 100%'),
					indicator: 'orange'
				});
				frappe.utils.play_sound("error");
				this.numpad_value = current_action;
			}

			this.highlight_numpad_btn($btn, current_action);
			this.events.numpad_event(this.numpad_value, this.prev_action);
		}

		highlight_numpad_btn($btn, curr_action) {
			var curr_action_is_highlighted = $btn.hasClass('highlighted-numpad-btn');
			var curr_action_is_action = ['qty', 'discount_percentage', 'rate', 'done'].includes(curr_action);

			if (!curr_action_is_highlighted) {
				$btn.addClass('highlighted-numpad-btn');
			}
			if (this.prev_action === curr_action && curr_action_is_highlighted) {
				// if Qty is pressed twice
				$btn.removeClass('highlighted-numpad-btn');
			}
			if (this.prev_action && this.prev_action !== curr_action && curr_action_is_action) {
				// Order: Qty -> Rate then remove Qty highlight
				var prev_btn = $(("[data-button-value='" + (this.prev_action) + "']"));
				prev_btn.removeClass('highlighted-numpad-btn');
			}
			if (!curr_action_is_action || curr_action === 'done') {
				// if numbers are clicked
				setTimeout(function () {
					$btn.removeClass('highlighted-numpad-btn');
				}, 200);
			}
		}

		toggle_numpad(show) {
			if (show) {
				this.$totals_section.css('display', 'none');
				this.$numpad_section.css('display', 'flex');
			} else {
				this.$totals_section.css('display', 'flex');
				this.$numpad_section.css('display', 'none');
			}
			this.reset_numpad();
		}

		reset_numpad() {
			this.numpad_value = '';
			this.prev_action = undefined;
			this.$numpad_section.find('.highlighted-numpad-btn').removeClass('highlighted-numpad-btn');
		}

		toggle_numpad_field_edit(fieldname) {
			if (['qty', 'discount_percentage', 'rate'].includes(fieldname)) {
				this.$numpad_section.find(("[data-button-value=\"" + fieldname + "\"]")).click();
			}
		}

		toggle_customer_info(show) {
			if (show) {
				var ref = this.customer_info || {};
				var customer = ref.customer;

				this.$cart_container.css('display', 'none');
				this.$customer_section.css({
					'height': '100%',
					'padding-top': '0px'
				});
				this.$customer_section.find('.customer-details').html(
					("<div class=\"header\">\n\t\t\t\t\t<div class=\"label\">Contact Details</div>\n\t\t\t\t\t<div class=\"close-details-btn\">\n\t\t\t\t\t\t<svg width=\"32\" height=\"32\" viewBox=\"0 0 14 14\" fill=\"none\">\n\t\t\t\t\t\t\t<path d=\"M4.93764 4.93759L7.00003 6.99998M9.06243 9.06238L7.00003 6.99998M7.00003 6.99998L4.93764 9.06238L9.06243 4.93759\" stroke=\"#8D99A6\"/>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"customer-display\">\n\t\t\t\t\t" + (this.get_customer_image()) + "\n\t\t\t\t\t<div class=\"customer-name-desc\">\n\t\t\t\t\t\t<div class=\"customer-name\">" + customer + "</div>\n\t\t\t\t\t\t<div class=\"customer-desc\"></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"customer-fields-container\">\n\t\t\t\t\t<div class=\"email_id-field\"></div>\n\t\t\t\t\t<div class=\"mobile_no-field\"></div>\n\t\t\t\t\t<div class=\"loyalty_program-field\"></div>\n\t\t\t\t\t<div class=\"loyalty_points-field\"></div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"transactions-label\">Recent Transactions</div>")
				);
				// transactions need to be in diff div from sticky elem for scrolling
				this.$customer_section.append("<div class=\"customer-transactions\"></div>");

				this.render_customer_fields();
				this.fetch_customer_transactions();

			} else {
				this.$cart_container.css('display', 'flex');
				this.$customer_section.css({
					'height': '',
					'padding-top': ''
				});

				this.update_customer_section();
			}
		}

		render_customer_fields() {
			var this$1 = this;

			var $customer_form = this.$customer_section.find('.customer-fields-container');

			var dfs = [{
				fieldname: 'email_id',
				label: __('Email'),
				fieldtype: 'Data',
				options: 'email',
				placeholder: __("Enter customer's email")
			},{
				fieldname: 'mobile_no',
				label: __('Phone Number'),
				fieldtype: 'Data',
				placeholder: __("Enter customer's phone number")
			},{
				fieldname: 'loyalty_program',
				label: __('Loyalty Program'),
				fieldtype: 'Link',
				options: 'Loyalty Program',
				placeholder: __("Select Loyalty Program")
			},{
				fieldname: 'loyalty_points',
				label: __('Loyalty Points'),
				fieldtype: 'Data',
				read_only: 1
			}];

			var me = this;
			dfs.forEach(function (df) {
				this$1[("customer_" + (df.fieldname) + "_field")] = frappe.ui.form.make_control({
					df: Object.assign({}, df,
						{onchange: handle_customer_field_change}),
					parent: $customer_form.find(("." + (df.fieldname) + "-field")),
					render_input: true,
				});
				this$1[("customer_" + (df.fieldname) + "_field")].set_value(this$1.customer_info[df.fieldname]);
			});

			function handle_customer_field_change() {
				var this$1 = this;

				var current_value = me.customer_info[this.df.fieldname];
				var current_customer = me.customer_info.customer;

				if (this.value && current_value != this.value && this.df.fieldname != 'loyalty_points') {
					frappe.call({
						method: 'erpnext.selling.page.point_of_sale.point_of_sale.set_customer_info',
						args: {
							fieldname: this.df.fieldname,
							customer: current_customer,
							value: this.value
						},
						callback: function (r) {
							if(!r.exc) {
								me.customer_info[this$1.df.fieldname] = this$1.value;
								frappe.show_alert({
									message: __("Customer contact updated successfully."),
									indicator: 'green'
								});
								frappe.utils.play_sound("submit");
							}
						}
					});
				}
			}
		}

		fetch_customer_transactions() {
			var this$1 = this;

			frappe.db.get_list('POS Invoice', {
				filters: { customer: this.customer_info.customer, docstatus: 1 },
				fields: ['name', 'grand_total', 'status', 'posting_date', 'posting_time', 'currency'],
				limit: 20
			}).then(function (res) {
				var transaction_container = this$1.$customer_section.find('.customer-transactions');

				if (!res.length) {
					transaction_container.html(
						"<div class=\"no-transactions-placeholder\">No recent transactions found</div>"
					);
					return;
				}
				var elapsed_time = moment(res[0].posting_date+" "+res[0].posting_time).fromNow();
				this$1.$customer_section.find('.customer-desc').html(("Last transacted " + elapsed_time));

				res.forEach(function (invoice) {
					var posting_datetime = moment(invoice.posting_date+" "+invoice.posting_time).format("Do MMMM, h:mma");
					var indicator_color = {
						'Paid': 'green',
						'Draft': 'red',
						'Return': 'gray',
						'Consolidated': 'blue'
					};

					transaction_container.append(
						("<div class=\"invoice-wrapper\" data-invoice-name=\"" + (escape(invoice.name)) + "\">\n\t\t\t\t\t\t<div class=\"invoice-name-date\">\n\t\t\t\t\t\t\t<div class=\"invoice-name\">" + (invoice.name) + "</div>\n\t\t\t\t\t\t\t<div class=\"invoice-date\">" + posting_datetime + "</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"invoice-total-status\">\n\t\t\t\t\t\t\t<div class=\"invoice-total\">\n\t\t\t\t\t\t\t\t" + (format_currency(invoice.grand_total, invoice.currency, 0) || 0) + "\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"invoice-status\">\n\t\t\t\t\t\t\t\t<span class=\"indicator-pill whitespace-nowrap " + (indicator_color[invoice.status]) + "\">\n\t\t\t\t\t\t\t\t\t<span>" + (invoice.status) + "</span>\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"seperator\"></div>")
					);
				});
			});
		}

		attach_refresh_field_event(frm) {
			var this$1 = this;

			$(frm.wrapper).off('refresh-fields');
			$(frm.wrapper).on('refresh-fields', function () {
				if (frm.doc.items.length) {
					frm.doc.items.forEach(function (item) {
						this$1.update_item_html(item);
					});
				}
				this$1.update_totals_section(frm);
			});
		}

		load_invoice() {
			var this$1 = this;

			var frm = this.events.get_frm();

			this.attach_refresh_field_event(frm);

			this.fetch_customer_details(frm.doc.customer).then(function () {
				this$1.events.customer_details_updated(this$1.customer_info);
				this$1.update_customer_section();
			});

			this.$cart_items_wrapper.html('');
			if (frm.doc.items.length) {
				frm.doc.items.forEach(function (item) {
					this$1.update_item_html(item);
				});
			} else {
				this.make_no_items_placeholder();
				this.highlight_checkout_btn(false);
			}

			this.update_totals_section(frm);

			if(frm.doc.docstatus === 1) {
				this.$totals_section.find('.checkout-btn').css('display', 'none');
				this.$totals_section.find('.edit-cart-btn').css('display', 'none');
			} else {
				this.$totals_section.find('.checkout-btn').css('display', 'flex');
				this.$totals_section.find('.edit-cart-btn').css('display', 'none');
			}

			this.toggle_component(true);
		}

		toggle_component(show) {
			show ? this.$component.css('display', 'flex') : this.$component.css('display', 'none');
		}

	};

	erpnext.PointOfSale.ItemDetails = class {
		constructor(ref) {
		var wrapper = ref.wrapper;
		var events = ref.events;
		var settings = ref.settings;

			this.wrapper = wrapper;
			this.events = events;
			this.hide_images = settings.hide_images;
			this.allow_rate_change = settings.allow_rate_change;
			this.allow_discount_change = settings.allow_discount_change;
			this.current_item = {};

			this.init_component();
		}

		init_component() {
			this.prepare_dom();
			this.init_child_components();
			this.bind_events();
			this.attach_shortcuts();
		}

		prepare_dom() {
			this.wrapper.append(
				"<section class=\"item-details-container\"></section>"
			);

			this.$component = this.wrapper.find('.item-details-container');
		}

		init_child_components() {
			this.$component.html(
				"<div class=\"item-details-header\">\n\t\t\t\t<div class=\"label\">Item Details</div>\n\t\t\t\t<div class=\"close-btn\">\n\t\t\t\t\t<svg width=\"32\" height=\"32\" viewBox=\"0 0 14 14\" fill=\"none\">\n\t\t\t\t\t\t<path d=\"M4.93764 4.93759L7.00003 6.99998M9.06243 9.06238L7.00003 6.99998M7.00003 6.99998L4.93764 9.06238L9.06243 4.93759\" stroke=\"#8D99A6\"/>\n\t\t\t\t\t</svg>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"item-display\">\n\t\t\t\t<div class=\"item-name-desc-price\">\n\t\t\t\t\t<div class=\"item-name\"></div>\n\t\t\t\t\t<div class=\"item-desc\"></div>\n\t\t\t\t\t<div class=\"item-price\"></div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"item-image\"></div>\n\t\t\t</div>\n\t\t\t<div class=\"discount-section\"></div>\n\t\t\t<div class=\"form-container\"></div>"
			);

			this.$item_name = this.$component.find('.item-name');
			this.$item_description = this.$component.find('.item-desc');
			this.$item_price = this.$component.find('.item-price');
			this.$item_image = this.$component.find('.item-image');
			this.$form_container = this.$component.find('.form-container');
			this.$dicount_section = this.$component.find('.discount-section');
		}

		compare_with_current_item(item) {
			// returns true if `item` is currently being edited
			return item && item.name == this.current_item.name;
		}

		toggle_item_details_section(item) {
			var current_item_changed = !this.compare_with_current_item(item);

			// if item is null or highlighted cart item is clicked twice
			var hide_item_details = !Boolean(item) || !current_item_changed;

			this.events.toggle_item_selector(!hide_item_details);
			this.toggle_component(!hide_item_details);

			if (item && current_item_changed) {
				this.doctype = item.doctype;
				this.item_meta = frappe.get_meta(this.doctype);
				this.name = item.name;
				this.item_row = item;
				this.currency = this.events.get_frm().doc.currency;

				this.current_item = item;

				this.render_dom(item);
				this.render_discount_dom(item);
				this.render_form(item);
				this.events.highlight_cart_item(item);
			} else {
				this.validate_serial_batch_item();
				this.current_item = {};
			}
		}

		validate_serial_batch_item() {
			var this$1 = this;

			var doc = this.events.get_frm().doc;
			var item_row = doc.items.find(function (item) { return item.name === this$1.name; });

			if (!item_row) { return; }

			var serialized = item_row.has_serial_no;
			var batched = item_row.has_batch_no;
			var no_serial_selected = !item_row.serial_no;
			var no_batch_selected = !item_row.batch_no;

			if ((serialized && no_serial_selected) || (batched && no_batch_selected) ||
				(serialized && batched && (no_batch_selected || no_serial_selected))) {

				frappe.show_alert({
					message: __("Item will be removed since no serial / batch no selected."),
					indicator: 'orange'
				});
				frappe.utils.play_sound("cancel");
				this.events.remove_item_from_cart();
			}
		}

		render_dom(item) {
			var item_name = item.item_name;
			var description = item.description;
			var image = item.image;
			var price_list_rate = item.price_list_rate;

			function get_description_html() {
				if (description) {
					description = description.indexOf('...') === -1 && description.length > 140 ? description.substr(0, 139) + '...' : description;
					return description;
				}
				return "";
			}

			this.$item_name.html(item_name);
			this.$item_description.html(get_description_html());
			this.$item_price.html(format_currency(price_list_rate, this.currency));
			if (!this.hide_images && image) {
				this.$item_image.html(
					("<img\n\t\t\t\t\tonerror=\"cur_pos.item_details.handle_broken_image(this)\"\n\t\t\t\t\tclass=\"h-full\" src=\"" + image + "\"\n\t\t\t\t\talt=\"" + (frappe.get_abbr(item_name)) + "\"\n\t\t\t\t\tstyle=\"object-fit: cover;\">")
				);
			} else {
				this.$item_image.html(("<div class=\"item-abbr\">" + (frappe.get_abbr(item_name)) + "</div>"));
			}

		}

		handle_broken_image($img) {
			var item_abbr = $($img).attr('alt');
			$($img).replaceWith(("<div class=\"item-abbr\">" + item_abbr + "</div>"));
		}

		render_discount_dom(item) {
			if (item.discount_percentage) {
				this.$dicount_section.html(
					("<div class=\"item-rate\">" + (format_currency(item.price_list_rate, this.currency)) + "</div>\n\t\t\t\t<div class=\"item-discount\">" + (item.discount_percentage) + "% off</div>")
				);
				this.$item_price.html(format_currency(item.rate, this.currency));
			} else {
				this.$dicount_section.html("");
			}
		}

		render_form(item) {
			var this$1 = this;

			var fields_to_display = this.get_form_fields(item);
			this.$form_container.html('');

			fields_to_display.forEach(function (fieldname, idx) {
				this$1.$form_container.append(
					("<div class=\"" + fieldname + "-control\" data-fieldname=\"" + fieldname + "\"></div>")
				);

				var field_meta = this$1.item_meta.fields.find(function (df) { return df.fieldname === fieldname; });
				fieldname === 'discount_percentage' ? (field_meta.label = __('Discount (%)')) : '';
				var me = this$1;

				this$1[(fieldname + "_control")] = frappe.ui.form.make_control({
					df: Object.assign({}, field_meta,
						{onchange: function() {
							me.events.form_updated(me.current_item, fieldname, this.value);
						}}),
					parent: this$1.$form_container.find(("." + fieldname + "-control")),
					render_input: true,
				});
				this$1[(fieldname + "_control")].set_value(item[fieldname]);
			});

			this.make_auto_serial_selection_btn(item);

			this.bind_custom_control_change_event();
		}

		get_form_fields(item) {
			var fields = ['qty', 'uom', 'rate', 'conversion_factor', 'discount_percentage', 'warehouse', 'actual_qty', 'price_list_rate'];
			if (item.has_serial_no) { fields.push('serial_no'); }
			if (item.has_batch_no) { fields.push('batch_no'); }
			return fields;
		}

		make_auto_serial_selection_btn(item) {
			if (item.has_serial_no) {
				if (!item.has_batch_no) {
					this.$form_container.append(
						"<div class=\"grid-filler no-select\"></div>"
					);
				}
				this.$form_container.append(
					"<div class=\"btn btn-sm btn-secondary auto-fetch-btn\">Auto Fetch Serial Numbers</div>"
				);
				this.$form_container.find('.serial_no-control').find('textarea').css('height', '6rem');
			}
		}

		bind_custom_control_change_event() {
			var this$1 = this;

			var me = this;
			if (this.rate_control) {
				this.rate_control.df.onchange = function() {
					if (this.value || flt(this.value) === 0) {
						me.events.form_updated(me.current_item, 'rate', this.value).then(function () {
							var item_row = frappe.get_doc(me.doctype, me.name);
							var doc = me.events.get_frm().doc;
							me.$item_price.html(format_currency(item_row.rate, doc.currency));
							me.render_discount_dom(item_row);
						});
					}
				};
				this.rate_control.df.read_only = !this.allow_rate_change;
				this.rate_control.refresh();
			}

			if (this.discount_percentage_control && !this.allow_discount_change) {
				this.discount_percentage_control.df.read_only = 1;
				this.discount_percentage_control.refresh();
			}

			if (this.warehouse_control) {
				this.warehouse_control.df.reqd = 1;
				this.warehouse_control.df.onchange = function() {
					var this$1 = this;

					if (this.value) {
						me.events.form_updated(me.current_item, 'warehouse', this.value).then(function () {
							me.item_stock_map = me.events.get_item_stock_map();
							var available_qty = me.item_stock_map[me.item_row.item_code][this$1.value];
							if (available_qty === undefined) {
								me.events.get_available_stock(me.item_row.item_code, this$1.value).then(function () {
									// item stock map is updated now reset warehouse
									me.warehouse_control.set_value(this$1.value);
								});
							} else if (available_qty === 0) {
								me.warehouse_control.set_value('');
								var bold_item_code = me.item_row.item_code.bold();
								var bold_warehouse = this$1.value.bold();
								frappe.throw(
									__('Item Code: {0} is not available under warehouse {1}.', [bold_item_code, bold_warehouse])
								);
							}
							me.actual_qty_control.set_value(available_qty);
						});
					}
				};
				this.warehouse_control.df.get_query = function () {
					return {
						filters: { company: this$1.events.get_frm().doc.company }
					}
				};
				this.warehouse_control.refresh();
			}

			if (this.serial_no_control) {
				this.serial_no_control.df.reqd = 1;
				this.serial_no_control.df.onchange = async function() {
					!me.current_item.batch_no && await me.auto_update_batch_no();
					me.events.form_updated(me.current_item, 'serial_no', this.value);
				};
				this.serial_no_control.refresh();
			}

			if (this.batch_no_control) {
				this.batch_no_control.df.reqd = 1;
				this.batch_no_control.df.get_query = function () {
					return {
						query: 'erpnext.controllers.queries.get_batch_no',
						filters: {
							item_code: me.item_row.item_code,
							warehouse: me.item_row.warehouse,
							posting_date: me.events.get_frm().doc.posting_date
						}
					}
				};
				this.batch_no_control.refresh();
			}

			if (this.uom_control) {
				this.uom_control.df.onchange = function() {
					me.events.form_updated(me.current_item, 'uom', this.value);

					var item_row = frappe.get_doc(me.doctype, me.name);
					me.conversion_factor_control.df.read_only = (item_row.stock_uom == this.value);
					me.conversion_factor_control.refresh();
				};
			}

			frappe.model.on("POS Invoice Item", "*", function (fieldname, value, item_row) {
				var field_control = this$1[(fieldname + "_control")];
				var item_row_is_being_edited = this$1.compare_with_current_item(item_row);

				if (item_row_is_being_edited && field_control && field_control.get_value() !== value) {
					field_control.set_value(value);
					cur_pos.update_cart_html(item_row);
				}
			});
		}

		async auto_update_batch_no() {
			if (this.serial_no_control && this.batch_no_control) {
				var selected_serial_nos = this.serial_no_control.get_value().split("\n").filter(function (s) { return s; });
				if (!selected_serial_nos.length) { return; }

				// find batch nos of the selected serial no
				var serials_with_batch_no = await frappe.db.get_list("Serial No", {
					filters: { 'name': ["in", selected_serial_nos]},
					fields: ["batch_no", "name"]
				});
				var batch_serial_map = serials_with_batch_no.reduce(function (acc, r) {
					if (!acc[r.batch_no]) {
						acc[r.batch_no] = [];
					}
					acc[r.batch_no] = acc[r.batch_no].concat( [r.name]);
					return acc;
				}, {});
				// set current item's batch no and serial no
				var batch_no = Object.keys(batch_serial_map)[0];
				var batch_serial_nos = batch_serial_map[batch_no].join("\n");
				// eg. 10 selected serial no. -> 5 belongs to first batch other 5 belongs to second batch
				var serial_nos_belongs_to_other_batch = selected_serial_nos.length !== batch_serial_map[batch_no].length;

				var current_batch_no = this.batch_no_control.get_value();
				current_batch_no != batch_no && await this.batch_no_control.set_value(batch_no);

				if (serial_nos_belongs_to_other_batch) {
					this.serial_no_control.set_value(batch_serial_nos);
					this.qty_control.set_value(batch_serial_map[batch_no].length);

					delete batch_serial_map[batch_no];
					this.events.clone_new_batch_item_in_frm(batch_serial_map, this.current_item);
				}
			}
		}

		bind_events() {
			var this$1 = this;

			this.bind_auto_serial_fetch_event();
			this.bind_fields_to_numpad_fields();

			this.$component.on('click', '.close-btn', function () {
				this$1.events.close_item_details();
			});
		}

		attach_shortcuts() {
			var this$1 = this;

			this.wrapper.find('.close-btn').attr("title", "Esc");
			frappe.ui.keys.on("escape", function () {
				var item_details_visible = this$1.$component.is(":visible");
				if (item_details_visible) {
					this$1.events.close_item_details();
				}
			});
		}

		bind_fields_to_numpad_fields() {
			var me = this;
			this.$form_container.on('click', '.input-with-feedback', function() {
				var fieldname = $(this).attr('data-fieldname');
				if (this.last_field_focused != fieldname) {
					me.events.item_field_focused(fieldname);
					this.last_field_focused = fieldname;
				}
			});
		}

		bind_auto_serial_fetch_event() {
			var this$1 = this;

			this.$form_container.on('click', '.auto-fetch-btn', function () {
				this$1.batch_no_control && this$1.batch_no_control.set_value('');
				var qty = this$1.qty_control.get_value();
				var conversion_factor = this$1.conversion_factor_control.get_value();
				var expiry_date = this$1.item_row.has_batch_no ? this$1.events.get_frm().doc.posting_date : "";

				var numbers = frappe.call({
					method: "erpnext.stock.doctype.serial_no.serial_no.auto_fetch_serial_number",
					args: {
						qty: qty * conversion_factor,
						item_code: this$1.current_item.item_code,
						warehouse: this$1.warehouse_control.get_value() || '',
						batch_nos: this$1.current_item.batch_no || '',
						posting_date: expiry_date,
						for_doctype: 'POS Invoice'
					}
				});

				numbers.then(function (data) {
					var auto_fetched_serial_numbers = data.message;
					var records_length = auto_fetched_serial_numbers.length;
					if (!records_length) {
						var warehouse = this$1.warehouse_control.get_value().bold();
						var item_code = this$1.current_item.item_code.bold();
						frappe.msgprint(
							__('Serial numbers unavailable for Item {0} under warehouse {1}. Please try changing warehouse.', [item_code, warehouse])
						);
					} else if (records_length < qty) {
						frappe.msgprint(
							__('Fetched only {0} available serial numbers.', [records_length])
						);
						this$1.qty_control.set_value(records_length);
					}
					numbers = auto_fetched_serial_numbers.join("\n");
					this$1.serial_no_control.set_value(numbers);
				});
			});
		}

		toggle_component(show) {
			show ? this.$component.css('display', 'flex') : this.$component.css('display', 'none');
		}
	};

	erpnext.PointOfSale.NumberPad = class {
		constructor(ref) {
		var wrapper = ref.wrapper;
		var events = ref.events;
		var cols = ref.cols;
		var keys = ref.keys;
		var css_classes = ref.css_classes;
		var fieldnames_map = ref.fieldnames_map;

			this.wrapper = wrapper;
			this.events = events;
			this.cols = cols;
			this.keys = keys;
			this.css_classes = css_classes || [];
			this.fieldnames = fieldnames_map || {};

			this.init_component();
		}

		init_component() {
			this.prepare_dom();
			this.bind_events();
		}

		prepare_dom() {
			var ref = this;
			var cols = ref.cols;
			var keys = ref.keys;
			var css_classes = ref.css_classes;
			var fieldnames = ref.fieldnames;

			function get_keys() {
				return keys.reduce(function (a, row, i) {
					return a + row.reduce(function (a2, number, j) {
						var class_to_append = css_classes && css_classes[i] ? css_classes[i][j] : '';
						var fieldname = fieldnames && fieldnames[number] ?
							fieldnames[number] : typeof number === 'string' ? frappe.scrub(number) : number;

						return a2 + "<div class=\"numpad-btn " + class_to_append + "\" data-button-value=\"" + fieldname + "\">" + number + "</div>";
					}, '');
				}, '');
			}

			this.wrapper.html(
				("<div class=\"numpad-container\">\n\t\t\t\t" + (get_keys()) + "\n\t\t\t</div>")
			);
		}

		bind_events() {
			var me = this;
			this.wrapper.on('click', '.numpad-btn', function() {
				var $btn = $(this);
				me.events.numpad_event($btn);
			});
		}
	};

	/* eslint-disable no-unused-vars */
	erpnext.PointOfSale.Payment = class {
		constructor(ref) {
		var events = ref.events;
		var wrapper = ref.wrapper;

			this.wrapper = wrapper;
			this.events = events;

			this.init_component();
		}

		init_component() {
			this.prepare_dom();
			this.initialize_numpad();
			this.bind_events();
			this.attach_shortcuts();

		}

		prepare_dom() {
			this.wrapper.append(
				"<section class=\"payment-container\">\n\t\t\t\t<div class=\"section-label payment-section\">Payment Method</div>\n\t\t\t\t<div class=\"payment-modes\"></div>\n\t\t\t\t<div class=\"fields-numpad-container\">\n\t\t\t\t\t<div class=\"fields-section\">\n\t\t\t\t\t\t<div class=\"section-label\">Additional Information</div>\n\t\t\t\t\t\t<div class=\"invoice-fields\"></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"number-pad\"></div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"totals-section\">\n\t\t\t\t\t<div class=\"totals\"></div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"submit-order-btn\">Complete Order</div>\n\t\t\t</section>"
			);
			this.$component = this.wrapper.find('.payment-container');
			this.$payment_modes = this.$component.find('.payment-modes');
			this.$totals_section = this.$component.find('.totals-section');
			this.$totals = this.$component.find('.totals');
			this.$numpad = this.$component.find('.number-pad');
			this.$invoice_fields_section = this.$component.find('.fields-section');
		}

		make_invoice_fields_control() {
			var this$1 = this;

			frappe.db.get_doc("POS Settings", undefined).then(function (doc) {
				var fields = doc.invoice_fields;
				if (!fields.length) { return; }

				this$1.$invoice_fields = this$1.$invoice_fields_section.find('.invoice-fields');
				this$1.$invoice_fields.html('');
				var frm = this$1.events.get_frm();

				fields.forEach(function (df) {
					this$1.$invoice_fields.append(
						("<div class=\"invoice_detail_field " + (df.fieldname) + "-field\" data-fieldname=\"" + (df.fieldname) + "\"></div>")
					);
					var df_events = {
						onchange: function() {
							frm.set_value(this.df.fieldname, this.get_value());
						}
					};
					if (df.fieldtype == "Button") {
						df_events = {
							click: function() {
								if (frm.script_manager.has_handlers(df.fieldname, frm.doc.doctype)) {
									frm.script_manager.trigger(df.fieldname, frm.doc.doctype, frm.doc.docname);
								}
							}
						};
					}

					this$1[((df.fieldname) + "_field")] = frappe.ui.form.make_control({
						df: Object.assign({}, df,
							df_events),
						parent: this$1.$invoice_fields.find(("." + (df.fieldname) + "-field")),
						render_input: true,
					});
					this$1[((df.fieldname) + "_field")].set_value(frm.doc[df.fieldname]);
				});
			});
		}

		initialize_numpad() {
			var me = this;
			this.number_pad = new erpnext.PointOfSale.NumberPad({
				wrapper: this.$numpad,
				events: {
					numpad_event: function($btn) {
						me.on_numpad_clicked($btn);
					}
				},
				cols: 3,
				keys: [
					[ 1, 2, 3 ],
					[ 4, 5, 6 ],
					[ 7, 8, 9 ],
					[ '.', 0, 'Delete' ]
				],
			});

			this.numpad_value = '';
		}

		on_numpad_clicked($btn) {
			var button_value = $btn.attr('data-button-value');

			highlight_numpad_btn($btn);
			this.numpad_value = button_value === 'delete' ? this.numpad_value.slice(0, -1) : this.numpad_value + button_value;
			this.selected_mode.$input.get(0).focus();
			this.selected_mode.set_value(this.numpad_value);

			function highlight_numpad_btn($btn) {
				$btn.addClass('shadow-base-inner bg-selected');
				setTimeout(function () {
					$btn.removeClass('shadow-base-inner bg-selected');
				}, 100);
			}
		}

		bind_events() {
			var this$1 = this;

			var me = this;

			this.$payment_modes.on('click', '.mode-of-payment', function(e) {
				var mode_clicked = $(this);
				// if clicked element doesn't have .mode-of-payment class then return
				if (!$(e.target).is(mode_clicked)) { return; }

				var scrollLeft = mode_clicked.offset().left - me.$payment_modes.offset().left + me.$payment_modes.scrollLeft();
				me.$payment_modes.animate({ scrollLeft: scrollLeft });

				var mode = mode_clicked.attr('data-mode');

				// hide all control fields and shortcuts
				$(".mode-of-payment-control").css('display', 'none');
				$(".cash-shortcuts").css('display', 'none');
				me.$payment_modes.find(".pay-amount").css('display', 'inline');
				me.$payment_modes.find(".loyalty-amount-name").css('display', 'none');

				// remove highlight from all mode-of-payments
				$('.mode-of-payment').removeClass('border-primary');

				if (mode_clicked.hasClass('border-primary')) {
					// clicked one is selected then unselect it
					mode_clicked.removeClass('border-primary');
					me.selected_mode = '';
				} else {
					// clicked one is not selected then select it
					mode_clicked.addClass('border-primary');
					mode_clicked.find('.mode-of-payment-control').css('display', 'flex');
					mode_clicked.find('.cash-shortcuts').css('display', 'grid');
					me.$payment_modes.find(("." + mode + "-amount")).css('display', 'none');
					me.$payment_modes.find(("." + mode + "-name")).css('display', 'inline');

					me.selected_mode = me[(mode + "_control")];
					me.selected_mode && me.selected_mode.$input.get(0).focus();
					me.auto_set_remaining_amount();
				}
			});

			frappe.ui.form.on('POS Invoice', 'contact_mobile', function (frm) {
				var contact = frm.doc.contact_mobile;
				var request_button = $(this$1.request_for_payment_field.$input[0]);
				if (contact) {
					request_button.removeClass('btn-default').addClass('btn-primary');
				} else {
					request_button.removeClass('btn-primary').addClass('btn-default');
	      }
	    });

			this.setup_listener_for_payments();

			this.$payment_modes.on('click', '.shortcut', function() {
				var value = $(this).attr('data-value');
				me.selected_mode.set_value(value);
			});

			this.$component.on('click', '.submit-order-btn', function () {
				var doc = this$1.events.get_frm().doc;
				var paid_amount = doc.paid_amount;
				var items = doc.items;

				if (paid_amount == 0 || !items.length) {
					var message = items.length ? __("You cannot submit the order without payment.") : __("You cannot submit empty order.");
					frappe.show_alert({ message: message, indicator: "orange" });
					frappe.utils.play_sound("error");
					return;
				}

				this$1.events.submit_invoice();
			});

			frappe.ui.form.on('POS Invoice', 'paid_amount', function (frm) {
				this$1.update_totals_section(frm.doc);

				// need to re calculate cash shortcuts after discount is applied
				var is_cash_shortcuts_invisible = !this$1.$payment_modes.find('.cash-shortcuts').is(':visible');
				this$1.attach_cash_shortcuts(frm.doc);
				!is_cash_shortcuts_invisible && this$1.$payment_modes.find('.cash-shortcuts').css('display', 'grid');
				this$1.render_payment_mode_dom();
			});

			frappe.ui.form.on('POS Invoice', 'loyalty_amount', function (frm) {
				var formatted_currency = format_currency(frm.doc.loyalty_amount, frm.doc.currency);
				this$1.$payment_modes.find(".loyalty-amount-amount").html(formatted_currency);
			});

			frappe.ui.form.on("Sales Invoice Payment", "amount", function (frm, cdt, cdn) {
				// for setting correct amount after loyalty points are redeemed
				var default_mop = locals[cdt][cdn];
				var mode = default_mop.mode_of_payment.replace(/ +/g, "_").toLowerCase();
				if (this$1[(mode + "_control")] && this$1[(mode + "_control")].get_value() != default_mop.amount) {
					this$1[(mode + "_control")].set_value(default_mop.amount);
				}
			});
		}

		setup_listener_for_payments() {
			var this$1 = this;

			frappe.realtime.on("process_phone_payment", function (data) {
				var doc = this$1.events.get_frm().doc;
				var response = data.response;
				var amount = data.amount;
				var success = data.success;
				var failure_message = data.failure_message;
				var message, title;

				if (success) {
					title = __("Payment Received");
					var grand_total = cint(frappe.sys_defaults.disable_rounded_total) ? doc.grand_total : doc.rounded_total;
					if (amount >= grand_total) {
						frappe.dom.unfreeze();
						message = __("Payment of {0} received successfully.", [format_currency(amount, doc.currency, 0)]);
						this$1.events.submit_invoice();
						cur_frm.reload_doc();

					} else {
						message = __("Payment of {0} received successfully. Waiting for other requests to complete...", [format_currency(amount, doc.currency, 0)]);
					}
				} else if (failure_message) {
					message = failure_message;
					title = __("Payment Failed");
				}

				frappe.msgprint({ "message": message, "title": title });
			});
		}

		auto_set_remaining_amount() {
			var doc = this.events.get_frm().doc;
			var grand_total = cint(frappe.sys_defaults.disable_rounded_total) ? doc.grand_total : doc.rounded_total;
			var remaining_amount = grand_total - doc.paid_amount;
			var current_value = this.selected_mode ? this.selected_mode.get_value() : undefined;
			if (!current_value && remaining_amount > 0 && this.selected_mode) {
				this.selected_mode.set_value(remaining_amount);
			}
		}

		attach_shortcuts() {
			var this$1 = this;

			var ctrl_label = frappe.utils.is_mac() ? '⌘' : 'Ctrl';
			this.$component.find('.submit-order-btn').attr("title", (ctrl_label + "+Enter"));
			frappe.ui.keys.on("ctrl+enter", function () {
				var payment_is_visible = this$1.$component.is(":visible");
				var active_mode = this$1.$payment_modes.find(".border-primary");
				if (payment_is_visible && active_mode.length) {
					this$1.$component.find('.submit-order-btn').click();
				}
			});

			frappe.ui.keys.add_shortcut({
				shortcut: "tab",
				action: function () {
					var payment_is_visible = this$1.$component.is(":visible");
					var active_mode = this$1.$payment_modes.find(".border-primary");
					active_mode = active_mode.length ? active_mode.attr("data-mode") : undefined;

					if (!active_mode) { return; }

					var mode_of_payments = Array.from(this$1.$payment_modes.find(".mode-of-payment")).map(function (m) { return $(m).attr("data-mode"); });
					var mode_index = mode_of_payments.indexOf(active_mode);
					var next_mode_index = (mode_index + 1) % mode_of_payments.length;
					var next_mode_to_be_clicked = this$1.$payment_modes.find((".mode-of-payment[data-mode=\"" + (mode_of_payments[next_mode_index]) + "\"]"));

					if (payment_is_visible && mode_index != next_mode_index) {
						next_mode_to_be_clicked.click();
					}
				},
				condition: function () { return this$1.$component.is(':visible') && this$1.$payment_modes.find(".border-primary").length; },
				description: __("Switch Between Payment Modes"),
				ignore_inputs: true,
				page: cur_page.page.page
			});
		}

		toggle_numpad() {
			// pass
		}

		render_payment_section() {
			this.render_payment_mode_dom();
			this.make_invoice_fields_control();
			this.update_totals_section();
			this.focus_on_default_mop();
		}

		edit_cart() {
			this.events.toggle_other_sections(false);
			this.toggle_component(false);
		}

		checkout() {
			this.events.toggle_other_sections(true);
			this.toggle_component(true);

			this.render_payment_section();
		}

		toggle_remarks_control() {
			if (this.$remarks.find('.frappe-control').length) {
				this.$remarks.html('+ Add Remark');
			} else {
				this.$remarks.html('');
				this["remark_control"] = frappe.ui.form.make_control({
					df: {
						label: __('Remark'),
						fieldtype: 'Data',
						onchange: function() {}
					},
					parent: this.$totals_section.find(".remarks"),
					render_input: true,
				});
				this["remark_control"].set_value('');
			}
		}

		render_payment_mode_dom() {
			var this$1 = this;

			var doc = this.events.get_frm().doc;
			var payments = doc.payments;
			var currency = doc.currency;

			this.$payment_modes.html(("" + (payments.map(function (p, i) {
					var mode = p.mode_of_payment.replace(/ +/g, "_").toLowerCase();
					var payment_type = p.type;
					var amount = p.amount > 0 ? format_currency(p.amount, currency) : '';

					return (("\n\t\t\t\t\t<div class=\"payment-mode-wrapper\">\n\t\t\t\t\t\t<div class=\"mode-of-payment\" data-mode=\"" + mode + "\" data-payment-type=\"" + payment_type + "\">\n\t\t\t\t\t\t\t" + (p.mode_of_payment) + "\n\t\t\t\t\t\t\t<div class=\"" + mode + "-amount pay-amount\">" + amount + "</div>\n\t\t\t\t\t\t\t<div class=\"" + mode + " mode-of-payment-control\"></div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t"));
				}).join(''))));

			payments.forEach(function (p) {
				var mode = p.mode_of_payment.replace(/ +/g, "_").toLowerCase();
				var me = this$1;
				this$1[(mode + "_control")] = frappe.ui.form.make_control({
					df: {
						label: p.mode_of_payment,
						fieldtype: 'Currency',
						placeholder: __('Enter {0} amount.', [p.mode_of_payment]),
						onchange: function() {
							var current_value = frappe.model.get_value(p.doctype, p.name, 'amount');
							if (current_value != this.value) {
								frappe.model
									.set_value(p.doctype, p.name, 'amount', flt(this.value))
									.then(function () { return me.update_totals_section(); });

								var formatted_currency = format_currency(this.value, currency);
								me.$payment_modes.find(("." + mode + "-amount")).html(formatted_currency);
							}
						}
					},
					parent: this$1.$payment_modes.find(("." + mode + ".mode-of-payment-control")),
					render_input: true,
				});
				this$1[(mode + "_control")].toggle_label(false);
				this$1[(mode + "_control")].set_value(p.amount);
			});

			this.render_loyalty_points_payment_mode();

			this.attach_cash_shortcuts(doc);
		}

		focus_on_default_mop() {
			var this$1 = this;

			var doc = this.events.get_frm().doc;
			var payments = doc.payments;
			payments.forEach(function (p) {
				var mode = p.mode_of_payment.replace(/ +/g, "_").toLowerCase();
				if (p.default) {
					setTimeout(function () {
						this$1.$payment_modes.find(("." + mode + ".mode-of-payment-control")).parent().click();
					}, 500);
				}
			});
		}

		attach_cash_shortcuts(doc) {
			var grand_total = cint(frappe.sys_defaults.disable_rounded_total) ? doc.grand_total : doc.rounded_total;
			var currency = doc.currency;

			var shortcuts = this.get_cash_shortcuts(flt(grand_total));

			this.$payment_modes.find('.cash-shortcuts').remove();
			var shortcuts_html = shortcuts.map(function (s) {
				return ("<div class=\"shortcut\" data-value=\"" + s + "\">" + (format_currency(s, currency, 0)) + "</div>");
			}).join('');

			this.$payment_modes.find('[data-payment-type="Cash"]').find('.mode-of-payment-control')
				.after(("<div class=\"cash-shortcuts\">" + shortcuts_html + "</div>"));
		}

		get_cash_shortcuts(grand_total) {
			var steps = [1, 5, 10];
			var digits = String(Math.round(grand_total)).length;

			steps = steps.map(function (x) { return x * (Math.pow( 10, (digits - 2) )); });

			var get_nearest = function (amount, x) {
				var nearest_x = Math.ceil((amount / x)) * x;
				return nearest_x === amount ? nearest_x + x : nearest_x;
			};

			return steps.reduce(function (finalArr, x) {
				var nearest_x = get_nearest(grand_total, x);
				nearest_x = finalArr.indexOf(nearest_x) != -1 ? nearest_x + x : nearest_x;
				return finalArr.concat( [nearest_x]);
			}, []);
		}

		render_loyalty_points_payment_mode() {
			var me = this;
			var doc = this.events.get_frm().doc;
			var ref = this.events.get_customer_details();
			var loyalty_program = ref.loyalty_program;
			var loyalty_points = ref.loyalty_points;
			var conversion_factor = ref.conversion_factor;

			this.$payment_modes.find(".mode-of-payment[data-mode=\"loyalty-amount\"]").parent().remove();

			if (!loyalty_program) { return; }

			var description, read_only, max_redeemable_amount;
			if (!loyalty_points) {
				description = __("You don't have enough points to redeem.");
				read_only = true;
			} else {
				max_redeemable_amount = flt(flt(loyalty_points) * flt(conversion_factor), precision("loyalty_amount", doc));
				description = __("You can redeem upto {0}.", [format_currency(max_redeemable_amount)]);
				read_only = false;
			}

			var margin = this.$payment_modes.children().length % 2 === 0 ? 'pr-2' : 'pl-2';
			var amount = doc.loyalty_amount > 0 ? format_currency(doc.loyalty_amount, doc.currency) : '';
			this.$payment_modes.append(
				("<div class=\"payment-mode-wrapper\">\n\t\t\t\t<div class=\"mode-of-payment loyalty-card\" data-mode=\"loyalty-amount\" data-payment-type=\"loyalty-amount\">\n\t\t\t\t\tRedeem Loyalty Points\n\t\t\t\t\t<div class=\"loyalty-amount-amount pay-amount\">" + amount + "</div>\n\t\t\t\t\t<div class=\"loyalty-amount-name\">" + loyalty_program + "</div>\n\t\t\t\t\t<div class=\"loyalty-amount mode-of-payment-control\"></div>\n\t\t\t\t</div>\n\t\t\t</div>")
			);

			this['loyalty-amount_control'] = frappe.ui.form.make_control({
				df: {
					label: __("Redeem Loyalty Points"),
					fieldtype: 'Currency',
					placeholder: __("Enter amount to be redeemed."),
					options: 'company:currency',
					read_only: read_only,
					onchange: async function() {
						if (!loyalty_points) { return; }

						if (this.value > max_redeemable_amount) {
							frappe.show_alert({
								message: __("You cannot redeem more than {0}.", [format_currency(max_redeemable_amount)]),
								indicator: "red"
							});
							frappe.utils.play_sound("submit");
							me['loyalty-amount_control'].set_value(0);
							return;
						}
						var redeem_loyalty_points = this.value > 0 ? 1 : 0;
						await frappe.model.set_value(doc.doctype, doc.name, 'redeem_loyalty_points', redeem_loyalty_points);
						frappe.model.set_value(doc.doctype, doc.name, 'loyalty_points', parseInt(this.value / conversion_factor));
					},
					description: description
				},
				parent: this.$payment_modes.find(".loyalty-amount.mode-of-payment-control"),
				render_input: true,
			});
			this['loyalty-amount_control'].toggle_label(false);

			// this.render_add_payment_method_dom();
		}

		render_add_payment_method_dom() {
			var docstatus = this.events.get_frm().doc.docstatus;
			if (docstatus === 0)
				{ this.$payment_modes.append(
					"<div class=\"w-full pr-2\">\n\t\t\t\t\t<div class=\"add-mode-of-payment w-half text-grey mb-4 no-select pointer\">+ Add Payment Method</div>\n\t\t\t\t</div>"
				); }
		}

		update_totals_section(doc) {
			if (!doc) { doc = this.events.get_frm().doc; }
			var paid_amount = doc.paid_amount;
			var grand_total = cint(frappe.sys_defaults.disable_rounded_total) ? doc.grand_total : doc.rounded_total;
			var remaining = grand_total - doc.paid_amount;
			var change = doc.change_amount || remaining <= 0 ? -1 * remaining : undefined;
			var currency = doc.currency;
			var label = change ? __('Change') : __('To Be Paid');

			this.$totals.html(
				("<div class=\"col\">\n\t\t\t\t<div class=\"total-label\">Grand Total</div>\n\t\t\t\t<div class=\"value\">" + (format_currency(grand_total, currency)) + "</div>\n\t\t\t</div>\n\t\t\t<div class=\"seperator-y\"></div>\n\t\t\t<div class=\"col\">\n\t\t\t\t<div class=\"total-label\">Paid Amount</div>\n\t\t\t\t<div class=\"value\">" + (format_currency(paid_amount, currency)) + "</div>\n\t\t\t</div>\n\t\t\t<div class=\"seperator-y\"></div>\n\t\t\t<div class=\"col\">\n\t\t\t\t<div class=\"total-label\">" + label + "</div>\n\t\t\t\t<div class=\"value\">" + (format_currency(change || remaining, currency)) + "</div>\n\t\t\t</div>")
			);
		}

		toggle_component(show) {
			show ? this.$component.css('display', 'flex') : this.$component.css('display', 'none');
		}
	};

	erpnext.PointOfSale.PastOrderList = class {
		constructor(ref) {
		var wrapper = ref.wrapper;
		var events = ref.events;

			this.wrapper = wrapper;
			this.events = events;

			this.init_component();
		}

		init_component() {
			this.prepare_dom();
			this.make_filter_section();
			this.bind_events();
		}

		prepare_dom() {
			this.wrapper.append(
				"<section class=\"past-order-list\">\n\t\t\t\t<div class=\"filter-section\">\n\t\t\t\t\t<div class=\"label\">Recent Orders</div>\n\t\t\t\t\t<div class=\"search-field\"></div>\n\t\t\t\t\t<div class=\"status-field\"></div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"invoices-container\"></div>\n\t\t\t</section>"
			);

			this.$component = this.wrapper.find('.past-order-list');
			this.$invoices_container = this.$component.find('.invoices-container');
		}

		bind_events() {
			var this$1 = this;

			this.search_field.$input.on('input', function (e) {
				clearTimeout(this$1.last_search);
				this$1.last_search = setTimeout(function () {
					var search_term = e.target.value;
					this$1.refresh_list(search_term, this$1.status_field.get_value());
				}, 300);
			});
			var me = this;
			this.$invoices_container.on('click', '.invoice-wrapper', function() {
				var invoice_name = unescape($(this).attr('data-invoice-name'));

				me.events.open_invoice_data(invoice_name);
			});
		}

		make_filter_section() {
			var me = this;
			this.search_field = frappe.ui.form.make_control({
				df: {
					label: __('Search'),
					fieldtype: 'Data',
					placeholder: __('Search by invoice id or customer name')
				},
				parent: this.$component.find('.search-field'),
				render_input: true,
			});
			this.status_field = frappe.ui.form.make_control({
				df: {
					label: __('Invoice Status'),
					fieldtype: 'Select',
					options: "Draft\nPaid\nConsolidated\nReturn",
					placeholder: __('Filter by invoice status'),
					onchange: function() {
						if (me.$component.is(':visible')) { me.refresh_list(); }
					}
				},
				parent: this.$component.find('.status-field'),
				render_input: true,
			});
			this.search_field.toggle_label(false);
			this.status_field.toggle_label(false);
			this.status_field.set_value('Draft');
		}

		refresh_list() {
			var this$1 = this;

			frappe.dom.freeze();
			this.events.reset_summary();
			var search_term = this.search_field.get_value();
			var status = this.status_field.get_value();

			this.$invoices_container.html('');

			return frappe.call({
				method: "erpnext.selling.page.point_of_sale.point_of_sale.get_past_order_list",
				freeze: true,
				args: { search_term: search_term, status: status },
				callback: function (response) {
					frappe.dom.unfreeze();
					response.message.forEach(function (invoice) {
						var invoice_html = this$1.get_invoice_html(invoice);
						this$1.$invoices_container.append(invoice_html);
					});
				}
			});
		}

		get_invoice_html(invoice) {
			var posting_datetime = moment(invoice.posting_date+" "+invoice.posting_time).format("Do MMMM, h:mma");
			return (
				("<div class=\"invoice-wrapper\" data-invoice-name=\"" + (escape(invoice.name)) + "\">\n\t\t\t\t<div class=\"invoice-name-date\">\n\t\t\t\t\t<div class=\"invoice-name\">" + (invoice.name) + "</div>\n\t\t\t\t\t<div class=\"invoice-date\">\n\t\t\t\t\t\t<svg class=\"mr-2\" width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"1\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n\t\t\t\t\t\t\t<path d=\"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2\"/><circle cx=\"12\" cy=\"7\" r=\"4\"/>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t\t" + (frappe.ellipsis(invoice.customer, 20)) + "\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"invoice-total-status\">\n\t\t\t\t\t<div class=\"invoice-total\">" + (format_currency(invoice.grand_total, invoice.currency, 0) || 0) + "</div>\n\t\t\t\t\t<div class=\"invoice-date\">" + posting_datetime + "</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"seperator\"></div>")
			);
		}

		toggle_component(show) {
			show ? this.$component.css('display', 'flex') && this.refresh_list() : this.$component.css('display', 'none');
		}
	};

	erpnext.PointOfSale.PastOrderSummary = class {
		constructor(ref) {
		var wrapper = ref.wrapper;
		var events = ref.events;

			this.wrapper = wrapper;
			this.events = events;

			this.init_component();
		}

		init_component() {
			this.prepare_dom();
			this.init_email_print_dialog();
			this.bind_events();
			this.attach_shortcuts();
		}

		prepare_dom() {
			this.wrapper.append(
				"<section class=\"past-order-summary\">\n\t\t\t\t<div class=\"no-summary-placeholder\">\n\t\t\t\t\tSelect an invoice to load summary data\n\t\t\t\t</div>\n\t\t\t\t<div class=\"invoice-summary-wrapper\">\n\t\t\t\t\t<div class=\"abs-container\">\n\t\t\t\t\t\t<div class=\"upper-section\"></div>\n\t\t\t\t\t\t<div class=\"label\">Items</div>\n\t\t\t\t\t\t<div class=\"items-container summary-container\"></div>\n\t\t\t\t\t\t<div class=\"label\">Totals</div>\n\t\t\t\t\t\t<div class=\"totals-container summary-container\"></div>\n\t\t\t\t\t\t<div class=\"label\">Payments</div>\n\t\t\t\t\t\t<div class=\"payments-container summary-container\"></div>\n\t\t\t\t\t\t<div class=\"summary-btns\"></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</section>"
			);

			this.$component = this.wrapper.find('.past-order-summary');
			this.$summary_wrapper = this.$component.find('.invoice-summary-wrapper');
			this.$summary_container = this.$component.find('.abs-container');
			this.$upper_section = this.$summary_container.find('.upper-section');
			this.$items_container = this.$summary_container.find('.items-container');
			this.$totals_container = this.$summary_container.find('.totals-container');
			this.$payment_container = this.$summary_container.find('.payments-container');
			this.$summary_btns = this.$summary_container.find('.summary-btns');
		}

		init_email_print_dialog() {
			var this$1 = this;

			var email_dialog = new frappe.ui.Dialog({
				title: 'Email Receipt',
				fields: [
					{fieldname: 'email_id', fieldtype: 'Data', options: 'Email', label: 'Email ID'} ],
				primary_action: function () {
					this$1.send_email();
				},
				primary_action_label: __('Send'),
			});
			this.email_dialog = email_dialog;

			var print_dialog = new frappe.ui.Dialog({
				title: 'Print Receipt',
				fields: [
					{fieldname: 'print', fieldtype: 'Data', label: 'Print Preview'}
				],
				primary_action: function () {
					this$1.print_receipt();
				},
				primary_action_label: __('Print'),
			});
			this.print_dialog = print_dialog;
		}

		get_upper_section_html(doc) {
			var status = doc.status;
			var indicator_color = '';

			in_list(['Paid', 'Consolidated'], status) && (indicator_color = 'green');
			status === 'Draft' && (indicator_color = 'red');
			status === 'Return' && (indicator_color = 'grey');

			return ("<div class=\"left-section\">\n\t\t\t\t\t<div class=\"customer-name\">" + (doc.customer) + "</div>\n\t\t\t\t\t<div class=\"customer-email\">" + (this.customer_email) + "</div>\n\t\t\t\t\t<div class=\"cashier\">Sold by: " + (doc.owner) + "</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"right-section\">\n\t\t\t\t\t<div class=\"paid-amount\">" + (format_currency(doc.paid_amount, doc.currency)) + "</div>\n\t\t\t\t\t<div class=\"invoice-name\">" + (doc.name) + "</div>\n\t\t\t\t\t<span class=\"indicator-pill whitespace-nowrap " + indicator_color + "\"><span>" + (doc.status) + "</span></span>\n\t\t\t\t</div>");
		}

		get_item_html(doc, item_data) {
			return ("<div class=\"item-row-wrapper\">\n\t\t\t\t\t<div class=\"item-name\">" + (item_data.item_name) + "</div>\n\t\t\t\t\t<div class=\"item-qty\">" + (item_data.qty || 0) + "</div>\n\t\t\t\t\t<div class=\"item-rate-disc\">" + (get_rate_discount_html()) + "</div>\n\t\t\t\t</div>");

			function get_rate_discount_html() {
				if (item_data.rate && item_data.price_list_rate && item_data.rate !== item_data.price_list_rate) {
					return ("<span class=\"item-disc\">(" + (item_data.discount_percentage) + "% off)</span>\n\t\t\t\t\t\t<div class=\"item-rate\">" + (format_currency(item_data.rate, doc.currency)) + "</div>");
				} else {
					return ("<div class=\"item-rate\">" + (format_currency(item_data.price_list_rate || item_data.rate, doc.currency)) + "</div>");
				}
			}
		}

		get_discount_html(doc) {
			if (doc.discount_amount) {
				return ("<div class=\"summary-row-wrapper\">\n\t\t\t\t\t\t<div>Discount (" + (doc.additional_discount_percentage) + " %)</div>\n\t\t\t\t\t\t<div>" + (format_currency(doc.discount_amount, doc.currency)) + "</div>\n\t\t\t\t\t</div>");
			} else {
				return "";
			}
		}

		get_net_total_html(doc) {
			return ("<div class=\"summary-row-wrapper\">\n\t\t\t\t\t<div>Net Total</div>\n\t\t\t\t\t<div>" + (format_currency(doc.net_total, doc.currency)) + "</div>\n\t\t\t\t</div>");
		}

		get_taxes_html(doc) {
			if (!doc.taxes.length) { return ''; }

			var taxes_html = doc.taxes.map(function (t) {
				var description = /[0-9]+/.test(t.description) ? t.description : ((t.description) + " @ " + (t.rate) + "%");
				return ("\n\t\t\t\t<div class=\"tax-row\">\n\t\t\t\t\t<div class=\"tax-label\">" + description + "</div>\n\t\t\t\t\t<div class=\"tax-value\">" + (format_currency(t.tax_amount_after_discount_amount, doc.currency)) + "</div>\n\t\t\t\t</div>\n\t\t\t");
			}).join('');

			return ("<div class=\"taxes-wrapper\">" + taxes_html + "</div>");
		}

		get_grand_total_html(doc) {
			return ("<div class=\"summary-row-wrapper grand-total\">\n\t\t\t\t\t<div>Grand Total</div>\n\t\t\t\t\t<div>" + (format_currency(doc.grand_total, doc.currency)) + "</div>\n\t\t\t\t</div>");
		}

		get_payment_html(doc, payment) {
			return ("<div class=\"summary-row-wrapper payments\">\n\t\t\t\t\t<div>" + (payment.mode_of_payment) + "</div>\n\t\t\t\t\t<div>" + (format_currency(payment.amount, doc.currency)) + "</div>\n\t\t\t\t</div>");
		}

		bind_events() {
			var this$1 = this;

			this.$summary_container.on('click', '.return-btn', function () {
				this$1.events.process_return(this$1.doc.name);
				this$1.toggle_component(false);
				this$1.$component.find('.no-summary-placeholder').css('display', 'flex');
				this$1.$summary_wrapper.css('display', 'none');
			});

			this.$summary_container.on('click', '.edit-btn', function () {
				this$1.events.edit_order(this$1.doc.name);
				this$1.toggle_component(false);
				this$1.$component.find('.no-summary-placeholder').css('display', 'flex');
				this$1.$summary_wrapper.css('display', 'none');
			});

			this.$summary_container.on('click', '.delete-btn', function () {
				this$1.events.delete_order(this$1.doc.name);
				this$1.show_summary_placeholder();
			});

			this.$summary_container.on('click', '.delete-btn', function () {
				this$1.events.delete_order(this$1.doc.name);
				this$1.show_summary_placeholder();
				// this.toggle_component(false);
				// this.$component.find('.no-summary-placeholder').removeClass('d-none');
				// this.$summary_wrapper.addClass('d-none');
			});

			this.$summary_container.on('click', '.new-btn', function () {
				this$1.events.new_order();
				this$1.toggle_component(false);
				this$1.$component.find('.no-summary-placeholder').css('display', 'flex');
				this$1.$summary_wrapper.css('display', 'none');
			});

			this.$summary_container.on('click', '.email-btn', function () {
				this$1.email_dialog.fields_dict.email_id.set_value(this$1.customer_email);
				this$1.email_dialog.show();
			});

			this.$summary_container.on('click', '.print-btn', function () {
				this$1.print_receipt();
			});
		}

		print_receipt() {
			var frm = this.events.get_frm();
			frappe.utils.print(
				this.doc.doctype,
				this.doc.name,
				frm.pos_print_format,
				this.doc.letter_head,
				this.doc.language || frappe.boot.lang
			);
		}

		attach_shortcuts() {
			var this$1 = this;

			var ctrl_label = frappe.utils.is_mac() ? '⌘' : 'Ctrl';
			this.$summary_container.find('.print-btn').attr("title", (ctrl_label + "+P"));
			frappe.ui.keys.add_shortcut({
				shortcut: "ctrl+p",
				action: function () { return this$1.$summary_container.find('.print-btn').click(); },
				condition: function () { return this$1.$component.is(':visible') && this$1.$summary_container.find('.print-btn').is(":visible"); },
				description: __("Print Receipt"),
				page: cur_page.page.page
			});
			this.$summary_container.find('.new-btn').attr("title", (ctrl_label + "+Enter"));
			frappe.ui.keys.on("ctrl+enter", function () {
				var summary_is_visible = this$1.$component.is(":visible");
				if (summary_is_visible && this$1.$summary_container.find('.new-btn').is(":visible")) {
					this$1.$summary_container.find('.new-btn').click();
				}
			});
			this.$summary_container.find('.edit-btn').attr("title", (ctrl_label + "+E"));
			frappe.ui.keys.add_shortcut({
				shortcut: "ctrl+e",
				action: function () { return this$1.$summary_container.find('.edit-btn').click(); },
				condition: function () { return this$1.$component.is(':visible') && this$1.$summary_container.find('.edit-btn').is(":visible"); },
				description: __("Edit Receipt"),
				page: cur_page.page.page
			});
		}

		send_email() {
			var this$1 = this;

			var frm = this.events.get_frm();
			var recipients = this.email_dialog.get_values().email_id;
			var doc = this.doc || frm.doc;
			var print_format = frm.pos_print_format;

			frappe.call({
				method: "frappe.core.doctype.communication.email.make",
				args: {
					recipients: recipients,
					subject: __(frm.meta.name) + ': ' + doc.name,
					doctype: doc.doctype,
					name: doc.name,
					send_email: 1,
					print_format: print_format,
					sender_full_name: frappe.user.full_name(),
					_lang: doc.language
				},
				callback: function (r) {
					if (!r.exc) {
						frappe.utils.play_sound("email");
						if (r.message["emails_not_sent_to"]) {
							frappe.msgprint(__(
								"Email not sent to {0} (unsubscribed / disabled)",
								[ frappe.utils.escape_html(r.message["emails_not_sent_to"]) ]
							));
						} else {
							frappe.show_alert({
								message: __('Email sent successfully.'),
								indicator: 'green'
							});
						}
						this$1.email_dialog.hide();
					} else {
						frappe.msgprint(__("There were errors while sending email. Please try again."));
					}
				}
			});
		}

		add_summary_btns(map) {
			var this$1 = this;

			this.$summary_btns.html('');
			map.forEach(function (m) {
				if (m.condition) {
					m.visible_btns.forEach(function (b) {
						var class_name = b.split(' ')[0].toLowerCase();
						this$1.$summary_btns.append(
							("<div class=\"summary-btn btn btn-default " + class_name + "-btn\">" + b + "</div>")
						);
					});
				}
			});
			this.$summary_btns.children().last().removeClass('mr-4');
		}

		toggle_summary_placeholder(show) {
			if (show) {
				this.$summary_wrapper.css('display', 'none');
				this.$component.find('.no-summary-placeholder').css('display', 'flex');
			} else {
				this.$summary_wrapper.css('display', 'flex');
				this.$component.find('.no-summary-placeholder').css('display', 'none');
			}
		}

		get_condition_btn_map(after_submission) {
			if (after_submission)
				{ return [{ condition: true, visible_btns: ['Print Receipt', 'Email Receipt', 'New Order'] }]; }

			return [
				{ condition: this.doc.docstatus === 0, visible_btns: ['Edit Order', 'Delete Order'] },
				{ condition: !this.doc.is_return && this.doc.docstatus === 1, visible_btns: ['Print Receipt', 'Email Receipt', 'Return']},
				{ condition: this.doc.is_return && this.doc.docstatus === 1, visible_btns: ['Print Receipt', 'Email Receipt']}
			];
		}

		load_summary_of(doc, after_submission) {
			if ( after_submission === void 0 ) after_submission=false;

			after_submission ?
				this.$component.css('grid-column', 'span 10 / span 10') :
				this.$component.css('grid-column', 'span 6 / span 6');

			this.toggle_summary_placeholder(false);

			this.doc = doc;

			this.attach_document_info(doc);

			this.attach_items_info(doc);

			this.attach_totals_info(doc);

			this.attach_payments_info(doc);

			var condition_btns_map = this.get_condition_btn_map(after_submission);

			this.add_summary_btns(condition_btns_map);
		}

		attach_document_info(doc) {
			var this$1 = this;

			frappe.db.get_value('Customer', this.doc.customer, 'email_id').then(function (ref) {
				var message = ref.message;

				this$1.customer_email = message.email_id || '';
				var upper_section_dom = this$1.get_upper_section_html(doc);
				this$1.$upper_section.html(upper_section_dom);
			});
		}

		attach_items_info(doc) {
			var this$1 = this;

			this.$items_container.html('');
			doc.items.forEach(function (item) {
				var item_dom = this$1.get_item_html(doc, item);
				this$1.$items_container.append(item_dom);
				this$1.set_dynamic_rate_header_width();
			});
		}

		set_dynamic_rate_header_width() {
			var rate_cols = Array.from(this.$items_container.find(".item-rate-disc"));
			this.$items_container.find(".item-rate-disc").css("width", "");
			var max_width = rate_cols.reduce(function (max_width, elm) {
				if ($(elm).width() > max_width)
					{ max_width = $(elm).width(); }
				return max_width;
			}, 0);

			max_width += 1;
			if (max_width == 1) { max_width = ""; }

			this.$items_container.find(".item-rate-disc").css("width", max_width);
		}

		attach_payments_info(doc) {
			var this$1 = this;

			this.$payment_container.html('');
			doc.payments.forEach(function (p) {
				if (p.amount) {
					var payment_dom = this$1.get_payment_html(doc, p);
					this$1.$payment_container.append(payment_dom);
				}
			});
			if (doc.redeem_loyalty_points && doc.loyalty_amount) {
				var payment_dom = this.get_payment_html(doc, {
					mode_of_payment: 'Loyalty Points',
					amount: doc.loyalty_amount,
				});
				this.$payment_container.append(payment_dom);
			}
		}

		attach_totals_info(doc) {
			this.$totals_container.html('');

			var net_total_dom = this.get_net_total_html(doc);
			var taxes_dom = this.get_taxes_html(doc);
			var discount_dom = this.get_discount_html(doc);
			var grand_total_dom = this.get_grand_total_html(doc);
			this.$totals_container.append(net_total_dom);
			this.$totals_container.append(taxes_dom);
			this.$totals_container.append(discount_dom);
			this.$totals_container.append(grand_total_dom);
		}

		toggle_component(show) {
			show ? this.$component.css('display', 'flex') : this.$component.css('display', 'none');
		}
	};

	erpnext.PointOfSale.Controller = class {
		constructor(wrapper) {
			this.wrapper = $(wrapper).find('.layout-main-section');
			this.page = wrapper.page;

			this.check_opening_entry();
		}

		fetch_opening_entry() {
			return frappe.call("erpnext.selling.page.point_of_sale.point_of_sale.check_opening_entry", { "user": frappe.session.user });
		}

		check_opening_entry() {
			var this$1 = this;

			this.fetch_opening_entry().then(function (r) {
				if (r.message.length) {
					// assuming only one opening voucher is available for the current user
					this$1.prepare_app_defaults(r.message[0]);
				} else {
					this$1.create_opening_voucher();
				}
			});
		}

		create_opening_voucher() {
			var me = this;
			var table_fields = [
				{
					fieldname: "mode_of_payment", fieldtype: "Link",
					in_list_view: 1, label: "Mode of Payment",
					options: "Mode of Payment", reqd: 1
				},
				{
					fieldname: "opening_amount", fieldtype: "Currency",
					in_list_view: 1, label: "Opening Amount",
					options: "company:company_currency",
					change: function () {
						var this$1 = this;

						dialog.fields_dict.balance_details.df.data.some(function (d) {
							if (d.idx == this$1.doc.idx) {
								d.opening_amount = this$1.value;
								dialog.fields_dict.balance_details.grid.refresh();
								return true;
							}
						});
					}
				}
			];
			var fetch_pos_payment_methods = function () {
				var pos_profile = dialog.fields_dict.pos_profile.get_value();
				if (!pos_profile) { return; }
				frappe.db.get_doc("POS Profile", pos_profile).then(function (ref) {
					var payments = ref.payments;

					dialog.fields_dict.balance_details.df.data = [];
					payments.forEach(function (pay) {
						var mode_of_payment = pay.mode_of_payment;
						dialog.fields_dict.balance_details.df.data.push({ mode_of_payment: mode_of_payment, opening_amount: '0' });
					});
					dialog.fields_dict.balance_details.grid.refresh();
				});
			};
			var dialog = new frappe.ui.Dialog({
				title: __('Create POS Opening Entry'),
				static: true,
				fields: [
					{
						fieldtype: 'Link', label: __('Company'), default: frappe.defaults.get_default('company'),
						options: 'Company', fieldname: 'company', reqd: 1
					},
					{
						fieldtype: 'Link', label: __('POS Profile'),
						options: 'POS Profile', fieldname: 'pos_profile', reqd: 1,
						get_query: function () { return pos_profile_query; },
						onchange: function () { return fetch_pos_payment_methods(); }
					},
					{
						fieldname: "balance_details",
						fieldtype: "Table",
						label: "Opening Balance Details",
						cannot_add_rows: false,
						in_place_edit: true,
						reqd: 1,
						data: [],
						fields: table_fields
					}
				],
				primary_action: async function(ref) {
					var company = ref.company;
					var pos_profile = ref.pos_profile;
					var balance_details = ref.balance_details;

					if (!balance_details.length) {
						frappe.show_alert({
							message: __("Please add Mode of payments and opening balance details."),
							indicator: 'red'
						});
						return frappe.utils.play_sound("error");
					}

					// filter balance details for empty rows
					balance_details = balance_details.filter(function (d) { return d.mode_of_payment; });

					var method = "erpnext.selling.page.point_of_sale.point_of_sale.create_opening_voucher";
					var res = await frappe.call({ method: method, args: { pos_profile: pos_profile, company: company, balance_details: balance_details }, freeze:true });
					!res.exc && me.prepare_app_defaults(res.message);
					dialog.hide();
				},
				primary_action_label: __('Submit')
			});
			dialog.show();
			var pos_profile_query = {
				query: 'erpnext.accounts.doctype.pos_profile.pos_profile.pos_profile_query',
				filters: { company: dialog.fields_dict.company.get_value() }
			};
		}

		async prepare_app_defaults(data) {
			var this$1 = this;

			this.pos_opening = data.name;
			this.company = data.company;
			this.pos_profile = data.pos_profile;
			this.pos_opening_time = data.period_start_date;
			this.item_stock_map = {};
			this.settings = {};

			frappe.db.get_value('Stock Settings', undefined, 'allow_negative_stock').then(function (ref) {
				var message = ref.message;

				this$1.allow_negative_stock = flt(message.allow_negative_stock) || false;
			});

			frappe.db.get_doc("POS Profile", this.pos_profile).then(function (profile) {
				Object.assign(this$1.settings, profile);
				this$1.settings.customer_groups = profile.customer_groups.map(function (group) { return group.customer_group; });
				this$1.make_app();
			});
		}

		set_opening_entry_status() {
			this.page.set_title_sub(
				("<span class=\"indicator orange\">\n\t\t\t\t<a class=\"text-muted\" href=\"#Form/POS%20Opening%20Entry/" + (this.pos_opening) + "\">\n\t\t\t\t\tOpened at " + (moment(this.pos_opening_time).format("Do MMMM, h:mma")) + "\n\t\t\t\t</a>\n\t\t\t</span>"));
		}

		make_app() {
			this.prepare_dom();
			this.prepare_components();
			this.prepare_menu();
			this.make_new_invoice();
		}

		prepare_dom() {
			this.wrapper.append(
				"<div class=\"point-of-sale-app\"></div>"
			);

			this.$components_wrapper = this.wrapper.find('.point-of-sale-app');
		}

		prepare_components() {
			this.init_item_selector();
			this.init_item_details();
			this.init_item_cart();
			this.init_payments();
			this.init_recent_order_list();
			this.init_order_summary();
		}

		prepare_menu() {
			this.page.clear_menu();

			this.page.add_menu_item(__("Open Form View"), this.open_form_view.bind(this), false, 'Ctrl+F');

			this.page.add_menu_item(__("Toggle Recent Orders"), this.toggle_recent_order.bind(this), false, 'Ctrl+O');

			this.page.add_menu_item(__("Save as Draft"), this.save_draft_invoice.bind(this), false, 'Ctrl+S');

			this.page.add_menu_item(__('Close the POS'), this.close_pos.bind(this), false, 'Shift+Ctrl+C');
		}

		open_form_view() {
			frappe.model.sync(this.frm.doc);
			frappe.set_route("Form", this.frm.doc.doctype, this.frm.doc.name);
		}

		toggle_recent_order() {
			var show = this.recent_order_list.$component.is(':hidden');
			this.toggle_recent_order_list(show);
		}

		save_draft_invoice() {
			var this$1 = this;

			if (!this.$components_wrapper.is(":visible")) { return; }

			if (this.frm.doc.items.length == 0) {
				frappe.show_alert({
					message: __("You must add atleast one item to save it as draft."),
					indicator:'red'
				});
				frappe.utils.play_sound("error");
				return;
			}

			this.frm.save(undefined, undefined, undefined, function () {
				frappe.show_alert({
					message: __("There was an error saving the document."),
					indicator: 'red'
				});
				frappe.utils.play_sound("error");
			}).then(function () {
				frappe.run_serially([
					function () { return frappe.dom.freeze(); },
					function () { return this$1.make_new_invoice(); },
					function () { return frappe.dom.unfreeze(); } ]);
			});
		}

		close_pos() {
			if (!this.$components_wrapper.is(":visible")) { return; }

			var voucher = frappe.model.get_new_doc('POS Closing Entry');
			voucher.pos_profile = this.frm.doc.pos_profile;
			voucher.user = frappe.session.user;
			voucher.company = this.frm.doc.company;
			voucher.pos_opening_entry = this.pos_opening;
			voucher.period_end_date = frappe.datetime.now_datetime();
			voucher.posting_date = frappe.datetime.now_date();
			frappe.set_route('Form', 'POS Closing Entry', voucher.name);
		}

		init_item_selector() {
			var this$1 = this;

			this.item_selector = new erpnext.PointOfSale.ItemSelector({
				wrapper: this.$components_wrapper,
				pos_profile: this.pos_profile,
				settings: this.settings,
				events: {
					item_selected: function (args) { return this$1.on_cart_update(args); },

					get_frm: function () { return this$1.frm || {}; }
				}
			});
		}

		init_item_cart() {
			var this$1 = this;

			this.cart = new erpnext.PointOfSale.ItemCart({
				wrapper: this.$components_wrapper,
				settings: this.settings,
				events: {
					get_frm: function () { return this$1.frm; },

					cart_item_clicked: function (item) {
						var item_row = this$1.get_item_from_frm(item);
						this$1.item_details.toggle_item_details_section(item_row);
					},

					numpad_event: function (value, action) { return this$1.update_item_field(value, action); },

					checkout: function () { return this$1.payment.checkout(); },

					edit_cart: function () { return this$1.payment.edit_cart(); },

					customer_details_updated: function (details) {
						this$1.customer_details = details;
						// will add/remove LP payment method
						this$1.payment.render_loyalty_points_payment_mode();
					}
				}
			});
		}

		init_item_details() {
			var this$1 = this;

			this.item_details = new erpnext.PointOfSale.ItemDetails({
				wrapper: this.$components_wrapper,
				settings: this.settings,
				events: {
					get_frm: function () { return this$1.frm; },

					toggle_item_selector: function (minimize) {
						this$1.item_selector.resize_selector(minimize);
						this$1.cart.toggle_numpad(minimize);
					},

					form_updated: function (item, field, value) {
						var item_row = frappe.model.get_doc(item.doctype, item.name);
						if (item_row && item_row[field] != value) {
							var args = {
								field: field,
								value: value,
								item: this$1.item_details.current_item
							};
							return this$1.on_cart_update(args);
						}

						return Promise.resolve();
					},

					highlight_cart_item: function (item) {
						var cart_item = this$1.cart.get_cart_item(item);
						this$1.cart.toggle_item_highlight(cart_item);
					},

					item_field_focused: function (fieldname) {
						this$1.cart.toggle_numpad_field_edit(fieldname);
					},
					set_value_in_current_cart_item: function (selector, value) {
						this$1.cart.update_selector_value_in_cart_item(selector, value, this$1.item_details.current_item);
					},
					clone_new_batch_item_in_frm: function (batch_serial_map, item) {
						// called if serial nos are 'auto_selected' and if those serial nos belongs to multiple batches
						// for each unique batch new item row is added in the form & cart
						Object.keys(batch_serial_map).forEach(function (batch) {
							var item_to_clone = this$1.frm.doc.items.find(function (i) { return i.name == item.name; });
							var new_row = this$1.frm.add_child("items", Object.assign({}, item_to_clone));
							// update new serialno and batch
							new_row.batch_no = batch;
							new_row.serial_no = batch_serial_map[batch].join("\n");
							new_row.qty = batch_serial_map[batch].length;
							this$1.frm.doc.items.forEach(function (row) {
								if (item.item_code === row.item_code) {
									this$1.update_cart_html(row);
								}
							});
						});
					},
					remove_item_from_cart: function () { return this$1.remove_item_from_cart(); },
					get_item_stock_map: function () { return this$1.item_stock_map; },
					close_item_details: function () {
						this$1.item_details.toggle_item_details_section(null);
						this$1.cart.prev_action = null;
						this$1.cart.toggle_item_highlight();
					},
					get_available_stock: function (item_code, warehouse) { return this$1.get_available_stock(item_code, warehouse); }
				}
			});
		}

		init_payments() {
			var this$1 = this;

			this.payment = new erpnext.PointOfSale.Payment({
				wrapper: this.$components_wrapper,
				events: {
					get_frm: function () { return this$1.frm || {}; },

					get_customer_details: function () { return this$1.customer_details || {}; },

					toggle_other_sections: function (show) {
						if (show) {
							this$1.item_details.$component.is(':visible') ? this$1.item_details.$component.css('display', 'none') : '';
							this$1.item_selector.$component.css('display', 'none');
						} else {
							this$1.item_selector.$component.css('display', 'flex');
						}
					},

					submit_invoice: function () {
						this$1.frm.savesubmit()
							.then(function (r) {
								this$1.toggle_components(false);
								this$1.order_summary.toggle_component(true);
								this$1.order_summary.load_summary_of(this$1.frm.doc, true);
								frappe.show_alert({
									indicator: 'green',
									message: __('POS invoice {0} created succesfully', [r.doc.name])
								});
							});
					}
				}
			});
		}

		init_recent_order_list() {
			var this$1 = this;

			this.recent_order_list = new erpnext.PointOfSale.PastOrderList({
				wrapper: this.$components_wrapper,
				events: {
					open_invoice_data: function (name) {
						frappe.db.get_doc('POS Invoice', name).then(function (doc) {
							this$1.order_summary.load_summary_of(doc);
						});
					},
					reset_summary: function () { return this$1.order_summary.toggle_summary_placeholder(true); }
				}
			});
		}

		init_order_summary() {
			var this$1 = this;

			this.order_summary = new erpnext.PointOfSale.PastOrderSummary({
				wrapper: this.$components_wrapper,
				events: {
					get_frm: function () { return this$1.frm; },

					process_return: function (name) {
						this$1.recent_order_list.toggle_component(false);
						frappe.db.get_doc('POS Invoice', name).then(function (doc) {
							frappe.run_serially([
								function () { return this$1.make_return_invoice(doc); },
								function () { return this$1.cart.load_invoice(); },
								function () { return this$1.item_selector.toggle_component(true); }
							]);
						});
					},
					edit_order: function (name) {
						this$1.recent_order_list.toggle_component(false);
						frappe.run_serially([
							function () { return this$1.frm.refresh(name); },
							function () { return this$1.frm.call('reset_mode_of_payments'); },
							function () { return this$1.cart.load_invoice(); },
							function () { return this$1.item_selector.toggle_component(true); }
						]);
					},
					delete_order: function (name) {
						frappe.model.delete_doc(this$1.frm.doc.doctype, name, function () {
							this$1.recent_order_list.refresh_list();
						});
					},
					new_order: function () {
						frappe.run_serially([
							function () { return frappe.dom.freeze(); },
							function () { return this$1.make_new_invoice(); },
							function () { return this$1.item_selector.toggle_component(true); },
							function () { return frappe.dom.unfreeze(); } ]);
					}
				}
			});
		}

		toggle_recent_order_list(show) {
			this.toggle_components(!show);
			this.recent_order_list.toggle_component(show);
			this.order_summary.toggle_component(show);
		}

		toggle_components(show) {
			this.cart.toggle_component(show);
			this.item_selector.toggle_component(show);

			// do not show item details or payment if recent order is toggled off
			!show ? (this.item_details.toggle_component(false) || this.payment.toggle_component(false)) : '';
		}

		make_new_invoice() {
			var this$1 = this;

			return frappe.run_serially([
				function () { return frappe.dom.freeze(); },
				function () { return this$1.make_sales_invoice_frm(); },
				function () { return this$1.set_pos_profile_data(); },
				function () { return this$1.set_pos_profile_status(); },
				function () { return this$1.cart.load_invoice(); },
				function () { return frappe.dom.unfreeze(); }
			]);
		}

		make_sales_invoice_frm() {
			var this$1 = this;

			var doctype = 'POS Invoice';
			return new Promise(function (resolve) {
				if (this$1.frm) {
					this$1.frm = this$1.get_new_frm(this$1.frm);
					this$1.frm.doc.items = [];
					this$1.frm.doc.is_pos = 1;
					resolve();
				} else {
					frappe.model.with_doctype(doctype, function () {
						this$1.frm = this$1.get_new_frm();
						this$1.frm.doc.items = [];
						this$1.frm.doc.is_pos = 1;
						resolve();
					});
				}
			});
		}

		get_new_frm(_frm) {
			var doctype = 'POS Invoice';
			var page = $('<div>');
			var frm = _frm || new frappe.ui.form.Form(doctype, page, false);
			var name = frappe.model.make_new_doc_and_get_name(doctype, true);
			frm.refresh(name);

			return frm;
		}

		async make_return_invoice(doc) {
			frappe.dom.freeze();
			this.frm = this.get_new_frm(this.frm);
			this.frm.doc.items = [];
			var res = await frappe.call({
				method: "erpnext.accounts.doctype.pos_invoice.pos_invoice.make_sales_return",
				args: {
					'source_name': doc.name,
					'target_doc': this.frm.doc
				}
			});
			frappe.model.sync(res.message);
			await this.set_pos_profile_data();
			frappe.dom.unfreeze();
		}

		set_pos_profile_data() {
			if (this.company && !this.frm.doc.company) { this.frm.doc.company = this.company; }
			if (this.pos_profile && !this.frm.doc.pos_profile) { this.frm.doc.pos_profile = this.pos_profile; }
			if (!this.frm.doc.company) { return; }

			return this.frm.trigger("set_pos_data");
		}

		set_pos_profile_status() {
			this.page.set_indicator(this.pos_profile, "blue");
		}

		async on_cart_update(args) {
			frappe.dom.freeze();
			var item_row = undefined;
			try {
				var field = args.field;
				var value = args.value;
				var item = args.item;
				item_row = this.get_item_from_frm(item);
				var item_row_exists = !$.isEmptyObject(item_row);

				var from_selector = field === 'qty' && value === "+1";
				if (from_selector)
					{ value = flt(item_row.qty) + flt(value); }

				if (item_row_exists) {
					if (field === 'qty')
						{ value = flt(value); }

					if (['qty', 'conversion_factor'].includes(field) && value > 0 && !this.allow_negative_stock) {
						var qty_needed = field === 'qty' ? value * item_row.conversion_factor : item_row.qty * value;
						await this.check_stock_availability(item_row, qty_needed, this.frm.doc.set_warehouse);
					}

					if (this.is_current_item_being_edited(item_row) || from_selector) {
						await frappe.model.set_value(item_row.doctype, item_row.name, field, value);
						this.update_cart_html(item_row);
					}

				} else {
					if (!this.frm.doc.customer)
						{ return this.raise_customer_selection_alert(); }

					var item_code = item.item_code;
					var batch_no = item.batch_no;
					var serial_no = item.serial_no;
					var rate = item.rate;

					if (!item_code)
						{ return; }

					var new_item = { item_code: item_code, batch_no: batch_no, rate: rate };
					new_item[field] = value;

					if (serial_no) {
						await this.check_serial_no_availablilty(item_code, this.frm.doc.set_warehouse, serial_no);
						new_item['serial_no'] = serial_no;
					}

					if (field === 'serial_no')
						{ new_item['qty'] = value.split("\n").length || 0; }

					item_row = this.frm.add_child('items', new_item);

					if (field === 'qty' && value !== 0 && !this.allow_negative_stock)
						{ await this.check_stock_availability(item_row, value, this.frm.doc.set_warehouse); }

					await this.trigger_new_item_events(item_row);

					this.update_cart_html(item_row);

					if (this.item_details.$component.is(':visible'))
						{ this.edit_item_details_of(item_row); }

					if (this.check_serial_batch_selection_needed(item_row))
						{ this.edit_item_details_of(item_row); }
				}

			} catch (error) {
				console.log(error);
			} finally {
				frappe.dom.unfreeze();
				return item_row;
			}
		}

		raise_customer_selection_alert() {
			frappe.dom.unfreeze();
			frappe.show_alert({
				message: __('You must select a customer before adding an item.'),
				indicator: 'orange'
			});
			frappe.utils.play_sound("error");
		}

		get_item_from_frm(ref) {
			var name = ref.name;
			var item_code = ref.item_code;
			var batch_no = ref.batch_no;
			var uom = ref.uom;
			var rate = ref.rate;

			var item_row = null;
			if (name) {
				item_row = this.frm.doc.items.find(function (i) { return i.name == name; });
			} else {
				// if item is clicked twice from item selector
				// then "item_code, batch_no, uom, rate" will help in getting the exact item
				// to increase the qty by one
				var has_batch_no = batch_no;
				item_row = this.frm.doc.items.find(
					function (i) { return i.item_code === item_code
						&& (!has_batch_no || (has_batch_no && i.batch_no === batch_no))
						&& (i.uom === uom)
						&& (i.rate == rate); }
				);
			}

			return item_row || {};
		}

		edit_item_details_of(item_row) {
			this.item_details.toggle_item_details_section(item_row);
		}

		is_current_item_being_edited(item_row) {
			return item_row.name == this.item_details.current_item.name;
		}

		update_cart_html(item_row, remove_item) {
			this.cart.update_item_html(item_row, remove_item);
			this.cart.update_totals_section(this.frm);
		}

		check_serial_batch_selection_needed(item_row) {
			// right now item details is shown for every type of item.
			// if item details is not shown for every item then this fn will be needed
			var serialized = item_row.has_serial_no;
			var batched = item_row.has_batch_no;
			var no_serial_selected = !item_row.serial_no;
			var no_batch_selected = !item_row.batch_no;

			if ((serialized && no_serial_selected) || (batched && no_batch_selected) ||
				(serialized && batched && (no_batch_selected || no_serial_selected))) {
				return true;
			}
			return false;
		}

		async trigger_new_item_events(item_row) {
			await this.frm.script_manager.trigger('item_code', item_row.doctype, item_row.name);
			await this.frm.script_manager.trigger('qty', item_row.doctype, item_row.name);
		}

		async check_stock_availability(item_row, qty_needed, warehouse) {
			var available_qty = (await this.get_available_stock(item_row.item_code, warehouse)).message;

			frappe.dom.unfreeze();
			var bold_item_code = item_row.item_code.bold();
			var bold_warehouse = warehouse.bold();
			var bold_available_qty = available_qty.toString().bold();
			if (!(available_qty > 0)) {
				frappe.model.clear_doc(item_row.doctype, item_row.name);
				frappe.throw({
					title: __("Not Available"),
					message: __('Item Code: {0} is not available under warehouse {1}.', [bold_item_code, bold_warehouse])
				});
			} else if (available_qty < qty_needed) {
				frappe.show_alert({
					message: __('Stock quantity not enough for Item Code: {0} under warehouse {1}. Available quantity {2}.', [bold_item_code, bold_warehouse, bold_available_qty]),
					indicator: 'orange'
				});
				frappe.utils.play_sound("error");
			}
			frappe.dom.freeze();
		}

		async check_serial_no_availablilty(item_code, warehouse, serial_no) {
			var method = "erpnext.stock.doctype.serial_no.serial_no.get_pos_reserved_serial_nos";
			var args = {filters: { item_code: item_code, warehouse: warehouse }};
			var res = await frappe.call({ method: method, args: args });

			if (res.message.includes(serial_no)) {
				frappe.throw({
					title: __("Not Available"),
					message: __('Serial No: {0} has already been transacted into another POS Invoice.', [serial_no.bold()])
				});
			}
		}

		get_available_stock(item_code, warehouse) {
			var me = this;
			return frappe.call({
				method: "erpnext.accounts.doctype.pos_invoice.pos_invoice.get_stock_availability",
				args: {
					'item_code': item_code,
					'warehouse': warehouse,
				},
				callback: function callback(res) {
					if (!me.item_stock_map[item_code])
						{ me.item_stock_map[item_code] = {}; }
					me.item_stock_map[item_code][warehouse] = res.message;
				}
			});
		}

		update_item_field(value, field_or_action) {
			if (field_or_action === 'checkout') {
				this.item_details.toggle_item_details_section(null);
			} else if (field_or_action === 'remove') {
				this.remove_item_from_cart();
			} else {
				var field_control = this.item_details[(field_or_action + "_control")];
				if (!field_control) { return; }
				field_control.set_focus();
				value != "" && field_control.set_value(value);
			}
		}

		remove_item_from_cart() {
			var this$1 = this;

			frappe.dom.freeze();
			var ref = this.item_details;
			var doctype = ref.doctype;
			var name = ref.name;
			var current_item = ref.current_item;

			frappe.model.set_value(doctype, name, 'qty', 0)
				.then(function () {
					frappe.model.clear_doc(doctype, name);
					this$1.update_cart_html(current_item, true);
					this$1.item_details.toggle_item_details_section(null);
					frappe.dom.unfreeze();
				})
				.catch(function (e) { return console.log(e); });
		}
	};

}());
//# sourceMappingURL=point-of-sale.min.js.map
