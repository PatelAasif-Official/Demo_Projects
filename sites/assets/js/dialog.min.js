(function () {
	'use strict';

	// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
	// MIT License. See license.txt

	// add a new dom element
	frappe.provide('frappe.dom');

	frappe.dom = {
		id_count: 0,
		freeze_count: 0,
		by_id: function(id) {
			return document.getElementById(id);
		},
		get_unique_id: function() {
			var id = 'unique-' + frappe.dom.id_count;
			frappe.dom.id_count++;
			return id;
		},
		set_unique_id: function(ele) {
			var $ele = $(ele);
			if($ele.attr('id')) {
				return $ele.attr('id');
			}
			var id = 'unique-' + frappe.dom.id_count;
			$ele.attr('id', id);
			frappe.dom.id_count++;
			return id;
		},
		eval: function(txt) {
			if(!txt) { return; }
			var el = document.createElement('script');
			el.appendChild(document.createTextNode(txt));
			// execute the script globally
			document.getElementsByTagName('head')[0].appendChild(el);
		},
		remove_script_and_style: function(txt) {
			var evil_tags = ["script", "style", "noscript", "title", "meta", "base", "head"];
			var regex = new RegExp(evil_tags.map(function (tag) { return ("<" + tag + ">.*<\\/" + tag + ">"); }).join('|'), 's');
			if (!regex.test(txt)) {
				// no evil tags found, skip the DOM method entirely!
				return txt;
			}

			var div = document.createElement('div');
			div.innerHTML = txt;
			var found = false;
			evil_tags.forEach(function(e) {
				var elements = div.getElementsByTagName(e);
				i = elements.length;
				while (i--) {
					found = true;
					elements[i].parentNode.removeChild(elements[i]);
				}
			});

			// remove links with rel="stylesheet"
			var elements = div.getElementsByTagName('link');
			var i = elements.length;
			while (i--) {
				if (elements[i].getAttribute("rel")=="stylesheet"){
					found = true;
					elements[i].parentNode.removeChild(elements[i]);
				}
			}
			if(found) {
				return div.innerHTML;
			} else {
				// don't disturb
				return txt;
			}
		},
		is_element_in_viewport: function (el, tolerance) {
			if ( tolerance === void 0 ) tolerance=0;


			//special bonus for those using jQuery
			if (typeof jQuery === "function" && el instanceof jQuery) {
				el = el[0];
			}

			var rect = el.getBoundingClientRect();

			return (
				rect.top + tolerance >= 0
				&& rect.left + tolerance >= 0
				&& rect.bottom - tolerance <= $(window).height()
				&& rect.right - tolerance <= $(window).width()
			);
		},

		is_element_in_modal: function is_element_in_modal(element) {
			return Boolean($(element).parents('.modal').length);
		},

		set_style: function(txt, id) {
			if(!txt) { return; }

			var se = document.createElement('style');
			se.type = "text/css";

			if (id) {
				var element = document.getElementById(id);
				if (element) {
					element.parentNode.removeChild(element);
				}
				se.id = id;
			}

			if (se.styleSheet) {
				se.styleSheet.cssText = txt;
			} else {
				se.appendChild(document.createTextNode(txt));
			}
			document.getElementsByTagName('head')[0].appendChild(se);
			return se;
		},
		add: function(parent, newtag, className, cs, innerHTML, onclick) {
			if(parent && parent.substr){ parent = frappe.dom.by_id(parent); }
			var c = document.createElement(newtag);
			if(parent)
				{ parent.appendChild(c); }

			// if image, 3rd parameter is source
			if(className) {
				if(newtag.toLowerCase()=='img')
					{ c.src = className; }
				else
					{ c.className = className; }
			}
			if(cs) { frappe.dom.css(c,cs); }
			if(innerHTML) { c.innerHTML = innerHTML; }
			if(onclick) { c.onclick = onclick; }
			return c;
		},
		css: function(ele, s) {
			if(ele && s) {
				$.extend(ele.style, s);
			}
			return ele;
		},
		activate: function($parent, $child, common_class, active_class) {
			if ( active_class === void 0 ) active_class='active';

			$parent.find(("." + common_class + "." + active_class))
				.removeClass(active_class);
			$child.addClass(active_class);
		},
		freeze: function(msg, css_class) {
			// blur
			if (!$('#freeze').length) {
				var freeze = $('<div id="freeze" class="modal-backdrop fade"></div>')
					.on("click", function() {
						if (cur_frm && cur_frm.cur_grid) {
							cur_frm.cur_grid.toggle_view();
							return false;
						}
					})
					.appendTo("#body");

				freeze.html(repl('<div class="freeze-message-container"><div class="freeze-message"><p class="lead">%(msg)s</p></div></div>',
					{msg: msg || ""}));

				setTimeout(function() { freeze.addClass("in"); }, 1);

			} else {
				$("#freeze").addClass("in");
			}

			if (css_class) {
				$("#freeze").addClass(css_class);
			}

			frappe.dom.freeze_count++;
		},
		unfreeze: function() {
			if(!frappe.dom.freeze_count) { return; } // anything open?
			frappe.dom.freeze_count--;
			if(!frappe.dom.freeze_count) {
				var freeze = $('#freeze').removeClass("in").remove();
			}
		},
		save_selection: function() {
			// via http://stackoverflow.com/questions/5605401/insert-link-in-contenteditable-element
			if (window.getSelection) {
				var sel = window.getSelection();
				if (sel.getRangeAt && sel.rangeCount) {
					var ranges = [];
					for (var i = 0, len = sel.rangeCount; i < len; ++i) {
						ranges.push(sel.getRangeAt(i));
					}
					return ranges;
				}
			} else if (document.selection && document.selection.createRange) {
				return document.selection.createRange();
			}
			return null;
		},
		restore_selection: function(savedSel) {
			if (savedSel) {
				if (window.getSelection) {
					var sel = window.getSelection();
					sel.removeAllRanges();
					for (var i = 0, len = savedSel.length; i < len; ++i) {
						sel.addRange(savedSel[i]);
					}
				} else if (document.selection && savedSel.select) {
					savedSel.select();
				}
			}
		},
		is_touchscreen: function() {
			return ('ontouchstart' in window)
		},
		handle_broken_images: function handle_broken_images(container) {
			$(container).find('img').on('error', function (e) {
				var $img = $(e.currentTarget);
				$img.addClass('no-image');
			});
		},
		scroll_to_bottom: function scroll_to_bottom(container) {
			var $container = $(container);
			$container.scrollTop($container[0].scrollHeight);
		},
		file_to_base64: function file_to_base64(file_obj) {
			return new Promise(function (resolve) {
				var reader = new FileReader();
				reader.onload = function() {
					resolve(reader.result);
				};
				reader.readAsDataURL(file_obj);
			});
		},
		scroll_to_section: function scroll_to_section(section_name) {
			setTimeout(function () {
				var section = $(("a:contains(\"" + section_name + "\")"));
				if (section.length) {
					if(section.parent().hasClass('collapsed')) {
						// opens the section
						section.click();
					}
					frappe.ui.scroll(section.parent().parent());
				}
			}, 200);
		},
		pixel_to_inches: function pixel_to_inches(pixels) {
			var div = $('<div id="dpi" style="height: 1in; width: 1in; left: 100%; position: fixed; top: 100%;"></div>');
			div.appendTo(document.body);

			var dpi_x = document.getElementById('dpi').offsetWidth;
			var inches = pixels / dpi_x;
			div.remove();

			return inches;
		}
	};

	frappe.ellipsis = function(text, max) {
		if(!max) { max = 20; }
		text = cstr(text);
		if(text.length > max) {
			text = text.substr(0, max) + '...';
		}
		return text;
	};

	frappe.run_serially = function(tasks) {
		var result = Promise.resolve();
		tasks.forEach(function (task) {
			if(task) {
				result = result.then ? result.then(task) : Promise.resolve();
			}
		});
		return result;
	};

	frappe.load_image = function (src, onload, onerror, preprocess) {
		if ( preprocess === void 0 ) preprocess = function () {};

		var tester = new Image();
		tester.onload = function() {
			onload(this);
		};
		tester.onerror = onerror;

		preprocess(tester);
		tester.src = src;
	};

	frappe.timeout = function (seconds) {
		return new Promise(function (resolve) {
			setTimeout(function () { return resolve(); }, seconds * 1000);
		});
	};

	frappe.scrub = function(text, spacer) {
		if ( spacer === void 0 ) spacer='_';

		return text.replace(/ /g, spacer).toLowerCase();
	};

	frappe.unscrub = function(txt) {
		return frappe.model.unscrub(txt);
	};

	frappe.get_data_pill = function (label, target_id, remove_action, image) {
		if ( target_id === void 0 ) target_id=null;
		if ( remove_action === void 0 ) remove_action=null;
		if ( image === void 0 ) image=null;

		var data_pill_wrapper = $(("\n\t\t<button class=\"data-pill btn\">\n\t\t\t<div class=\"flex align-center ellipsis\">\n\t\t\t\t" + (image ? image : '') + "\n\t\t\t\t<span class=\"pill-label " + (image ? "ml-2" : "") + "\">" + label + "</span>\n\t\t\t</div>\n\t\t</button>\n\t"));

		if (remove_action) {
			var remove_btn = $(("\n\t\t\t<span class=\"remove-btn cursor-pointer\">\n\t\t\t\t" + (frappe.utils.icon('close', 'sm')) + "\n\t\t\t</span>\n\t\t")).click(function () {
				remove_action(target_id || label, data_pill_wrapper);
			});
			data_pill_wrapper.append(remove_btn);
		}

		return data_pill_wrapper;
	};

	frappe.get_modal = function(title, content) {
		return $(("<div class=\"modal fade\" style=\"overflow: auto;\" tabindex=\"-1\">\n\t\t<div class=\"modal-dialog\">\n\t\t\t<div class=\"modal-content\">\n\t\t\t\t<div class=\"modal-header\">\n\t\t\t\t\t<div class=\"fill-width flex title-section\">\n\t\t\t\t\t\t<span class=\"indicator hidden\"></span>\n\t\t\t\t\t\t<h4 class=\"modal-title\">" + title + "</h4>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"modal-actions\">\n\t\t\t\t\t\t<button class=\"btn btn-modal-minimize btn-link hide\">\n\t\t\t\t\t\t\t" + (frappe.utils.icon('collapse')) + "\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button class=\"btn btn-modal-close btn-link\" data-dismiss=\"modal\">\n\t\t\t\t\t\t\t" + (frappe.utils.icon('close-alt', 'sm', 'close-alt')) + "\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"modal-body ui-front\">" + content + "</div>\n\t\t\t\t<div class=\"modal-footer hide\">\n\t\t\t\t\t<div class=\"custom-actions\"></div>\n\t\t\t\t\t<div class=\"standard-actions\">\n\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-secondary btn-sm hide btn-modal-secondary\">\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-primary btn-sm hide btn-modal-primary\">\n\t\t\t\t\t\t\t" + (__("Confirm")) + "\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>"));
	};

	frappe.is_online = function() {
		if (frappe.boot.developer_mode == 1) {
			// always online in developer_mode
			return true;
		}
		if ('onLine' in navigator) {
			return navigator.onLine;
		}
		return true;
	};

	// bind online/offline events
	$(window).on('online', function() {
		frappe.show_alert({
			indicator: 'green',
			message: __('You are connected to internet.')
		});
	});

	$(window).on('offline', function() {
		frappe.show_alert({
			indicator: 'orange',
			message: __('Connection lost. Some features might not work.')
		});
	});

	// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
	// MIT License. See license.txt

	// for license information please see license.txt

	frappe.provide("frappe.form.formatters");

	frappe.form.link_formatters = {};

	frappe.form.formatters = {
		_right: function(value, options) {
			if(options && (options.inline || options.only_value)) {
				return value;
			} else {
				return "<div style='text-align: right'>" + value + "</div>";
			}
		},
		Data: function(value, df) {
			if (df && df.options == "URL") {
				return ("<a href=\"" + value + "\" title=\"Open Link\" target=\"_blank\">" + value + "</a>");
			}
			return value==null ? "" : value;
		},
		Select: function(value) {
			return __(frappe.form.formatters["Data"](value));
		},
		Float: function(value, docfield, options, doc) {
			// don't allow 0 precision for Floats, hence or'ing with null
			var precision = docfield.precision
				|| cint(frappe.boot.sysdefaults && frappe.boot.sysdefaults.float_precision)
				|| null;
			if (docfield.options && docfield.options.trim()) {
				// options points to a currency field, but expects precision of float!
				docfield.precision = precision;
				return frappe.form.formatters.Currency(value, docfield, options, doc);

			} else {
				// show 1.000000 as 1
				if (!(options || {}).always_show_decimals && !is_null(value)) {
					var temp = cstr(value).split(".");
					if (temp[1]==undefined || cint(temp[1])===0) {
						precision = 0;
					}
				}

				return frappe.form.formatters._right(
					((value==null || value==="")
						? ""
						: format_number(value, null, precision)), options);
			}
		},
		Int: function(value, docfield, options) {
			return frappe.form.formatters._right(value==null ? "" : cint(value), options)
		},
		Percent: function(value, docfield, options) {
			var precision = (
				docfield.precision
				|| cint(
					frappe.boot.sysdefaults
					&& frappe.boot.sysdefaults.float_precision
				)
				|| 2
			);
			return frappe.form.formatters._right(flt(value, precision) + "%", options);
		},
		Rating: function(value) {
			var rating_html =	"" + ([1, 2, 3, 4, 5].map(function (i) { return ("<svg class=\"icon icon-md " + (i <= (value || 0) ? "star-click": "") + "\" data-idx=\"" + i + "\">\n\t\t\t\t<use href=\"#icon-star\"></use>\n\t\t\t</svg>"); }
			).join(''));
			return ("<div class=\"rating\">\n\t\t\t" + rating_html + "\n\t\t</div>");
		},
		Currency: function (value, docfield, options, doc) {
			var currency  = frappe.meta.get_field_currency(docfield, doc);
			var precision = docfield.precision || cint(frappe.boot.sysdefaults.currency_precision) || 2;

			// If you change anything below, it's going to hurt a company in UAE, a bit.
			if (precision > 2) {
				var parts	 = cstr(value).split("."); // should be minimum 2, comes from the DB
				var decimals = parts.length > 1 ? parts[1] : ""; // parts.length == 2 ???

				if ( decimals.length < 3 || decimals.length < precision ) {
					var fraction = frappe.model.get_value(":Currency", currency, "fraction_units") || 100; // if not set, minimum 2.

					if (decimals.length < cstr(fraction).length) {
						precision = cstr(fraction).length - 1;
					}
				}
			}

			value = (value == null || value === "") ? "" : format_currency(value, currency, precision);

			if ( options && options.only_value ) {
				return value;
			} else {
				return frappe.form.formatters._right(value, options);
			}
		},
		Check: function(value) {
			return ("<input type=\"checkbox\" disabled\n\t\t\tclass=\"disabled-" + (value ? "selected" : "deselected") + "\">");
		},
		Link: function(value, docfield, options, doc) {
			var doctype = docfield._options || docfield.options;
			var original_value = value;
			if(value && value.match && value.match(/^['"].*['"]$/)) {
				value.replace(/^.(.*).$/, "$1");
			}

			if(options && (options.for_print || options.only_value)) {
				return value;
			}

			if(frappe.form.link_formatters[doctype]) {
				// don't apply formatters in case of composite (parent field of same type)
				if (doc && doctype !== doc.doctype) {
					value = frappe.form.link_formatters[doctype](value, doc, docfield);
				}
			}

			if(!value) {
				return "";
			}
			if(value[0] == "'" && value[value.length -1] == "'") {
				return value.substring(1, value.length - 1);
			}
			if(docfield && docfield.link_onclick) {
				return repl('<a onclick="%(onclick)s">%(value)s</a>',
					{onclick: docfield.link_onclick.replace(/"/g, '&quot;'), value:value});
			} else if(docfield && doctype) {
				if (frappe.model.can_read(doctype)) {
					return ("<a\n\t\t\t\t\thref=\"/app/" + (encodeURIComponent(frappe.router.slug(doctype))) + "/" + (encodeURIComponent(original_value)) + "\"\n\t\t\t\t\tdata-doctype=\"" + doctype + "\"\n\t\t\t\t\tdata-name=\"" + original_value + "\">\n\t\t\t\t\t" + (__(options && options.label || value)) + "</a>");
				} else {
					return value;
				}
			} else {
				return value;
			}
		},
		Date: function(value) {
			if (!frappe.datetime.str_to_user) {
				return value;
			}
			if (value) {
				value = frappe.datetime.str_to_user(value);
				// handle invalid date
				if (value==="Invalid date") {
					value = null;
				}
			}

			return value || "";
		},
		DateRange: function(value) {
			if (Array.isArray(value)) {
				return __("{0} to {1}", [frappe.datetime.str_to_user(value[0]), frappe.datetime.str_to_user(value[1])]);
			} else {
				return value || "";
			}
		},
		Datetime: function(value) {
			if(value) {
				var m = moment(frappe.datetime.convert_to_user_tz(value));
				if(frappe.boot.sysdefaults.time_zone) {
					m = m.tz(frappe.boot.sysdefaults.time_zone);
				}
				return m.format(frappe.boot.sysdefaults.date_format.toUpperCase()
					+  ' ' + frappe.boot.sysdefaults.time_format);
			} else {
				return "";
			}
		},
		Text: function(value) {
			if(value) {
				var tags = ["<p", "<div", "<br", "<table"];
				var match = false;

				for(var i=0; i<tags.length; i++) {
					if(value.match(tags[i])) {
						match = true;
						break;
					}
				}

				if(!match) {
					value = frappe.utils.replace_newlines(value);
				}
			}

			return frappe.form.formatters.Data(value);
		},
		Time: function(value) {
			if (value) {
				value = frappe.datetime.str_to_user(value, true);
			}

			return value || "";
		},
		Duration: function(value, docfield) {
			if (value) {
				var duration_options = frappe.utils.get_duration_options(docfield);
				value = frappe.utils.get_formatted_duration(value, duration_options);
			}

			return value || "";
		},
		LikedBy: function(value) {
			var html = "";
			$.each(JSON.parse(value || "[]"), function(i, v) {
				if(v) { html+= frappe.avatar(v); }
			});
			return html;
		},
		Tag: function(value) {
			var html = "";
			$.each((value || "").split(","), function(i, v) {
				if (v) { html += "\n\t\t\t\t<span\n\t\t\t\t\tclass=\"data-pill btn-xs align-center ellipsis\"\n\t\t\t\t\tstyle=\"background-color: var(--control-bg); box-shadow: none; margin-right: 4px;\"\n\t\t\t\t\tdata-field=\"_user_tags\" data-label=\"" + v + "'\">\n\t\t\t\t\t" + v + "\n\t\t\t\t</span>"; }
			});
			return html;
		},
		Comment: function(value) {
			return value;
		},
		Assign: function(value) {
			var html = "";
			$.each(JSON.parse(value || "[]"), function(i, v) {
				if(v) { html+= '<span class="label label-warning" \
				style="margin-right: 7px;"\
				data-field="_assign">'+v+'</span>'; }
			});
			return html;
		},
		SmallText: function(value) {
			return frappe.form.formatters.Text(value);
		},
		TextEditor: function(value) {
			var formatted_value = frappe.form.formatters.Text(value);
			// to use ql-editor styles
			try {
				if (!$(formatted_value).find('.ql-editor').length) {
					formatted_value = "<div class=\"ql-editor read-mode\">" + formatted_value + "</div>";
				}
			} catch(e) {
				formatted_value = "<div class=\"ql-editor read-mode\">" + formatted_value + "</div>";
			}

			return formatted_value;
		},
		Code: function(value) {
			return "<pre>" + (value==null ? "" : $("<div>").text(value).html()) + "</pre>"
		},
		WorkflowState: function(value) {
			var workflow_state = frappe.get_doc("Workflow State", value);
			if(workflow_state) {
				return repl("<span class='label label-%(style)s' \
				data-workflow-state='%(value)s'\
				style='padding-bottom: 4px; cursor: pointer;'>\
				<i class='fa fa-small fa-white fa-%(icon)s'></i> %(value)s</span>", {
						value: value,
						style: workflow_state.style.toLowerCase(),
						icon: workflow_state.icon
					});
			} else {
				return "<span class='label'>" + value + "</span>";
			}
		},
		Email: function(value) {
			return $("<div></div>").text(value).html();
		},
		FileSize: function(value) {
			if(value > 1048576) {
				value = flt(flt(value) / 1048576, 1) + "M";
			} else if (value > 1024) {
				value = flt(flt(value) / 1024, 1) + "K";
			}
			return value;
		},
		TableMultiSelect: function(rows, df, options) {
			rows = rows || [];
			var meta = frappe.get_meta(df.options);
			var link_field = meta.fields.find(function (df) { return df.fieldtype === 'Link'; });
			var formatted_values = rows.map(function (row) {
				var value = row[link_field.fieldname];
				return frappe.format(value, link_field, options, row);
			});
			return formatted_values.join(', ');
		},
		Color: function (value) {
			return value ? ("<div>\n\t\t\t<div class=\"selected-color\" style=\"background-color: " + value + "\"></div>\n\t\t\t<span class=\"color-value\">" + value + "</span>\n\t\t</div>") : '';
		}
	};

	frappe.form.get_formatter = function(fieldtype) {
		if(!fieldtype)
			{ fieldtype = "Data"; }
		return frappe.form.formatters[fieldtype.replace(/ /g, "")] || frappe.form.formatters.Data;
	};

	frappe.format = function(value, df, options, doc) {
		if(!df) { df = {"fieldtype":"Data"}; }
		if (df.fieldname == '_user_tags') { df.fieldtype = 'Tag'; }
		var fieldtype = df.fieldtype || "Data";

		// format Dynamic Link as a Link
		if(fieldtype==="Dynamic Link") {
			fieldtype = "Link";
			df._options = doc ? doc[df.options] : null;
		}

		var formatter = df.formatter || frappe.form.get_formatter(fieldtype);

		var formatted = formatter(value, df, options, doc);

		if (typeof formatted == "string")
			{ formatted = frappe.dom.remove_script_and_style(formatted); }

		return formatted;
	};

	frappe.get_format_helper = function(doc) {
		var helper = {
			get_formatted: function(fieldname) {
				var df = frappe.meta.get_docfield(doc.doctype, fieldname);
				if(!df) { console.log("fieldname not found: " + fieldname); }
				return frappe.format(doc[fieldname], df, {inline:1}, doc);
			}
		};
		$.extend(helper, doc);
		return helper;
	};

	frappe.form.link_formatters['User'] = function(value, doc, docfield) {
		var full_name = doc && (doc.full_name || (docfield && doc[((docfield.fieldname) + "_full_name")]));
		return full_name || value;
	};

	var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
	// MIT License. See license.txt

	/*

	Inheritence "Class"
	-------------------
	see: http://ejohn.org/blog/simple-javascript-inheritance/
	To subclass, use:

		var MyClass = Class.extend({
			init: function
		})

	*/
	// https://stackoverflow.com/a/15052240/5353542

	/* Simple JavaScript Inheritance for ES 5.1
	 * based on http://ejohn.org/blog/simple-javascript-inheritance/
	 *  (inspired by base2 and Prototype)
	 * MIT Licensed.
	 */
	(function(global) {
		var fnTest = /xyz/.test(function(){}) ? /\b_super\b/ : /.*/;

		// The base Class implementation (does nothing)
		function Class(){}

		// Create a new Class that inherits from this class
		Class.extend = function(props) {
		  var _super = this.prototype;

		  // Set up the prototype to inherit from the base class
		  // (but without running the init constructor)
		  var proto = Object.create(_super);

		  // Copy the properties over onto the new prototype
		  for (var name in props) {
			// Check if we're overwriting an existing function
			proto[name] = typeof props[name] === "function" &&
			  typeof _super[name] == "function" && fnTest.test(props[name])
			  ? (function(name, fn){
				  return function() {
					var tmp = this._super;

					// Add a new ._super() method that is the same method
					// but on the super-class
					this._super = _super[name];

					// The method only need to be bound temporarily, so we
					// remove it when we're done executing
					var ret = fn.apply(this, arguments);
					this._super = tmp;

					return ret;
				  };
				})(name, props[name])
			  : props[name];
		  }

		  // The new constructor
		  var newClass = typeof proto.init === "function"
			? proto.hasOwnProperty("init")
			  ? proto.init // All construction is actually done in the init method
			  : function SubClass(){ _super.init.apply(this, arguments); }
			: function EmptyClass(){};

		  // Populate our constructed prototype object
		  newClass.prototype = proto;

		  // Enforce the constructor to be what we expect
		  proto.constructor = newClass;

		  // And make this class extendable
		  newClass.extend = Class.extend;

		  return newClass;
		};

		// export
		global.Class = Class;
	  })(commonjsGlobal);

	frappe.ui.form.Layout = Class.extend({
		init: function (opts) {
			this.views = {};
			this.pages = [];
			this.sections = [];
			this.fields_list = [];
			this.fields_dict = {};

			$.extend(this, opts);
		},
		make: function() {
			if (!this.parent && this.body) {
				this.parent = this.body;
			}
			this.wrapper = $('<div class="form-layout">').appendTo(this.parent);
			this.message = $('<div class="form-message hidden"></div>').appendTo(this.wrapper);
			if (!this.fields) {
				this.fields = this.get_doctype_fields();
			}
			this.setup_tabbing();
			this.render();
		},
		show_empty_form_message: function() {
			if (!(this.wrapper.find(".frappe-control:visible").length || this.wrapper.find(".section-head.collapsed").length)) {
				this.show_message(__("This form does not have any input"));
			}
		},

		get_doctype_fields: function() {
			var fields = [
				this.get_new_name_field()
			];
			if (this.doctype_layout) {
				fields = fields.concat(this.get_fields_from_layout());
			} else {
				fields = fields.concat(frappe.meta.sort_docfields(frappe.meta.docfield_map[this.doctype]));
			}

			return fields;
		},

		get_new_name_field: function get_new_name_field() {
			return {
				parent: this.frm.doctype,
				fieldtype: 'Data',
				fieldname: '__newname',
				reqd: 1,
				hidden: 1,
				label: __('Name'),
				get_status: function(field) {
					if (field.frm && field.frm.is_new()
						&& field.frm.meta.autoname
						&& ['prompt', 'name'].includes(field.frm.meta.autoname.toLowerCase())) {
						return 'Write';
					}
					return 'None';
				}
			};
		},

		get_fields_from_layout: function get_fields_from_layout() {
			var fields = [];
			for (var i = 0, list = this.doctype_layout.fields; i < list.length; i += 1) {
				var f = list[i];

				var docfield = copy_dict(frappe.meta.docfield_map[this.doctype][f.fieldname]);
				docfield.label = f.label;
				fields.push(docfield);
			}
			return fields;
		},

		show_message: function(html, color) {
			if (this.message_color) {
				// remove previous color
				this.message.removeClass(this.message_color);
			}
			this.message_color = (color && ['yellow', 'blue'].includes(color)) ? color : 'blue';
			if (html) {
				if (html.substr(0, 1)!=='<') {
					// wrap in a block
					html = '<div>' + html + '</div>';
				}
				this.message.removeClass('hidden').addClass(this.message_color);
				$(html).appendTo(this.message);
			} else {
				this.message.empty().addClass('hidden');
			}
		},
		render: function (new_fields) {
			var me = this;
			var fields = new_fields || this.fields;

			this.section = null;
			this.column = null;

			if (this.with_dashboard) {
				this.setup_dashboard_section();
			}

			if (this.no_opening_section()) {
				this.make_section();
			}
			$.each(fields, function (i, df) {
				switch (df.fieldtype) {
					case "Fold":
						me.make_page(df);
						break;
					case "Section Break":
						me.make_section(df);
						break;
					case "Column Break":
						me.make_column(df);
						break;
					default:
						me.make_field(df);
				}
			});

		},

		no_opening_section: function () {
			return (this.fields[0] && this.fields[0].fieldtype != "Section Break") || !this.fields.length;
		},

		setup_dashboard_section: function () {
			if (this.no_opening_section()) {
				this.fields.unshift({fieldtype: 'Section Break'});
			}
		},

		replace_field: function (fieldname, df, render) {
			df.fieldname = fieldname; // change of fieldname is avoided
			if (this.fields_dict[fieldname] && this.fields_dict[fieldname].df) {
				var fieldobj = this.init_field(df, render);
				this.fields_dict[fieldname].$wrapper.remove();
				this.fields_list.splice(this.fields_dict[fieldname], 1, fieldobj);
				this.fields_dict[fieldname] = fieldobj;
				if (this.frm) {
					fieldobj.perm = this.frm.perm;
				}
				this.section.fields_list.splice(this.section.fields_dict[fieldname], 1, fieldobj);
				this.section.fields_dict[fieldname] = fieldobj;
				this.refresh_fields([df]);
			}
		},

		make_field: function (df, colspan, render) {
			!this.section && this.make_section();
			!this.column && this.make_column();

			var fieldobj = this.init_field(df, render);
			this.fields_list.push(fieldobj);
			this.fields_dict[df.fieldname] = fieldobj;
			if (this.frm) {
				fieldobj.perm = this.frm.perm;
			}

			this.section.fields_list.push(fieldobj);
			this.section.fields_dict[df.fieldname] = fieldobj;
			fieldobj.section = this.section;
		},

		init_field: function (df, render) {
			if ( render === void 0 ) render = false;

			var fieldobj = frappe.ui.form.make_control({
				df: df,
				doctype: this.doctype,
				parent: this.column.wrapper.get(0),
				frm: this.frm,
				render_input: render,
				doc: this.doc,
				layout: this
			});

			fieldobj.layout = this;
			return fieldobj;
		},

		make_page: function (df) { // eslint-disable-line no-unused-vars
			var me = this,
				head = $('<div class="form-clickable-section text-center">\
				<a class="btn-fold h6 text-muted">' + __("Show more details") + '</a>\
			</div>').appendTo(this.wrapper);

			this.page = $('<div class="form-page second-page hide"></div>').appendTo(this.wrapper);

			this.fold_btn = head.find(".btn-fold").on("click", function () {
				var page = $(this).parent().next();
				if (page.hasClass("hide")) {
					$(this).removeClass("btn-fold").html(__("Hide details"));
					page.removeClass("hide");
					frappe.utils.scroll_to($(this), true, 30);
					me.folded = false;
				} else {
					$(this).addClass("btn-fold").html(__("Show more details"));
					page.addClass("hide");
					me.folded = true;
				}
			});

			this.section = null;
			this.folded = true;
		},

		unfold: function () {
			this.fold_btn.trigger('click');
		},

		make_section: function (df) {
			this.section = new frappe.ui.form.Section(this, df);

			// append to layout fields
			if (df) {
				this.fields_dict[df.fieldname] = this.section;
				this.fields_list.push(this.section);
			}

			this.column = null;
		},

		make_column: function (df) {
			this.column = new frappe.ui.form.Column(this.section, df);
			if (df && df.fieldname) {
				this.fields_list.push(this.column);
			}
		},

		refresh: function (doc) {
			var me = this;
			if (doc) { this.doc = doc; }

			if (this.frm) {
				this.wrapper.find(".empty-form-alert").remove();
			}

			// NOTE this might seem redundant at first, but it needs to be executed when frm.refresh_fields is called
			me.attach_doc_and_docfields(true);

			if (this.frm && this.frm.wrapper) {
				$(this.frm.wrapper).trigger("refresh-fields");
			}

			// dependent fields
			this.refresh_dependency();

			// refresh sections
			this.refresh_sections();

			if (this.frm) {
				// collapse sections
				this.refresh_section_collapse();
			}

			if (document.activeElement) {
				if (document.activeElement.tagName == 'INPUT' && this.is_numeric_field_active()) {
					document.activeElement.select();
				}
			}
		},
		
		is_numeric_field_active: function is_numeric_field_active() {
			var control = $(document.activeElement).closest(".frappe-control");
			var fieldtype = (control.data() || {}).fieldtype;
			return frappe.model.numeric_fieldtypes.includes(fieldtype);
		},

		refresh_sections: function() {
			// hide invisible sections
			this.wrapper.find(".form-section:not(.hide-control)").each(function() {
				var section = $(this).removeClass("empty-section visible-section");
				if (section.find(".frappe-control:not(.hide-control)").length) {
					section.addClass("visible-section");
				} else {
					// nothing visible, hide the section
					section.addClass("empty-section");
				}
			});
		},

		refresh_fields: function (fields) {
			var fieldnames = fields.map(function (field) {
				if (field.fieldname) { return field.fieldname; }
			});

			this.fields_list.map(function (fieldobj) {
				if (fieldnames.includes(fieldobj.df.fieldname)) {
					fieldobj.refresh();
					if (fieldobj.df["default"]) {
						fieldobj.set_input(fieldobj.df["default"]);
					}
				}
			});
		},

		add_fields: function (fields) {
			this.render(fields);
			this.refresh_fields(fields);
		},

		refresh_section_collapse: function () {
			if (!(this.sections && this.sections.length)) { return; }

			for (var i = 0; i < this.sections.length; i++) {
				var section = this.sections[i];
				var df = section.df;
				if (df && df.collapsible) {
					var collapse = true;

					if (df.collapsible_depends_on) {
						collapse = !this.evaluate_depends_on_value(df.collapsible_depends_on);
					}

					if (collapse && section.has_missing_mandatory()) {
						collapse = false;
					}

					section.collapse(collapse);
				}
			}
		},

		attach_doc_and_docfields: function (refresh) {
			var me = this;
			for (var i = 0, l = this.fields_list.length; i < l; i++) {
				var fieldobj = this.fields_list[i];
				if (me.doc) {
					fieldobj.doc = me.doc;
					fieldobj.doctype = me.doc.doctype;
					fieldobj.docname = me.doc.name;
					fieldobj.df = frappe.meta.get_docfield(me.doc.doctype,
						fieldobj.df.fieldname, me.doc.name) || fieldobj.df;

					// on form change, permissions can change
					if (me.frm) {
						fieldobj.perm = me.frm.perm;
					}
				}
				refresh && fieldobj.df && fieldobj.refresh && fieldobj.refresh();
			}
		},

		refresh_section_count: function () {
			this.wrapper.find(".section-count-label:visible").each(function (i) {
				$(this).html(i + 1);
			});
		},
		setup_tabbing: function () {
			var me = this;
			this.wrapper.on("keydown", function (ev) {
				if (ev.which == 9) {
					var current = $(ev.target),
						doctype = current.attr("data-doctype"),
						fieldname = current.attr("data-fieldname");
					if (doctype)
						{ return me.handle_tab(doctype, fieldname, ev.shiftKey); }
				}
			});
		},
		handle_tab: function (doctype, fieldname, shift) {
			var me = this,
				grid_row = null,
				prev = null,
				fields = me.fields_list,
				focused = false;

			// in grid
			if (doctype != me.doctype) {
				grid_row = me.get_open_grid_row();
				if (!grid_row || !grid_row.layout) {
					return;
				}
				fields = grid_row.layout.fields_list;
			}

			for (var i = 0, len = fields.length; i < len; i++) {
				if (fields[i].df.fieldname == fieldname) {
					if (shift) {
						if (prev) {
							this.set_focus(prev);
						} else {
							$(this.primary_button).focus();
						}
						break;
					}
					if (i < len - 1) {
						focused = me.focus_on_next_field(i, fields);
					}

					if (focused) {
						break;
					}
				}
				if (this.is_visible(fields[i]))
					{ prev = fields[i]; }
			}

			if (!focused) {
				// last field in this group
				if (grid_row) {
					// in grid
					if (grid_row.doc.idx == grid_row.grid.grid_rows.length) {
						// last row, close it and find next field
						grid_row.toggle_view(false, function () {
							grid_row.grid.frm.layout.handle_tab(grid_row.grid.df.parent, grid_row.grid.df.fieldname);
						});
					} else {
						// next row
						grid_row.grid.grid_rows[grid_row.doc.idx].toggle_view(true);
					}
				} else if (!shift) {
					// End of tab navigation
					$(this.primary_button).focus();
				}
			}

			return false;
		},
		focus_on_next_field: function (start_idx, fields) {
			// loop to find next eligible fields
			for (var i = start_idx + 1, len = fields.length; i < len; i++) {
				var field = fields[i];
				if (this.is_visible(field)) {
					if (field.df.fieldtype === "Table") {
						// open table grid
						if (!(field.grid.grid_rows && field.grid.grid_rows.length)) {
							// empty grid, add a new row
							field.grid.add_new_row();
						}
						// show grid row (if exists)
						field.grid.grid_rows[0].show_form();
						return true;

					} else if (!in_list(frappe.model.no_value_type, field.df.fieldtype)) {
						this.set_focus(field);
						return true;
					}
				}
			}
		},
		is_visible: function (field) {
			return field.disp_status === "Write" && (field.$wrapper && field.$wrapper.is(":visible"));
		},
		set_focus: function (field) {
			// next is table, show the table
			if (field.df.fieldtype=="Table") {
				if (!field.grid.grid_rows.length) {
					field.grid.add_new_row(1);
				} else {
					field.grid.grid_rows[0].toggle_view(true);
				}
			} else if (field.editor) {
				field.editor.set_focus();
			} else if (field.$input) {
				field.$input.focus();
			}
		},
		get_open_grid_row: function () {
			return $(".grid-row-open").data("grid_row");
		},
		refresh_dependency: function () {
			// Resolve "depends_on" and show / hide accordingly
			var me = this;

			// build dependants' dictionary
			var has_dep = false;

			for (var fkey in this.fields_list) {
				var f = this.fields_list[fkey];
				f.dependencies_clear = true;
				if (f.df.depends_on || f.df.mandatory_depends_on || f.df.read_only_depends_on) {
					has_dep = true;
				}
			}

			if (!has_dep) { return; }

			// show / hide based on values
			for (var i = me.fields_list.length - 1; i >= 0; i--) {
				var f = me.fields_list[i];
				f.guardian_has_value = true;
				if (f.df.depends_on) {
					// evaluate guardian

					f.guardian_has_value = this.evaluate_depends_on_value(f.df.depends_on);

					// show / hide
					if (f.guardian_has_value) {
						if (f.df.hidden_due_to_dependency) {
							f.df.hidden_due_to_dependency = false;
							f.refresh();
						}
					} else {
						if (!f.df.hidden_due_to_dependency) {
							f.df.hidden_due_to_dependency = true;
							f.refresh();
						}
					}
				}

				if (f.df.mandatory_depends_on) {
					this.set_dependant_property(f.df.mandatory_depends_on, f.df.fieldname, 'reqd');
				}

				if (f.df.read_only_depends_on) {
					this.set_dependant_property(f.df.read_only_depends_on, f.df.fieldname, 'read_only');
				}
			}

			this.refresh_section_count();
		},
		set_dependant_property: function (condition, fieldname, property) {
			var set_property = this.evaluate_depends_on_value(condition);
			var value = set_property ? 1 : 0;
			var form_obj;

			if (this.frm) {
				form_obj = this.frm;
			} else if (this.is_dialog || this.doctype === 'Web Form') {
				form_obj = this;
			}
			if (form_obj) {
				if (this.doc && this.doc.parent && this.doc.parentfield) {
					form_obj.setting_dependency = true;
					form_obj.set_df_property(this.doc.parentfield, property, value, this.doc.parent, fieldname, this.doc.name);
					form_obj.setting_dependency = false;
					// refresh child fields
					this.fields_dict[fieldname] && this.fields_dict[fieldname].refresh();
				} else {
					form_obj.set_df_property(fieldname, property, value);
				}
			}
		},
		evaluate_depends_on_value: function (expression) {
			var out = null;
			var doc = this.doc;

			if (!doc && this.get_values) {
				var doc = this.get_values(true);
			}

			if (!doc) {
				return;
			}

			var parent = this.frm ? this.frm.doc : this.doc || null;

			if (typeof (expression) === 'boolean') {
				out = expression;

			} else if (typeof (expression) === 'function') {
				out = expression(doc);

			} else if (expression.substr(0, 5)=='eval:') {
				try {
					out = frappe.utils.eval(expression.substr(5), { doc: doc, parent: parent });
					if (parent && parent.istable && expression.includes('is_submittable')) {
						out = true;
					}
				} catch (e) {
					frappe.throw(__('Invalid "depends_on" expression'));
				}

			} else if (expression.substr(0, 3)=='fn:' && this.frm) {
				out = this.frm.script_manager.trigger(expression.substr(3), this.doctype, this.docname);
			} else {
				var value = doc[expression];
				if ($.isArray(value)) {
					out = !!value.length;
				} else {
					out = !!value;
				}
			}

			return out;
		}
	});

	frappe.ui.form.Section = Class.extend({
		init: function(layout, df) {
			this.layout = layout;
			this.df = df || {};
			this.fields_list = [];
			this.fields_dict = {};

			this.make();
			// if (this.frm)
			// 	this.section.body.css({"padding":"0px 3%"})
			this.row = {
				wrapper: this.wrapper
			};

			this.refresh();
		},
		make: function() {
			if (!this.layout.page) {
				this.layout.page = $('<div class="form-page"></div>').appendTo(this.layout.wrapper);
			}
			var make_card = this.layout.card_layout;
			this.wrapper = $(("<div class=\"row form-section " + (make_card ? "card-section" : "") + "\">"))
				.appendTo(this.layout.page);
			this.layout.sections.push(this);

			if (this.df) {
				if (this.df.label) {
					this.make_head();
				}
				if (this.df.description) {
					$('<div class="col-sm-12 small text-muted form-section-description">' + __(this.df.description) + '</div>')
						.appendTo(this.wrapper);
				}
				if (this.df.cssClass) {
					this.wrapper.addClass(this.df.cssClass);
				}
				if (this.df.hide_border) {
					this.wrapper.toggleClass("hide-border", true);
				}
			}

			// for bc
			this.body = $('<div class="section-body">').appendTo(this.wrapper);
		},

		make_head: function () {
			var this$1 = this;

			this.head = $(("<div class=\"section-head\">\n\t\t\t" + (__(this.df.label)) + "\n\t\t\t<span class=\"ml-2 collapse-indicator mb-1\">\n\t\t\t</span>\n\t\t</div>"));
			this.head.appendTo(this.wrapper);
			this.indicator = this.head.find('.collapse-indicator');
			this.indicator.hide();
			if (this.df.collapsible) {
				// show / hide based on status
				this.collapse_link = this.head.on("click", function () {
					this$1.collapse();
				});

				this.indicator.show();
			}
		},
		refresh: function() {
			if (!this.df)
				{ return; }

			// hide if explictly hidden
			var hide = this.df.hidden || this.df.hidden_due_to_dependency;

			// hide if no perm
			if (!hide && this.layout && this.layout.frm && !this.layout.frm.get_perm(this.df.permlevel || 0, "read")) {
				hide = true;
			}

			this.wrapper.toggleClass("hide-control", !!hide);
		},
		collapse: function (hide) {
			// unknown edge case
			if (!(this.head && this.body)) {
				return;
			}

			if (hide===undefined) {
				hide = !this.body.hasClass("hide");
			}

			this.body.toggleClass("hide", hide);
			this.head.toggleClass("collapsed", hide);

			var indicator_icon = hide ? 'down' : 'up-line';

			this.indicator & this.indicator.html(frappe.utils.icon(indicator_icon, 'sm', 'mb-1'));

			// refresh signature fields
			this.fields_list.forEach(function (f) {
				if (f.df.fieldtype == 'Signature') {
					f.refresh();
				}
			});
		},

		is_collapsed: function is_collapsed() {
			return this.body.hasClass('hide');
		},

		has_missing_mandatory: function () {
			var missing_mandatory = false;
			for (var j = 0, l = this.fields_list.length; j < l; j++) {
				var section_df = this.fields_list[j].df;
				if (section_df.reqd && this.layout.doc[section_df.fieldname] == null) {
					missing_mandatory = true;
					break;
				}
			}
			return missing_mandatory;
		}
	});

	frappe.ui.form.Column = Class.extend({
		init: function(section, df) {
			if (!df) { df = {}; }

			this.df = df;
			this.section = section;
			this.make();
			this.resize_all_columns();
		},
		make: function () {
			this.wrapper = $('<div class="form-column">\
			<form>\
			</form>\
		</div>').appendTo(this.section.body)
				.find("form")
				.on("submit", function () {
					return false;
				});

			if (this.df.label) {
				$('<label class="control-label">' + __(this.df.label)
					+ '</label>').appendTo(this.wrapper);
			}
		},
		resize_all_columns: function () {
			// distribute all columns equally
			var colspan = cint(12 / this.section.wrapper.find(".form-column").length);

			this.section.wrapper.find(".form-column").removeClass()
				.addClass("form-column")
				.addClass("col-sm-" + colspan);

		},
		refresh: function () {
			this.section.refresh();
		}
	});

	frappe.provide('frappe.ui');

	frappe.ui.FieldGroup = frappe.ui.form.Layout.extend({
		init: function(opts) {
			$.extend(this, opts);
			this.dirty = false;
			this._super();
			$.each(this.fields || [], function(i, f) {
				if(!f.fieldname && f.label) {
					f.fieldname = f.label.replace(/ /g, "_").toLowerCase();
				}
			});
			if(this.values) {
				this.set_values(this.values);
			}
		},
		make: function() {
			var this$1 = this;

			var me = this;
			if(this.fields) {
				this._super();
				this.refresh();
				// set default
				$.each(this.fields_list, function(i, field) {
					if (field.df["default"]) {
						var def_value = field.df["default"];

						if (def_value == 'Today' && field.df["fieldtype"] == 'Date') {
							def_value = frappe.datetime.get_today();
						}

						field.set_input(def_value);
						// if default and has depends_on, render its fields.
						me.refresh_dependency();
					}
				});

				if(!this.no_submit_on_enter) {
					this.catch_enter_as_submit();
				}

				$(this.wrapper).find('input, select').on(
					'change awesomplete-selectcomplete',
					function () {
						this$1.dirty = true;
						frappe.run_serially([
							function () { return frappe.timeout(0.1); },
							function () { return me.refresh_dependency(); }
						]);
					}
				);

			}
		},
		first_button: false,
		focus_on_first_input: function() {
			if(this.no_focus) { return; }
			$.each(this.fields_list, function(i, f) {
				if(!in_list(['Date', 'Datetime', 'Time', 'Check'], f.df.fieldtype) && f.set_focus) {
					f.set_focus();
					return false;
				}
			});
		},
		catch_enter_as_submit: function() {
			var me = this;
			$(this.body).find('input[type="text"], input[type="password"], select').keypress(function(e) {
				if(e.which==13) {
					if(me.has_primary_action) {
						e.preventDefault();
						me.get_primary_btn().trigger("click");
					}
				}
			});
		},
		get_input: function(fieldname) {
			var field = this.fields_dict[fieldname];
			return $(field.txt ? field.txt : field.input);
		},
		get_field: function(fieldname) {
			return this.fields_dict[fieldname];
		},
		get_values: function(ignore_errors) {
			var ret = {};
			var errors = [];
			for (var key in this.fields_dict) {
				var f = this.fields_dict[key];
				if (f.get_value) {
					var v = f.get_value();
					if (
						f.df.reqd &&
						is_null(typeof v === 'string' ? strip_html(v) : v)
					)
						{ errors.push(__(f.df.label)); }

					if (f.df.reqd
						&& f.df.fieldtype === 'Text Editor'
						&& is_null(strip_html(cstr(v))))
						{ errors.push(__(f.df.label)); }

					if (!is_null(v)) { ret[f.df.fieldname] = v; }
				}
			}
			if (errors.length && !ignore_errors) {
				frappe.msgprint({
					title: __('Missing Values Required'),
					message: __('Following fields have missing values:') +
						'<br><br><ul><li>' + errors.join('<li>') + '</ul>',
					indicator: 'orange'
				});
				return null;
			}
			return ret;
		},
		get_value: function(key) {
			var f = this.fields_dict[key];
			return f && (f.get_value ? f.get_value() : null);
		},
		set_value: function(key, val){
			var this$1 = this;

			return new Promise(function (resolve) {
				var f = this$1.fields_dict[key];
				if(f) {
					f.set_value(val).then(function () {
						f.set_input(val);
						this$1.refresh_dependency();
						resolve();
					});
				} else {
					resolve();
				}
			});
		},
		set_input: function(key, val) {
			return this.set_value(key, val);
		},
		set_values: function(dict) {
			var promises = [];
			for(var key in dict) {
				if(this.fields_dict[key]) {
					promises.push(this.set_value(key, dict[key]));
				}
			}

			return Promise.all(promises);
		},
		clear: function() {
			for(var key in this.fields_dict) {
				var f = this.fields_dict[key];
				if(f && f.set_input) {
					f.set_input(f.df['default'] || '');
				}
			}
		},
		set_df_property: function (fieldname, prop, value) {
			var field    = this.get_field(fieldname);
			field.df[prop] = value;
			field.refresh();
		}
	});

	// Copyright (c) 2018, Frappe Technologies Pvt. Ltd. and Contributors
	// MIT License. See license.txt

	frappe.ui.form.LinkSelector = Class.extend({
		init: function (opts) {
			/* help: Options: doctype, get_query, target */
			$.extend(this, opts);

			var me = this;
			if (this.doctype != "[Select]") {
				frappe.model.with_doctype(this.doctype, function (r) {
					me.make();
				});
			} else {
				this.make();
			}
		},
		make: function () {
			var me = this;

			this.start = 0;
			this.dialog = new frappe.ui.Dialog({
				title: __("Select {0}", [(this.doctype == '[Select]') ? __("value") : __(this.doctype)]),
				fields: [
					{
						fieldtype: "Data", fieldname: "txt", label: __("Beginning with"),
						description: __("You can use wildcard %"),
					},
					{
						fieldtype: "HTML", fieldname: "results"
					},
					{
						fieldtype: "Button", fieldname: "more", label: __("More"), click: function () {
							me.start += 20;
							me.search();
						}
					}
				],
				primary_action_label: __("Search"),
				primary_action: function () {
					me.start = 0;
					me.search();
				}
			});

			if (this.txt)
				{ this.dialog.fields_dict.txt.set_input(this.txt); }

			this.dialog.get_input("txt").on("keypress", function (e) {
				if (e.which === 13) {
					me.start = 0;
					me.search();
				}
			});
			this.dialog.show();
			this.search();
		},
		search: function () {
			var args = {
				txt: this.dialog.fields_dict.txt.get_value(),
				searchfield: "name",
				start: this.start
			};
			var me = this;

			if (this.target.set_custom_query) {
				this.target.set_custom_query(args);
			}

			// load custom query from grid
			if (this.target.is_grid && this.target.fieldinfo[this.fieldname]
				&& this.target.fieldinfo[this.fieldname].get_query) {
				$.extend(args,
					this.target.fieldinfo[this.fieldname].get_query(cur_frm.doc));
			}

			frappe.link_search(this.doctype, args, function (r) {
				var parent = me.dialog.fields_dict.results.$wrapper;
				if (args.start === 0) {
					parent.empty();
				}

				if (r.values.length) {
					$.each(r.values, function (i, v) {
						var row = $(repl('<div class="row link-select-row">\
						<div class="col-xs-4">\
							<b><a href="#">%(name)s</a></b></div>\
						<div class="col-xs-8">\
							<span class="text-muted">%(values)s</span></div>\
						</div>', {
								name: v[0],
								values: v.splice(1).join(", ")
							})).appendTo(parent);

						row.find("a")
							.attr('data-value', v[0])
							.click(function () {
								var value = $(this).attr("data-value");
								if (me.target.is_grid) {
									// set in grid
									me.set_in_grid(value);
								} else {
									if (me.target.doctype)
										{ me.target.parse_validate_and_set_in_model(value); }
									else {
										me.target.set_input(value);
										me.target.$input.trigger("change");
									}
									me.dialog.hide();
								}
								return false;
							});
					});
				} else {
					$('<p><br><span class="text-muted">' + __("No Results") + '</span>'
						+ (frappe.model.can_create(me.doctype) ?
							('<br><br><a class="new-doc btn btn-default btn-sm">'
								+ __('Create a new {0}', [__(me.doctype)]) + "</a>") : '')
						+ '</p>').appendTo(parent).find(".new-doc").click(function () {
							frappe.new_doc(me.doctype);
						});
				}

				if (r.values.length < 20) {
					var more_btn = me.dialog.fields_dict.more.$wrapper;
					more_btn.hide();
				}

			}, this.dialog.get_primary_btn());

		},
		set_in_grid: function (value) {
			var me = this, updated = false;
			var d = null;
			if (this.qty_fieldname) {
				frappe.prompt({
					fieldname: "qty", fieldtype: "Float", label: "Qty",
					"default": 1, reqd: 1
				}, function (data) {
					$.each(me.target.frm.doc[me.target.df.fieldname] || [], function (i, d) {
						if (d[me.fieldname] === value) {
							frappe.model.set_value(d.doctype, d.name, me.qty_fieldname, data.qty);
							frappe.show_alert(__("Added {0} ({1})", [value, d[me.qty_fieldname]]));
							updated = true;
							return false;
						}
					});
					if (!updated) {
						frappe.run_serially([
							function () {
								d = me.target.add_new_row();
							},
							function () { return frappe.timeout(0.1); },
							function () {
								var args = {};
								args[me.fieldname] = value;
								args[me.qty_fieldname] = data.qty;

								return frappe.model.set_value(d.doctype, d.name, args);
							},
							function () { return frappe.show_alert(__("Added {0} ({1})", [value, data.qty])); }
						]);
					}
				}, __("Set Quantity"), __("Set"));
			} else if (me.dynamic_link_field) {
				var d = me.target.add_new_row();
				frappe.model.set_value(d.doctype, d.name, me.dynamic_link_field, me.dynamic_link_reference);
				frappe.model.set_value(d.doctype, d.name, me.fieldname, value);
				frappe.show_alert(__("{0} {1} added", [me.dynamic_link_reference, value]));
			} else {
				var d = me.target.add_new_row();
				frappe.model.set_value(d.doctype, d.name, me.fieldname, value);
				frappe.show_alert(__("{0} added", [value]));
			}
		}
	});

	frappe.link_search = function (doctype, args, callback, btn) {
		if (!args) {
			args = {
				txt: ''
			};
		}
		args.doctype = doctype;
		if (!args.searchfield) {
			args.searchfield = 'name';
		}

		frappe.call({
			method: "frappe.desk.search.search_widget",
			type: "GET",
			args: args,
			callback: function (r) {
				callback && callback(r);
			},
			btn: btn
		});
	};

	frappe.ui.form.MultiSelectDialog = class MultiSelectDialog {
		constructor(opts) {
		var this$1 = this;

			/* Options: doctype, target, setters, get_query, action, add_filters_group, data_fields, primary_action_label */
			Object.assign(this, opts);
			this.for_select = this.doctype == "[Select]";
			if (!this.for_select) {
				frappe.model.with_doctype(this.doctype, function () { return this$1.init(); });
			} else {
				this.init();
			}
		}

		init() {
			this.page_length = 20;
			this.start = 0;
			this.fields = this.get_fields();

			this.make();
		}

		get_fields() {
			var primary_fields = this.get_primary_filters();
			var result_fields = this.get_result_fields();
			var data_fields = this.get_data_fields();
			var child_selection_fields = this.get_child_selection_fields();

			return primary_fields.concat( result_fields, data_fields, child_selection_fields);
		}

		get_result_fields() {
			var this$1 = this;

			var show_next_page = function () {
				this$1.start += 20;
				this$1.get_results();
			};
			return [
				{
					fieldtype: "HTML", fieldname: "results_area"
				},
				{
					fieldtype: "Button", fieldname: "more_btn",
					label: __("More"), click: show_next_page.bind(this)
				}
			];
		}

		get_data_fields() {
			if (this.data_fields && this.data_fields.length) {
				// Custom Data Fields
				return [
					{ fieldtype: "Section Break" } ].concat( this.data_fields
				);
			} else {
				return [];
			}
		}

		get_child_selection_fields() {
			var fields = [];
			if (this.allow_child_item_selection && this.child_fieldname) {
				fields.push({ fieldtype: "HTML", fieldname: "child_selection_area" });
			}
			return fields;
		}

		make() {
			var this$1 = this;

			var doctype_plural = this.doctype.plural();
			var title = __("Select {0}", [this.for_select ? __("value") : __(doctype_plural)]);

			this.dialog = new frappe.ui.Dialog({
				title: title,
				fields: this.fields,
				primary_action_label: this.primary_action_label || __("Get Items"),
				secondary_action_label: __("Make {0}", [__(this.doctype)]),
				primary_action: function () {
					var filters_data = this$1.get_custom_filters();
					var data_values = cur_dialog.get_values(); // to pass values of data fields
					var filtered_children = this$1.get_selected_child_names();
					var selected_documents = this$1.get_checked_values().concat( this$1.get_parent_name_of_selected_children());
					this$1.action(selected_documents, Object.assign({}, this$1.args,
						data_values,
						filters_data,
						{filtered_children: filtered_children}));
				},
				secondary_action: this.make_new_document.bind(this)
			});

			if (this.add_filters_group) {
				this.make_filter_area();
			}

			this.args = {};

			this.setup_results();
			this.bind_events();
			this.get_results();
			this.dialog.show();
		}

		make_new_document(e) {
			// If user wants to close the modal
			if (e) {
				this.set_route_options();
				frappe.new_doc(this.doctype, true);
			}
		}

		set_route_options() {
			var this$1 = this;

			// set route options to get pre-filled form fields
			frappe.route_options = {};
			if (Array.isArray(this.setters)) {
				for (var i = 0, list = this.setters; i < list.length; i += 1) {
					var df = list[i];

					frappe.route_options[df.fieldname] = this.dialog.fields_dict[df.fieldname].get_value() || undefined;
				}
			} else {
				Object.keys(this.setters).forEach(function (setter) {
					frappe.route_options[setter] = this$1.dialog.fields_dict[setter].get_value() || undefined;
				});
			}
		}

		setup_results() {
			this.$parent = $(this.dialog.body);
			this.$wrapper = this.dialog.fields_dict.results_area.$wrapper.append("<div class=\"results mt-3\"\n\t\t\tstyle=\"border: 1px solid #d1d8dd; border-radius: 3px; height: 300px; overflow: auto;\"></div>");

			this.$results = this.$wrapper.find('.results');
			this.$results.append(this.make_list_row());
		}

		toggle_child_selection() {
			var this$1 = this;

			if (this.dialog.fields_dict['allow_child_item_selection'].get_value()) {
				this.get_child_result().then(function (r) {
					this$1.child_results = r.message || [];
					this$1.render_child_datatable();
		
					this$1.$wrapper.addClass('hidden');
					this$1.$child_wrapper.removeClass('hidden');
					this$1.dialog.fields_dict.more_btn.$wrapper.hide();
				});
			} else {
				this.child_results = [];
				this.get_results();
				this.$wrapper.removeClass('hidden');
				this.$child_wrapper.addClass('hidden');
			}
		}

		render_child_datatable() {
			var this$1 = this;

			if (!this.child_datatable) {
				this.setup_child_datatable();
			} else {
				setTimeout(function () {
					this$1.child_datatable.rowmanager.checkMap = [];
					this$1.child_datatable.refresh(this$1.get_child_datatable_rows());
					this$1.$child_wrapper.find('.dt-scrollable').css('height', '300px');
				}, 500);
			}
		}

		get_child_datatable_columns() {
			var parent = this.doctype;
			return [parent ].concat( this.child_columns).map(function (d) { return ({ name: frappe.unscrub(d), editable: false }); });
		}

		get_child_datatable_rows() {
			return this.child_results.map(function (d) { return Object.values(d).slice(1); }); // slice name field
		}

		setup_child_datatable() {
			var header_columns = this.get_child_datatable_columns();
			var rows = this.get_child_datatable_rows();
			this.$child_wrapper = this.dialog.fields_dict.child_selection_area.$wrapper;
			this.$child_wrapper.addClass('mt-3');

			this.child_datatable = new frappe.DataTable(this.$child_wrapper.get(0), {
				columns: header_columns,
				data: rows,
				layout: 'fluid',
				inlineFilters: true,
				serialNoColumn: false,
				checkboxColumn: true,
				cellHeight: 35,
				noDataMessage: __('No Data'),
				disableReorderColumn: true
			});
			this.$child_wrapper.find('.dt-scrollable').css('height', '300px');
		}

		get_primary_filters() {
			var this$1 = this;

			var fields = [];

			var columns = new Array(3);

			// Hack for three column layout
			// To add column break
			columns[0] = [
				{
					fieldtype: "Data",
					label: __("Name"),
					fieldname: "search_term"
				}
			];
			columns[1] = [];
			columns[2] = [];

			if ($.isArray(this.setters)) {
				this.setters.forEach(function (setter, index) {
					columns[(index + 1) % 3].push(setter);
				});
			} else {
				Object.keys(this.setters).forEach(function (setter, index) {
					var df_prop = frappe.meta.docfield_map[this$1.doctype][setter];

					// Index + 1 to start filling from index 1
					// Since Search is a standrd field already pushed
					columns[(index + 1) % 3].push({
						fieldtype: df_prop.fieldtype,
						label: df_prop.label,
						fieldname: setter,
						options: df_prop.options,
						default: this$1.setters[setter]
					});
				});
			}

			// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal
			if (Object.seal) {
				Object.seal(columns);
				// now a is a fixed-size array with mutable entries
			}

			if (this.allow_child_item_selection) {
				this.child_doctype = frappe.meta.get_docfield(this.doctype, this.child_fieldname).options;
				columns[0].push({
					fieldtype: "Check",
					label: __("Select {0}", [this.child_doctype]),
					fieldname: "allow_child_item_selection",
					onchange: this.toggle_child_selection.bind(this)
				});
			}

			fields = columns[0].concat( [{ fieldtype: "Column Break" }],
				columns[1],
				[{ fieldtype: "Column Break" }],
				columns[2],
				[{ fieldtype: "Section Break", fieldname: "primary_filters_sb" }]
			);

			if (this.add_filters_group) {
				fields.push(
					{
						fieldtype: 'HTML',
						fieldname: 'filter_area',
					}
				);
			}

			return fields;
		}

		make_filter_area() {
			var this$1 = this;

			this.filter_group = new frappe.ui.FilterGroup({
				parent: this.dialog.get_field('filter_area').$wrapper,
				doctype: this.doctype,
				on_change: function () {
					this$1.get_results();
				}
			});
			// 'Apply Filter' breaks since the filers are not in a popover
			// Hence keeping it hidden
			this.filter_group.wrapper.find('.apply-filters').hide();
		}

		get_custom_filters() {
			if (this.add_filters_group && this.filter_group) {
				return this.filter_group.get_filters().reduce(function (acc, filter) {
					var obj;

					return Object.assign(acc, ( obj = {}, obj[filter[1]] = [filter[2], filter[3]], obj ));
				}, {});
			} else {
				return {};
			}
		}

		bind_events() {
			var this$1 = this;

			var me = this;

			this.$results.on('click', '.list-item-container', function (e) {
				if (!$(e.target).is(':checkbox') && !$(e.target).is('a')) {
					$(this).find(':checkbox').trigger('click');
				}
			});

			this.$results.on('click', '.list-item--head :checkbox', function (e) {
				this$1.$results.find('.list-item-container .list-row-check')
					.prop("checked", ($(e.target).is(':checked')));
			});

			this.$parent.find('.input-with-feedback').on('change', function () {
				frappe.flags.auto_scroll = false;
				this$1.get_results();
			});

			this.$parent.find('[data-fieldtype="Data"]').on('input', function () {
				var $this = $(this$1);
				clearTimeout($this.data('timeout'));
				$this.data('timeout', setTimeout(function () {
					frappe.flags.auto_scroll = false;
					me.empty_list();
					me.get_results();
				}, 300));
			});
		}

		get_parent_name_of_selected_children() {
			var this$1 = this;

			if (!this.child_datatable || !this.child_datatable.datamanager.rows.length) { return []; }

			var parent_names = this.child_datatable.rowmanager.checkMap.reduce(function (parent_names, checked, index) {
				if (checked == 1) {
					var parent_name = this$1.child_results[index].parent;
					parent_names.push(parent_name);
				}
				return parent_names;
			}, []);

			return parent_names;
		}

		get_selected_child_names() {
			var this$1 = this;

			if (!this.child_datatable || !this.child_datatable.datamanager.rows.length) { return []; }

			var checked_names = this.child_datatable.rowmanager.checkMap.reduce(function (checked_names, checked, index) {
				if (checked == 1) {
					var child_row_name = this$1.child_results[index].name;
					checked_names.push(child_row_name);
				}
				return checked_names;
			}, []);

			return checked_names;
		}

		get_checked_values() {
			// Return name of checked value.
			return this.$results.find('.list-item-container').map(function () {
				if ($(this).find('.list-row-check:checkbox:checked').length > 0) {
					return $(this).attr('data-item-name');
				}
			}).get();
		}

		get_checked_items() {
			// Return checked items with all the column values.
			var checked_values = this.get_checked_values();
			return this.results.filter(function (res) { return checked_values.includes(res.name); });
		}

		make_list_row(result) {
			if ( result === void 0 ) result = {};

			var me = this;
			// Make a head row by default (if result not passed)
			var head = Object.keys(result).length === 0;

			var contents = "";
			var columns = ["name"];

			if ($.isArray(this.setters)) {
				for (var i = 0, list = this.setters; i < list.length; i += 1) {
					var df = list[i];

					columns.push(df.fieldname);
				}
			} else {
				columns = columns.concat(Object.keys(this.setters));
			}

			columns.forEach(function (column) {
				contents += "<div class=\"list-item__content ellipsis\">\n\t\t\t\t" + (head ? ("<span class=\"ellipsis text-muted\" title=\"" + (__(frappe.model.unscrub(column))) + "\">" + (__(frappe.model.unscrub(column))) + "</span>")
			: (column !== "name" ? ("<span class=\"ellipsis result-row\" title=\"" + (__(result[column] || '')) + "\">" + (__(result[column] || '')) + "</span>")
				: ("<a href=\"" + ("/app/" + frappe.router.slug(me.doctype) + "/" + result[column] || '') + "\" class=\"list-id ellipsis\" title=\"" + (__(result[column] || '')) + "\">\n\t\t\t\t\t\t\t" + (__(result[column] || '')) + "</a>"))) + "\n\t\t\t</div>";
			});

			var $row = $(("<div class=\"list-item\">\n\t\t\t<div class=\"list-item__content\" style=\"flex: 0 0 10px;\">\n\t\t\t\t<input type=\"checkbox\" class=\"list-row-check\" data-item-name=\"" + (result.name) + "\" " + (result.checked ? 'checked' : '') + ">\n\t\t\t</div>\n\t\t\t" + contents + "\n\t\t</div>"));

			head ? $row.addClass('list-item--head')
				: $row = $(("<div class=\"list-item-container\" data-item-name=\"" + (result.name) + "\"></div>")).append($row);

			return $row;
		}

		render_result_list(results, more, empty) {
			if ( more === void 0 ) more = 0;
			if ( empty === void 0 ) empty = true;

			var me = this;
			var more_btn = me.dialog.fields_dict.more_btn.$wrapper;

			// Make empty result set if filter is set
			if (!frappe.flags.auto_scroll && empty) {
				this.empty_list();
			}
			more_btn.hide();
			$(".modal-dialog .list-item--head").css("z-index", 0);

			if (results.length === 0) { return; }
			if (more) { more_btn.show(); }

			var checked = this.get_checked_values();

			results
				.filter(function (result) { return !checked.includes(result.name); })
				.forEach(function (result) {
					me.$results.append(me.make_list_row(result));
				});

			this.$results.find(".list-item--head").css("z-index", 0);

			if (frappe.flags.auto_scroll) {
				this.$results.animate({ scrollTop: me.$results.prop('scrollHeight') }, 500);
			}
		}

		empty_list() {
			// Store all checked items
			var checked = this.get_checked_items().map(function (item) {
				return Object.assign({}, item,
					{checked: true});
			});

			// Remove **all** items
			this.$results.find('.list-item-container').remove();

			// Rerender checked items
			this.render_result_list(checked, 0, false);
		}

		get_filters_from_setters() {
			var me = this;
			var filters = this.get_query ? this.get_query().filters : {} || {};
			var filter_fields = [];

			if ($.isArray(this.setters)) {
				for (var i = 0, list = this.setters; i < list.length; i += 1) {
					var df = list[i];

					filters[df.fieldname] = me.dialog.fields_dict[df.fieldname].get_value() || undefined;
					me.args[df.fieldname] = filters[df.fieldname];
					filter_fields.push(df.fieldname);
				}
			} else {
				Object.keys(this.setters).forEach(function (setter) {
					var value = me.dialog.fields_dict[setter].get_value();
					if (me.dialog.fields_dict[setter].df.fieldtype == "Data" && value) {
						filters[setter] = ["like", "%" + value + "%"];
					} else {
						filters[setter] = value || undefined;
						me.args[setter] = filters[setter];
						filter_fields.push(setter);
					}
				});
			}

			return [filters, filter_fields];
		}

		get_args_for_search() {
			var ref = this.get_filters_from_setters();
			var filters = ref[0];
			var filter_fields = ref[1];

			var custom_filters = this.get_custom_filters();
			Object.assign(filters, custom_filters);

			return {
				doctype: this.doctype,
				txt: this.dialog.fields_dict["search_term"].get_value(),
				filters: filters,
				filter_fields: filter_fields,
				start: this.start,
				page_length: this.page_length + 1,
				query: this.get_query ? this.get_query().query : '',
				as_dict: 1
			};
		}

		async perform_search(args) {
			var res = await frappe.call({
				type: "GET",
				method: 'frappe.desk.search.search_widget',
				no_spinner: true,
				args: args,
			});
			var more = res.values.length && res.values.length > this.page_length ? 1 : 0;
			if (more) {
				res.values.pop();
			}

			return [res, more];
		}

		async get_results() {
			var this$1 = this;

			var args = this.get_args_for_search();
			var ref = await this.perform_search(args);
			var res = ref[0];
			var more = ref[1];

			this.results = [];
			if (res.values.length) {
				res.values.forEach(function (result) {
					result.checked = 0;
					this$1.results.push(result);
				});
			}
			this.render_result_list(this.results, more);
		}

		async get_filtered_parents_for_child_search() {
			var parent_search_args = this.get_args_for_search();
			parent_search_args.filter_fields = ['name'];
			// eslint-disable-next-line no-unused-vars
			var ref = await this.perform_search(parent_search_args);
			var response = ref[0];
			var _ = ref[1];

			var parent_names = [];
			if (response.values.length) {
				parent_names = response.values.map(function (v) { return v.name; });
			}
			return parent_names;
		}

		async add_parent_filters(filters) {
			var parent_names = await this.get_filtered_parents_for_child_search();
			if (parent_names.length) {
				filters.push([ "parent", "in", parent_names ]);
			}
		}

		add_custom_child_filters(filters) {
			var this$1 = this;

			if (this.add_filters_group && this.filter_group) {
				this.filter_group.get_filters().forEach(function (filter) {
					if (filter[0] == this$1.child_doctype) {
						filters.push([filter[1], filter[2], filter[3]]);
					}
				});
			}
		}

		async get_child_result() {
			var filters = [["parentfield", "=", this.child_fieldname]];

			await this.add_parent_filters(filters);
			this.add_custom_child_filters(filters);

			return frappe.call({
				method: "frappe.client.get_list",
				args: {
					doctype: this.child_doctype,
					filters: filters,
					fields: ['name', 'parent' ].concat( this.child_columns),
					parent: this.doctype,
					order_by: 'parent'
				}
			});
		}
	};

	frappe.provide('frappe.ui');

	window.cur_dialog = null;

	frappe.ui.open_dialogs = [];

	frappe.ui.Dialog = class Dialog extends frappe.ui.FieldGroup {
		constructor(opts) {
			super();
			this.display = false;
			this.is_dialog = true;

			$.extend(this, { animate: true, size: null }, opts);
			this.make();
		}

		make() {
			var this$1 = this;

			this.$wrapper = frappe.get_modal("", "");

			if(this.static) {
				this.$wrapper.modal({
					backdrop: 'static',
					keyboard: false
				});
				this.get_close_btn().hide();
			}

			this.wrapper = this.$wrapper.find('.modal-dialog')
				.get(0);
			if (this.size == "small" )
				{ $(this.wrapper).addClass("modal-sm"); }
			else if (this.size == "large" )
				{ $(this.wrapper).addClass("modal-lg"); }
			else if (this.size == "extra-large" )
				{ $(this.wrapper).addClass("modal-xl"); }

			this.make_head();
			this.modal_body = this.$wrapper.find(".modal-body");
			this.$body = $('<div></div>').appendTo(this.modal_body);
			this.body = this.$body.get(0);
			this.$message = $('<div class="hide modal-message"></div>').appendTo(this.modal_body);
			this.header = this.$wrapper.find(".modal-header");
			this.footer = this.$wrapper.find(".modal-footer");
			this.standard_actions = this.footer.find('.standard-actions');
			this.custom_actions = this.footer.find('.custom-actions');
			this.set_indicator();

			// make fields (if any)
			super.make();

			this.refresh_section_collapse();

			// show footer
			this.action = this.action || { primary: { }, secondary: { } };
			if (this.primary_action || (this.action.primary && this.action.primary.onsubmit)) {
				this.set_primary_action(this.primary_action_label || this.action.primary.label || __("Submit"),
					this.primary_action || this.action.primary.onsubmit);
			}

			if (this.secondary_action) {
				this.set_secondary_action(this.secondary_action);
			}

			if (this.secondary_action_label || (this.action.secondary && this.action.secondary.label)) {
				this.set_secondary_action_label(this.secondary_action_label || this.action.secondary.label);
			}

			if (this.minimizable) {
				this.header.find('.title-section').click(function () { return this$1.is_minimized && this$1.toggle_minimize(); });
				this.get_minimize_btn().removeClass('hide').on('click', function () { return this$1.toggle_minimize(); });
			}

			var me = this;
			this.$wrapper
				.on("hide.bs.modal", function() {
					me.display = false;

					if(frappe.ui.open_dialogs[frappe.ui.open_dialogs.length-1]===me) {
						frappe.ui.open_dialogs.pop();
						if(frappe.ui.open_dialogs.length) {
							window.cur_dialog = frappe.ui.open_dialogs[frappe.ui.open_dialogs.length-1];
						} else {
							window.cur_dialog = null;
						}
					}
					me.onhide && me.onhide();
					me.on_hide && me.on_hide();
				})
				.on("shown.bs.modal", function() {
					// focus on first input
					me.display = true;
					window.cur_dialog = me;
					frappe.ui.open_dialogs.push(me);
					me.focus_on_first_input();
					me.on_page_show && me.on_page_show();
					$(document).trigger('frappe.ui.Dialog:shown');
				})
				.on('scroll', function() {
					var $input = $('input:focus');
					if ($input.length && ['Date', 'Datetime', 'Time'].includes($input.attr('data-fieldtype'))) {
						$input.blur();
					}
				});

		}

		get_primary_btn() {
			return this.standard_actions.find(".btn-primary");
		}

		get_minimize_btn() {
			return this.$wrapper.find(".modal-header .btn-modal-minimize");
		}

		set_message(text) {
			this.$message.removeClass('hide');
			this.$body.addClass('hide');
			this.$message.text(text);
		}

		clear_message() {
			this.$message.addClass('hide');
			this.$body.removeClass('hide');
		}

		clear() {
			super.clear();
			this.clear_message();
		}

		set_primary_action(label, click) {
			this.footer.removeClass('hide');
			this.has_primary_action = true;
			var me = this;
			return this.get_primary_btn()
				.removeClass("hide")
				.html(label)
				.click(function() {
					me.primary_action_fulfilled = true;
					// get values and send it
					// as first parameter to click callback
					// if no values then return
					var values = me.get_values();
					if(!values) { return; }
					click && click.apply(me, [values]);
				});
		}

		set_secondary_action(click) {
			this.footer.removeClass('hide');
			this.get_secondary_btn().removeClass('hide').off('click').on('click', click);
		}

		set_secondary_action_label(label) {
			this.get_secondary_btn()
				.removeClass("hide")
				.html(label);
		}

		disable_primary_action() {
			this.get_primary_btn().addClass('disabled');
		}

		enable_primary_action() {
			this.get_primary_btn().removeClass('disabled');
		}

		make_head() {
			this.set_title(this.title);
		}

		set_title(t) {
			this.$wrapper.find(".modal-title").html(t);
		}

		set_indicator() {
			if (this.indicator) {
				this.header.find('.indicator').removeClass().addClass('indicator ' + this.indicator);
			}
		}

		show() {
			// show it
			if (this.animate) {
				this.$wrapper.addClass('fade');
			} else {
				this.$wrapper.removeClass('fade');
			}
			this.$wrapper.modal("show");

			this.$wrapper.removeClass('modal-minimize');

			// clear any message
			this.clear_message();

			this.primary_action_fulfilled = false;
			this.is_visible = true;
			return this;
		}

		hide() {
			this.$wrapper.modal("hide");
			this.is_visible = false;
		}

		get_close_btn() {
			return this.$wrapper.find(".btn-modal-close");
		}

		get_secondary_btn() {
			return this.standard_actions.find(".btn-modal-secondary");
		}

		no_cancel() {
			this.get_close_btn().toggle(false);
		}

		cancel() {
			this.get_close_btn().trigger("click");
		}

		toggle_minimize() {
			$('.modal-backdrop').toggle();
			var modal = this.$wrapper.closest('.modal').toggleClass('modal-minimize');
			modal.attr('tabindex') ? modal.removeAttr('tabindex') : modal.attr('tabindex', -1);
			this.is_minimized = !this.is_minimized;
			var icon = this.is_minimized ? 'expand' : 'collapse';
			this.get_minimize_btn().html(frappe.utils.icon(icon));
			this.on_minimize_toggle && this.on_minimize_toggle(this.is_minimized);
			this.header.find('.modal-title').toggleClass('cursor-pointer');
		}

		add_custom_action(label, action, css_class) {
			if ( css_class === void 0 ) css_class=null;

			this.footer.removeClass('hide');
			var action_button = $(("\n\t\t\t<button class=\"btn btn-secondary btn-sm " + (css_class || '') + "\">\n\t\t\t\t" + label + "\n\t\t\t</button>\n\t\t"));
			this.custom_actions.append(action_button);

			action && action_button.click(action);
		}
	};

	frappe.ui.hide_open_dialog = function () {
		// hide open dialog
		if (window.cur_dialog) {
			if (!cur_dialog.minimizable) {
				cur_dialog.hide();
			} else if (!cur_dialog.is_minimized) {
				cur_dialog.toggle_minimize();
			}
		}
	};

}());
//# sourceMappingURL=dialog.min.js.map
