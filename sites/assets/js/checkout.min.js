(function () {
	'use strict';

	/* HOW-TO

	Razorpay Payment

	1. 	Include checkout script in your code
		<script type="text/javascript" src="/assets/js/checkout.min.js"></script>

	2.	Create the Order controller in your backend
		def get_razorpay_order(self):
			controller = get_payment_gateway_controller("Razorpay")

			payment_details = {
				"amount": 300,
				...
				"reference_doctype": "Conference Participant",
				"reference_docname": self.name,
				...
				"receipt": self.name
			}

			return controller.create_order(**payment_details)

	3. 	Inititate the payment in client using checkout API
		function make_payment(ticket) {
			var options = {
				"name": "<CHECKOUT MODAL TITLE>",
				"description": "<CHECKOUT MODAL DESCRIPTION>",
				"image": "<CHECKOUT MODAL LOGO>",
			    "prefill": {
					"name": "<CUSTOMER NAME>",
					"email": "<CUSTOMER EMAIL>",
					"contact": "<CUSTOMER PHONE>"
			    },
			    "theme": {
					"color": "<MODAL COLOR>"
			    },
			    "doctype": "<REFERENCE DOCTYPE>",
			    "docname": "<REFERENCE DOCNAME"
			};

			razorpay = new frappe.checkout.razorpay(options)
			razorpay.on_open = () => {
				<SCRIPT TO RUN WHEN MODAL OPENS>
			}
			razorpay.on_success = () => {
				<SCRIPT TO RUN ON PAYMENT SUCCESS>
			}
			razorpay.on_fail = () => {
				<SCRIPT TO RUN ON PAYMENT FAILURE>
			}
			razorpay.init() // Creates the order and opens the modal
		}
	*/

	frappe.provide("frappe.checkout");

	frappe.require('https://checkout.razorpay.com/v1/checkout.js').then(function () {
		frappe.checkout.razorpay = class RazorpayCheckout {
			constructor(opts) {
				Object.assign(this, opts);
			}

			init() {
				var this$1 = this;

				frappe.run_serially([
					function () { return this$1.get_key(); },
					function () { return this$1.make_order(); },
					function () { return this$1.prepare_options(); },
					function () { return this$1.setup_handler(); },
					function () { return this$1.show(); }
				]);
			}

			show() {
				var this$1 = this;

				this.razorpay = new Razorpay(this.options);
				this.razorpay.once('ready', function (response) {
					this$1.on_open && this$1.on_open(response);
				});
				this.razorpay.open();
			}

			get_key() {
				var this$1 = this;

				return new Promise(function (resolve) {
					frappe.call("frappe.integrations.doctype.razorpay_settings.razorpay_settings.get_api_key").then(function (res) {
						this$1.key = res.message;
						resolve(true);
					});
				});
			}

			make_order() {
				var this$1 = this;

				return new Promise(function (resolve) {
					frappe.call("frappe.integrations.doctype.razorpay_settings.razorpay_settings.get_order", {
						doctype: this$1.doctype,
						docname: this$1.docname
					}).then(function (res) {
						this$1.order = res.message;
						resolve(true);
					});
				});
			}

			order_success(response) {
				frappe.call("frappe.integrations.doctype.razorpay_settings.razorpay_settings.order_payment_success", {
					integration_request: this.order.integration_request,
					params: {
						razorpay_payment_id: response.razorpay_payment_id,
						razorpay_order_id: response.razorpay_order_id,
						razorpay_signature: response.razorpay_signature
					}
				});
			}

			order_fail(response) {
				frappe.call( "frappe.integrations.doctype.razorpay_settings.razorpay_settings.order_payment_failure", {
					integration_request: this.order.integration_request,
					params: response
				});
			}

			prepare_options() {
				this.options = {
					"key": this.key,
					"amount": this.order.amount_due,
					"currency": this.order.currency,
					"name": this.name,
					"description": this.description,
					"image": this.image,
					"order_id": this.order.id,
					"prefill": this.prefill,
					"theme": this.theme,
					"modal": this.modal
				};
			}

			setup_handler() {
				var this$1 = this;

				this.options.handler = function (response) {
					if (response.error) {
						this$1.order_fail(response);
						this$1.on_fail && this$1.on_fail(response);
					}
					else if (response.razorpay_payment_id) {
						this$1.order_success(response);
						this$1.on_success && this$1.on_success(response);
					}
				};
			}
		};
	});

}());
//# sourceMappingURL=checkout.min.js.map
